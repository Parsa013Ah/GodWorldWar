{"file_contents":{"admin.py":{"content":"import logging\nfrom telegram import Update\nfrom telegram.ext import ContextTypes, MessageHandler, filters\nfrom keyboards import Keyboards\nfrom config import Config\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\nlogger = logging.getLogger(__name__)\n\nclass AdminPanel:\n    def __init__(self, database):\n        self.db = database\n        self.keyboards = Keyboards()\n        # List of admin user IDs - add your admin IDs here\n        # Add the user ID for @PO0AH013\n        self.admin_ids = [5283015101]  # Your actual admin user ID\n\n    def is_admin(self, user_id):\n        \"\"\"Check if user is admin\"\"\"\n        return user_id in self.admin_ids\n\n    async def handle_admin_action(self, query, context):\n        \"\"\"Handle admin panel actions\"\"\"\n        user_id = query.from_user.id\n        if not self.is_admin(user_id):\n            await query.edit_message_text(\"❌ شما مجاز به این عمل نیستید!\")\n            return\n\n        action = query.data.replace(\"admin_\", \"\")\n\n        if action == \"panel\":\n            await self.show_admin_panel(query)\n        elif action == \"stats\":\n            await self.show_game_stats(query)\n        elif action == \"players\":\n            await self.show_players_management(query)\n        elif action == \"logs\":\n            await self.show_admin_logs(query)\n        elif action == \"reset\":\n            await self.show_reset_confirmation(query)\n        elif action == \"reset_confirm\":\n            await self.reset_game_data(query)\n        elif action == \"infinite_resources\":\n            await self.give_infinite_resources(query)\n        elif action == \"country_reset\":\n            await self.show_country_reset_menu(query)\n        elif action == \"give_items\":\n            await self.show_give_items_menu(query)\n        elif action.startswith(\"player_\"):\n            player_id = int(action.replace(\"player_\", \"\"))\n            await self.show_player_actions(query, player_id)\n        elif action.startswith(\"delete_\"):\n            player_id = int(action.replace(\"delete_\", \"\"))\n            await self.delete_player_confirm(query, player_id)\n        elif action.startswith(\"view_\"):\n            player_id = int(action.replace(\"view_\", \"\"))\n            await self.view_player_full(query, player_id)\n        else:\n            await query.edit_message_text(\"❌ دستور نامعتبر!\")\n            return\n\n    async def show_admin_panel(self, query):\n        \"\"\"Show main admin panel\"\"\"\n        admin_text = \"\"\"👑 پنل مدیریت DragonRP\n\n🎮 سیستم مدیریت کامل بازی\n\nانتخاب کنید:\"\"\"\n\n        keyboard = self.keyboards.admin_panel_keyboard()\n        await query.edit_message_text(admin_text, reply_markup=keyboard)\n\n    async def show_game_stats(self, query):\n        \"\"\"Show game statistics\"\"\"\n        players = self.db.get_all_players()\n        total_players = len(players)\n\n        total_money = sum(player['money'] for player in players)\n        total_population = sum(player['population'] for player in players)\n        total_soldiers = sum(player['soldiers'] for player in players)\n\n        # Get most powerful country\n        max_money_player = max(players, key=lambda x: x['money']) if players else None\n        max_pop_player = max(players, key=lambda x: x['population']) if players else None\n\n        stats_text = f\"\"\"📊 آمار کلی بازی\n\n👥 تعداد بازیکنان: {total_players}\n💰 کل پول: ${total_money:,}\n🌍 کل جمعیت: {total_population:,}\n⚔️ کل سربازان: {total_soldiers:,}\n\n🏆 ثروتمندترین کشور: {max_money_player['country_name'] if max_money_player else 'ندارد'}\n👑 پرجمعیت‌ترین کشور: {max_pop_player['country_name'] if max_pop_player else 'ندارد'}\n\n📈 وضعیت سرور: ✅ فعال\n🕐 آخرین آپدیت: اکنون\"\"\"\n\n        keyboard = InlineKeyboardMarkup([\n            [\n                InlineKeyboardButton(\"🔄 بروزرسانی\", callback_data=\"admin_stats\"),\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_panel\")\n            ]\n        ])\n\n        await query.edit_message_text(stats_text, reply_markup=keyboard)\n\n    async def show_players_management(self, query):\n        \"\"\"Show players management\"\"\"\n        players = self.db.get_all_players()\n\n        if not players:\n            await query.edit_message_text(\n                \"👥 هیچ بازیکنی در بازی نیست!\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n            return\n\n        players_text = \"👥 مدیریت بازیکنان\\n\\n\"\n\n        for player in players[:15]:  # Show first 15 players\n            players_text += f\"🏴 {player['country_name']}\\n\"\n            players_text += f\"👤 {player['username']}\\n\"\n            players_text += f\"💰 ${player['money']:,}\\n\"\n            players_text += f\"👥 {player['population']:,}\\n\"\n            players_text += f\"⚔️ {player['soldiers']:,}\\n\\n\"\n\n        keyboard = self.keyboards.admin_players_keyboard(players)\n        await query.edit_message_text(players_text, reply_markup=keyboard)\n\n    async def show_player_management(self, query, context, data):\n        \"\"\"Show specific player management\"\"\"\n        user_id = int(data.replace(\"player_\", \"\"))\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ بازیکن یافت نشد!\")\n            return\n\n        resources = self.db.get_player_resources(user_id)\n        buildings = self.db.get_player_buildings(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        player_text = f\"\"\"👤 مدیریت بازیکن\n🏴 کشور: {player['country_name']}\n👤 نام: {player['username']}\n\n💰 پول: ${player['money']:,}\n👥 جمعیت: {player['population']:,}\n⚔️سربازان: {player['soldiers']:,}\n\n📊 منابع اصلی:\n🔩 آهن: {resources.get('iron', 0):,}\n🥉 مس: {resources.get('copper', 0):,}\n🛢 نفت: {resources.get('oil', 0):,}\n🏆 طلا: {resources.get('gold', 0):,}\n\n🏗 ساختمان‌های کلیدی:\n⛏ معادن: {sum(v for k, v in buildings.items() if 'mine' in k)}\n🏭 کارخانه‌ها: {buildings.get('weapon_factory', 0)}\n🪖 پادگان: {buildings.get('military_base', 0)}\n\n🔫 تسلیحات کلیدی:\n🔫 تفنگ: {weapons.get('rifle', 0)}\n🚗 تانک: {weapons.get('tank', 0)}\n✈️ جنگنده: {weapons.get('fighter_jet', 0)}\"\"\"\n\n        keyboard = self.keyboards.admin_player_actions_keyboard(user_id)\n        await query.edit_message_text(player_text, reply_markup=keyboard)\n\n    async def delete_player(self, query, context, data):\n        \"\"\"Delete a player\"\"\"\n        user_id = int(data.replace(\"delete_player_\", \"\"))\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ بازیکن یافت نشد!\")\n            return\n\n        # Delete player\n        success = self.db.delete_player(user_id)\n\n        if success:\n            # Log admin action\n            admin_id = query.from_user.id\n            self.db.log_admin_action(\n                admin_id,\n                \"DELETE_PLAYER\",\n                user_id,\n                f\"Deleted player {player['country_name']}\"\n            )\n\n            await query.edit_message_text(\n                f\"✅ بازیکن {player['country_name']} حذف شد!\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n        else:\n            await query.edit_message_text(\"❌ خطا در حذف بازیکن!\")\n\n    async def show_admin_logs(self, query):\n        \"\"\"Show admin logs\"\"\"\n        logs = self.db.get_admin_logs(20)\n\n        if not logs:\n            await query.edit_message_text(\n                \"📝 هیچ لاگ ادمینی موجود نیست!\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n            return\n\n        logs_text = \"📝 لاگ‌های ادمین (20 آخرین)\\n\\n\"\n\n        for log in logs:\n            logs_text += f\"🕐 {log['created_at']}\\n\"\n            logs_text += f\"👤 Admin ID: {log['admin_id']}\\n\"\n            logs_text += f\"🔧 Action: {log['action']}\\n\"\n            if log['details']:\n                logs_text += f\"📋 Details: {log['details']}\\n\"\n            logs_text += \"─────────────\\n\"\n\n        keyboard = InlineKeyboardMarkup([\n            [\n                InlineKeyboardButton(\"🔄 بروزرسانی\", callback_data=\"admin_logs\"),\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_panel\")\n            ]\n        ])\n\n        await query.edit_message_text(logs_text, reply_markup=keyboard)\n\n    async def show_reset_confirmation(self, query):\n        \"\"\"Show reset confirmation\"\"\"\n        warning_text = \"\"\"⚠️ هشدار: ریست کامل بازی\n\nاین عمل تمام داده‌های بازی را حذف می‌کند:\n• تمام بازیکنان و کشورها\n• تمام منابع و ساختمان‌ها\n• تمام تسلیحات و جنگ‌ها\n• تاریخچه کامل بازی\n\n❗ این عمل قابل برگشت نیست!\n\nآیا مطمئن هستید؟\"\"\"\n\n        keyboard = InlineKeyboardMarkup([\n            [\n                InlineKeyboardButton(\"✅ بله، ریست کن\", callback_data=\"admin_reset_confirm\"),\n                InlineKeyboardButton(\"❌ انصراف\", callback_data=\"admin_panel\")\n            ]\n        ])\n\n        await query.edit_message_text(warning_text, reply_markup=keyboard)\n\n    async def reset_game_data(self, query):\n        \"\"\"Reset all game data\"\"\"\n        user_id = query.from_user.id\n\n        try:\n            success = self.db.reset_all_data()\n\n            if success:\n                # Log admin action\n                self.db.log_admin_action(\n                    user_id,\n                    \"RESET_GAME\",\n                    None,\n                    \"Complete game reset performed\"\n                )\n\n                await query.edit_message_text(\n                    \"✅ بازی با موفقیت ریست شد!\\n\\n\"\n                    \"تمام داده‌ها حذف شدند و بازی آماده شروع مجدد است.\",\n                    reply_markup=self.keyboards.back_to_main_keyboard()\n                )\n            else:\n                await query.edit_message_text(\"❌ خطا در ریست بازی!\")\n\n        except Exception as e:\n            logger.error(f\"Error in reset_game_data: {e}\")\n            await query.edit_message_text(\n                \"❌ خطای سیستمی در ریست!\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n            \n    async def give_infinite_resources(self, query):\n        \"\"\"Give infinite resources to all players\"\"\"\n        user_id = query.from_user.id\n\n        try:\n            success = self.db.give_infinite_resources_to_all_players()\n\n            if success:\n                self.db.log_admin_action(user_id, \"GIVE_INFINITE_RESOURCES\", None, \"Infinite resources to all players\")\n                await query.edit_message_text(\n                    \"✅ منابع و پول بینهایت به همه بازیکنان داده شد!\\n\\n\"\n                    \"💰 پول: 1,000,000,000 دلار\\n\"\n                    \"📊 منابع: 1,000,000 از هر نوع\\n\"\n                    \"👥 جمعیت: 50,000,000\\n\"\n                    \"⚔️ سربازان: 10,000,000\\n\"\n                    \"🏗 ساختمان‌ها: 100 از هر نوع معدن، 50 از بقیه\",\n                    reply_markup=self.keyboards.back_to_main_keyboard()\n                )\n            else:\n                await query.edit_message_text(\n                    \"❌ خطا در دادن منابع بینهایت!\",\n                    reply_markup=self.keyboards.back_to_main_keyboard()\n                )\n\n        except Exception as e:\n            logger.error(f\"Error in give_infinite_resources: {e}\")\n            await query.edit_message_text(\n                \"❌ خطای سیستمی!\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n\n\n    def setup_handlers(self, application):\n        \"\"\"Setup admin-specific handlers\"\"\"\n        # Add any additional admin-specific message handlers here\n        pass\n\n    async def send_admin_notification(self, message):\n        \"\"\"Send notification to all admins\"\"\"\n        # This would send a message to all admin users\n        # Implementation depends on bot context\n        pass\n\n    def add_admin(self, user_id):\n        \"\"\"Add new admin\"\"\"\n        if user_id not in self.admin_ids:\n            self.admin_ids.append(user_id)\n            return True\n        return False\n\n    def remove_admin(self, user_id):\n        \"\"\"Remove admin\"\"\"\n        if user_id in self.admin_ids:\n            self.admin_ids.remove(user_id)\n            return True\n        return False\n\n    def give_resources_to_player(self, user_id, resource_type, amount):\n        \"\"\"Give resources to a player\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد'}\n\n        # Add resources\n        self.db.add_resources(user_id, resource_type, amount)\n\n        resource_config = Config.RESOURCES.get(resource_type, {})\n        resource_name = resource_config.get('name', resource_type)\n\n        return {\n            'success': True,\n            'message': f\"{amount:,} {resource_name} به {player['country_name']} اضافه شد\"\n        }\n\n    def give_weapons_to_player(self, user_id, weapon_type, amount):\n        \"\"\"Give weapons to a player\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد'}\n\n        # Add weapons\n        self.db.add_weapon(user_id, weapon_type, amount)\n\n        weapon_config = Config.WEAPONS.get(weapon_type, {})\n        weapon_name = weapon_config.get('name', weapon_type)\n\n        return {\n            'success': True,\n            'message': f\"{amount:,} {weapon_name} به {player['country_name']} اضافه شد\"\n        }\n\n    def give_money_to_player(self, user_id, amount):\n        \"\"\"Give money to a player\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد'}\n\n        # Add money\n        new_money = player['money'] + amount\n        self.db.update_player_money(user_id, new_money)\n\n        return {\n            'success': True,\n            'message': f\"${amount:,} به {player['country_name']} اضافه شد\"\n        }\n\n    def give_population_to_player(self, user_id, amount):\n        \"\"\"Give population to a player\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد'}\n\n        new_population = player['population'] + amount\n        self.db.update_player_population(user_id, new_population)\n\n        return {\n            'success': True,\n            'message': f\"{amount:,} نفر جمعیت به {player['country_name']} اضافه شد\"\n        }\n\n    def give_soldiers_to_player(self, user_id, amount):\n        \"\"\"Give soldiers to a player\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد'}\n\n        new_soldiers = player['soldiers'] + amount\n        self.db.update_player_soldiers(user_id, new_soldiers)\n\n        return {\n            'success': True,\n            'message': f\"{amount:,} سرباز به {player['country_name']} اضافه شد\"\n        }\n\n    def give_buildings_to_player(self, user_id, building_type, amount):\n        \"\"\"Give buildings to a player\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد'}\n\n        # Add buildings\n        for _ in range(amount):\n            self.db.add_building(user_id, building_type)\n\n        building_config = Config.BUILDINGS.get(building_type, {})\n        building_name = building_config.get('name', building_type)\n\n        return {\n            'success': True,\n            'message': f\"{amount:,} {building_name} به {player['country_name']} اضافه شد\"\n        }\n\n    async def handle_penalty_country(self, query, context, data):\n        \"\"\"Handle country penalty - halve all resources\"\"\"\n        country_code = data.replace(\"admin_penalty_\", \"\") # Corrected to use country_code directly\n\n        # Find player by country code\n        all_players = self.db.get_all_players() # Assuming get_all_players returns list of players with country_name\n        player = None\n        for p in all_players:\n            # Assuming player dict has 'country_name' and Config.COUNTRIES maps country_code to country_name\n            # If your DB stores country_code directly in player, adjust this logic\n            if Config.COUNTRIES.get(country_code) == p['country_name']:\n                player = p\n                break\n\n        if not player:\n            await query.edit_message_text(f\"❌ کشور با کد {country_code} یافت نشد!\")\n            return\n\n        user_id = player['user_id']\n\n        # Halve money\n        new_money = player['money'] // 2\n        self.db.update_player_money(user_id, new_money)\n\n        # Halve population and soldiers\n        new_population = player['population'] // 2\n        new_soldiers = player['soldiers'] // 2\n        self.db.update_player_population(user_id, new_population)\n        self.db.update_player_soldiers(user_id, new_soldiers)\n\n        # Halve all resources\n        resources = self.db.get_player_resources(user_id)\n        for resource, amount in resources.items():\n            if resource != 'user_id' and amount > 0:\n                new_amount = amount // 2\n                self.db.update_resource(user_id, resource, new_amount)\n\n        # Halve all weapons\n        weapons = self.db.get_player_weapons(user_id)\n        for weapon, amount in weapons.items():\n            if weapon != 'user_id' and amount > 0:\n                new_amount = amount // 2\n                self.db.update_weapon_count(user_id, weapon, new_amount)\n\n        # Halve all buildings\n        buildings = self.db.get_player_buildings(user_id)\n        for building, amount in buildings.items():\n            if amount > 0:\n                new_amount = amount // 2\n                self.db.update_building_count(user_id, building, new_amount)\n\n        # Log admin action\n        admin_id = query.from_user.id\n        country_name = Config.COUNTRIES.get(country_code, country_code)\n        self.db.log_admin_action(\n            admin_id,\n            \"PENALTY_COUNTRY\",\n            user_id,\n            f\"Penalized country {country_name} - halved all resources\"\n        )\n\n        await query.edit_message_text(f\"⚠️ کشور {country_name} جریمه شد!\\n\\nتمام منابع، تسلیحات و ساختمان‌های این کشور نصف شدند.\")\n\n\n    async def show_country_reset_menu(self, query):\n        \"\"\"Show menu to select country for reset\"\"\"\n        players = self.db.get_all_players()\n\n        if not players:\n            await query.edit_message_text(\n                \"👥 هیچ کشوری برای ریست موجود نیست!\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n            return\n\n        reset_text = \"🔄 انتخاب کشور برای ریست\\n\\nکشور مورد نظر را انتخاب کنید:\"\n\n        keyboard = []\n\n        for player in players[:10]:  # Show first 10 countries\n            keyboard.append([InlineKeyboardButton(\n                f\"🏴 {player['country_name']}\",\n                callback_data=f\"admin_reset_country_{player['user_id']}\"\n            )])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_panel\")])\n\n        await query.edit_message_text(reset_text, reply_markup=InlineKeyboardMarkup(keyboard))\n\n    async def reset_country(self, query, context, data):\n        \"\"\"Reset a specific country\"\"\"\n        user_id = int(data.replace(\"reset_country_\", \"\"))\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ کشور یافت نشد!\")\n            return\n\n        # Show confirmation\n        keyboard = InlineKeyboardMarkup([\n            [\n                InlineKeyboardButton(\"✅ بله، ریست کن\", callback_data=f\"admin_confirm_reset_{user_id}\"),\n                InlineKeyboardButton(\"❌ انصراف\", callback_data=\"admin_country_reset\")\n            ]\n        ])\n\n        warning_text = f\"\"\"⚠️ تأیید ریست کشور\n\n🏴 کشور: {player['country_name']}\n👤 بازیکن: {player['username']}\n\n❗ این عمل کشور را به حالت اولیه بازگرداند:\n• پول: $100,000\n• جمعیت: 1,000,000\n• سربازان: 0\n• تمام منابع، تسلیحات و ساختمان‌ها حذف می‌شوند\n\n❗ این عمل قابل برگشت نیست!\n\nآیا مطمئن هستید؟\"\"\"\n\n        await query.edit_message_text(warning_text, reply_markup=keyboard)\n\n    async def confirm_country_reset(self, query, context, user_id):\n        \"\"\"Confirm and execute country reset\"\"\"\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ کشور یافت نشد!\")\n            return\n\n        # Reset player to initial state\n        success = self.db.reset_player_data(user_id)\n\n        if success:\n            # Log admin action\n            admin_id = query.from_user.id\n            self.db.log_admin_action(\n                admin_id,\n                \"RESET_COUNTRY\",\n                user_id,\n                f\"Reset country {player['country_name']}\"\n            )\n\n            await query.edit_message_text(\n                f\"✅ کشور {player['country_name']} با موفقیت ریست شد!\\n\\n\"\n                f\"این کشور به حالت اولیه بازگشت.\",\n                reply_markup=self.keyboards.back_to_main_keyboard()\n            )\n        else:\n            await query.edit_message_text(\"❌ خطا در ریست کشور!\")\n\n    async def handle_penalty_action(self, query, context, data):\n        \"\"\"Handle specific penalty actions\"\"\"\n        parts = data.split('_')\n        penalty_type = parts[1]\n        user_id = int(parts[2])\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ بازیکن یافت نشد!\")\n            return\n\n        if penalty_type == \"money\":\n            # Execute penalty\n            penalty_amount = min(player['money'] * 0.1, 100000)  # 10% or max 100k\n            new_money = max(0, player['money'] - penalty_amount)\n            self.db.update_player_money(player['user_id'], new_money)\n\n            # Send notification to penalized player\n            try:\n                await context.bot.send_message(\n                    chat_id=player['user_id'],\n                    text=f\"⚠️ کشور {player['country_name']} به دلیل رعایت نکردن قوانین جریمه شد!\\n💰 مبلغ جریمه: ${penalty_amount:,}\"\n                )\n            except:\n                pass\n\n            await query.edit_message_text(\n                f\"✅ جریمه مالی اعمال شد!\\n\"\n                f\"🎯 هدف: {player['country_name']}\\n\"\n                f\"💰 مبلغ جریمه: ${penalty_amount:,}\\n\"\n                f\"📱 کاربر مطلع شد.\"\n            )\n        elif penalty_type == \"resources\":\n            # Halve all resources\n            resources = self.db.get_player_resources(user_id)\n            for resource, amount in resources.items():\n                if resource != 'user_id' and amount > 0:\n                    new_amount = amount // 2\n                    self.db.update_resource(user_id, resource, new_amount)\n\n            await query.edit_message_text(\n                f\"✅ کسر منابع اعمال شد!\\n\"\n                f\"🎯 هدف: {player['country_name']}\\n\"\n                f\"📦 تمام منابع این کشور نصف شدند.\"\n            )\n        elif penalty_type == \"weapons\":\n            # Halve all weapons\n            weapons = self.db.get_player_weapons(user_id)\n            for weapon, amount in weapons.items():\n                if weapon != 'user_id' and amount > 0:\n                    new_amount = amount // 2\n                    self.db.update_weapon_count(user_id, weapon, new_amount)\n\n            await query.edit_message_text(\n                f\"✅ کسر تسلیحات اعمال شد!\\n\"\n                f\"🎯 هدف: {player['country_name']}\\n\"\n                f\"⚔️ تمام تسلیحات این کشور نصف شدند.\"\n            )\n        else:\n            await query.edit_message_text(\"❌ نوع جریمه نامعتبر!\")","size_bytes":25076},"alliance.py":{"content":"import logging\nfrom datetime import datetime\nfrom config import Config\nfrom telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import ContextTypes\n\nlogger = logging.getLogger(__name__)\n\nclass AllianceSystem:\n    def __init__(self, database):\n        self.db = database\n        self.setup_alliance_tables()\n\n    def setup_alliance_tables(self):\n        \"\"\"Setup alliance tables in database\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Alliances table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS alliances (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    name TEXT NOT NULL,\n                    leader_id INTEGER NOT NULL,\n                    description TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (leader_id) REFERENCES players (user_id)\n                )\n            ''')\n\n            # Alliance members table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS alliance_members (\n                    alliance_id INTEGER NOT NULL,\n                    player_id INTEGER NOT NULL,\n                    role TEXT DEFAULT 'member',\n                    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    PRIMARY KEY (alliance_id, player_id),\n                    FOREIGN KEY (alliance_id) REFERENCES alliances (id),\n                    FOREIGN KEY (player_id) REFERENCES players (user_id)\n                )\n            ''')\n\n            # Alliance invitations table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS alliance_invitations (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    alliance_id INTEGER NOT NULL,\n                    inviter_id INTEGER NOT NULL,\n                    invitee_id INTEGER NOT NULL,\n                    status TEXT DEFAULT 'pending',\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (alliance_id) REFERENCES alliances (id),\n                    FOREIGN KEY (inviter_id) REFERENCES players (user_id),\n                    FOREIGN KEY (invitee_id) REFERENCES players (user_id)\n                )\n            ''')\n\n            conn.commit()\n\n    def create_alliance(self, leader_id, alliance_name, description=\"\"):\n        \"\"\"Create new alliance\"\"\"\n        # Check if player is already in an alliance\n        if self.get_player_alliance(leader_id):\n            return {'success': False, 'message': 'شما قبلاً عضو یک اتحاد هستید!'}\n\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Create alliance\n            cursor.execute('''\n                INSERT INTO alliances (name, leader_id, description)\n                VALUES (?, ?, ?)\n            ''', (alliance_name, leader_id, description))\n\n            alliance_id = cursor.lastrowid\n\n            # Add leader as member\n            cursor.execute('''\n                INSERT INTO alliance_members (alliance_id, player_id, role)\n                VALUES (?, ?, 'leader')\n            ''', (alliance_id, leader_id))\n\n            conn.commit()\n\n            return {\n                'success': True,\n                'message': f'اتحاد \"{alliance_name}\" با موفقیت تشکیل شد!',\n                'alliance_id': alliance_id\n            }\n\n    def invite_to_alliance(self, inviter_id, invitee_id):\n        \"\"\"Invite player to alliance\"\"\"\n        inviter_alliance = self.get_player_alliance(inviter_id)\n\n        if not inviter_alliance:\n            return {'success': False, 'message': 'شما عضو هیچ اتحادی نیستید!'}\n\n        # Check if inviter has permission (leader or officer)\n        if inviter_alliance['role'] not in ['leader', 'officer']:\n            return {'success': False, 'message': 'شما اجازه دعوت کردن ندارید!'}\n\n        # Check if invitee is already in an alliance\n        if self.get_player_alliance(invitee_id):\n            return {'success': False, 'message': 'این بازیکن قبلاً عضو یک اتحاد است!'}\n\n        # Check for existing invitation\n        existing = self.get_pending_invitation(inviter_alliance['alliance_id'], invitee_id)\n        if existing:\n            return {'success': False, 'message': 'دعوت‌نامه قبلاً ارسال شده!'}\n\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT INTO alliance_invitations (alliance_id, inviter_id, invitee_id)\n                VALUES (?, ?, ?)\n            ''', (inviter_alliance['alliance_id'], inviter_id, invitee_id))\n            conn.commit()\n\n        return {\n            'success': True,\n            'message': 'دعوت‌نامه ارسال شد!',\n            'alliance_name': inviter_alliance['alliance_name']\n        }\n\n    def respond_to_invitation(self, player_id, invitation_id, response):\n        \"\"\"Respond to alliance invitation\"\"\"\n        invitation = self.get_invitation(invitation_id)\n\n        if not invitation or invitation['invitee_id'] != player_id:\n            return {'success': False, 'message': 'دعوت‌نامه یافت نشد!'}\n\n        if invitation['status'] != 'pending':\n            return {'success': False, 'message': 'این دعوت‌نامه قبلاً پاسخ داده شده!'}\n\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            if response == 'accept':\n                # Add to alliance\n                cursor.execute('''\n                    INSERT INTO alliance_members (alliance_id, player_id)\n                    VALUES (?, ?)\n                ''', (invitation['alliance_id'], player_id))\n\n                # Update invitation status\n                cursor.execute('''\n                    UPDATE alliance_invitations \n                    SET status = 'accepted' \n                    WHERE id = ?\n                ''', (invitation_id,))\n\n                conn.commit()\n\n                return {\n                    'success': True,\n                    'message': f'شما با موفقیت به اتحاد \"{invitation[\"alliance_name\"]}\" پیوستید!'\n                }\n            else:\n                # Reject invitation\n                cursor.execute('''\n                    UPDATE alliance_invitations \n                    SET status = 'rejected' \n                    WHERE id = ?\n                ''', (invitation_id,))\n\n                conn.commit()\n\n                return {\n                    'success': True,\n                    'message': 'دعوت‌نامه رد شد.'\n                }\n\n    def get_player_alliance(self, player_id):\n        \"\"\"Get player's current alliance\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT a.id as alliance_id, a.name as alliance_name, \n                       am.role, a.leader_id, a.description\n                FROM alliances a\n                JOIN alliance_members am ON a.id = am.alliance_id\n                WHERE am.player_id = ?\n            ''', (player_id,))\n\n            result = cursor.fetchone()\n            return dict(result) if result else None\n\n    def get_alliance_members(self, alliance_id):\n        \"\"\"Get alliance members\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT p.user_id, p.country_name, p.username, am.role, am.joined_at\n                FROM alliance_members am\n                JOIN players p ON am.player_id = p.user_id\n                WHERE am.alliance_id = ?\n                ORDER BY am.role DESC, am.joined_at\n            ''', (alliance_id,))\n\n            return [dict(row) for row in cursor.fetchall()]\n\n    def get_pending_invitations(self, player_id):\n        \"\"\"Get pending invitations for player\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT ai.id, a.name as alliance_name, p.country_name as inviter_country,\n                       ai.created_at\n                FROM alliance_invitations ai\n                JOIN alliances a ON ai.alliance_id = a.id\n                JOIN players p ON ai.inviter_id = p.user_id\n                WHERE ai.invitee_id = ? AND ai.status = 'pending'\n                ORDER BY ai.created_at DESC\n            ''', (player_id,))\n\n            return [dict(row) for row in cursor.fetchall()]\n\n    def get_pending_invitation(self, alliance_id, invitee_id):\n        \"\"\"Check for existing pending invitation\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT id FROM alliance_invitations\n                WHERE alliance_id = ? AND invitee_id = ? AND status = 'pending'\n            ''', (alliance_id, invitee_id))\n\n            return cursor.fetchone() is not None\n\n    def get_invitation(self, invitation_id):\n        \"\"\"Get invitation details\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT ai.*, a.name as alliance_name\n                FROM alliance_invitations ai\n                JOIN alliances a ON ai.alliance_id = a.id\n                WHERE ai.id = ?\n            ''', (invitation_id,))\n\n            result = cursor.fetchone()\n            return dict(result) if result else None\n\n    def leave_alliance(self, player_id):\n        \"\"\"Leave alliance\"\"\"\n        alliance = self.get_player_alliance(player_id)\n\n        if not alliance:\n            return {'success': False, 'message': 'شما عضو هیچ اتحادی نیستید!'}\n\n        if alliance['role'] == 'leader':\n            # Check if there are other members\n            members = self.get_alliance_members(alliance['alliance_id'])\n            if len(members) > 1:\n                return {'success': False, 'message': 'رهبر اتحاد نمی‌تواند اتحاد را ترک کند تا اعضای دیگر موجود باشند!'}\n            else:\n                # Disband alliance\n                return self.disband_alliance(alliance['alliance_id'])\n\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                DELETE FROM alliance_members \n                WHERE alliance_id = ? AND player_id = ?\n            ''', (alliance['alliance_id'], player_id))\n            conn.commit()\n\n        return {\n            'success': True,\n            'message': f'شما اتحاد \"{alliance[\"alliance_name\"]}\" را ترک کردید.'\n        }\n\n    def disband_alliance(self, alliance_id):\n        \"\"\"Disband alliance\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Remove all members\n            cursor.execute('DELETE FROM alliance_members WHERE alliance_id = ?', (alliance_id,))\n\n            # Remove all invitations\n            cursor.execute('DELETE FROM alliance_invitations WHERE alliance_id = ?', (alliance_id,))\n\n            # Remove alliance\n            cursor.execute('DELETE FROM alliances WHERE id = ?', (alliance_id,))\n\n            conn.commit()\n\n        return {'success': True, 'message': 'اتحاد منحل شد.'}\n\n    def get_all_players(self):\n        \"\"\"Get all players\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT user_id, country_name FROM players')\n            return [dict(row) for row in cursor.fetchall()]\n\n    def get_player(self, player_id):\n        \"\"\"Get player details\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT user_id, country_name FROM players WHERE user_id = ?', (player_id,))\n            result = cursor.fetchone()\n            return dict(result) if result else None\n\n    async def handle_statement_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle statement text input\"\"\"\n        try:\n            user_id = update.effective_user.id\n            text = update.message.text\n\n            if not text or len(text.strip()) == 0:\n                await update.message.reply_text(\"❌ متن بیانیه نمی‌تواند خالی باشد!\")\n                return\n\n            if len(text) > 500:\n                await update.message.reply_text(\"❌ متن بیانیه نمی‌تواند بیش از 500 کاراکتر باشد!\")\n                return\n\n            # Get alliance\n            alliance = self.db.get_player_alliance(user_id)\n            if not alliance:\n                await update.message.reply_text(\"❌ شما عضو هیچ اتحادی نیستید!\")\n                return\n\n            # Check if user is leader\n            if alliance['leader_id'] != user_id:\n                await update.message.reply_text(\"❌ فقط رهبر اتحاد می‌تواند بیانیه ارسال کند!\")\n                return\n\n            # Send statement to all alliance members\n            members = self.db.get_alliance_members(alliance['id'])\n            sent_count = 0\n\n            statement_text = f\"\"\"📢 بیانیه اتحاد {alliance['name']}\n\n{text}\n\n🕐 {datetime.now().strftime('%Y-%m-%d %H:%M')}\n👤 رهبر اتحاد\"\"\"\n\n            for member in members:\n                try:\n                    await context.bot.send_message(\n                        chat_id=member['user_id'], \n                        text=statement_text\n                    )\n                    sent_count += 1\n                except Exception as e:\n                    logger.error(f\"Failed to send statement to {member['user_id']}: {e}\")\n\n            await update.message.reply_text(\n                f\"✅ بیانیه به {sent_count} عضو ارسال شد!\"\n            )\n\n        except Exception as e:\n            logger.error(f\"Error in handle_statement_text: {e}\")\n            await update.message.reply_text(\"❌ خطا در ارسال بیانیه!\")\n\n    async def handle_alliance_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle alliance related queries\"\"\"\n        query = update.callback_query\n        user_id = query.from_user.id\n\n        await query.answer()\n\n        if query.data == \"alliance_menu\":\n            alliance = self.db.get_player_alliance(user_id)\n            if not alliance:\n                await query.edit_message_text(\"❌ شما عضو هیچ اتحادی نیستید!\")\n                return\n\n            keyboard = [\n                [InlineKeyboardButton(\"اعضای اتحاد\", callback_data=\"alliance_members\")],\n                [InlineKeyboardButton(\"دعوت به اتحاد\", callback_data=\"alliance_invite_list\")],\n                [InlineKeyboardButton(\"درخواست‌های ورود\", callback_data=\"alliance_requests\")],\n                [InlineKeyboardButton(\"بیانیه اتحاد\", callback_data=\"alliance_statement\")],\n                [InlineKeyboardButton(\"ترک اتحاد\", callback_data=\"leave_alliance\")],\n            ]\n            if alliance['role'] == 'leader':\n                keyboard.append([InlineKeyboardButton(\"انحلال اتحاد\", callback_data=\"disband_alliance\")])\n            \n            await query.edit_message_text(\n                f\"🏛 منوی اتحاد: {alliance['name']}\\n\\n\"\n                f\"توضیحات: {alliance.get('description', 'بدون توضیحات')}\\n\"\n                f\"رهبر: {alliance.get('leader_name', 'نامشخص')}\\n\"\n                f\"نقش شما: {alliance['role']}\",\n                reply_markup=InlineKeyboardMarkup(keyboard)\n            )\n\n        elif query.data == \"alliance_members\":\n            alliance = self.db.get_player_alliance(user_id)\n            if not alliance:\n                await query.edit_message_text(\"❌ شما عضو هیچ اتحادی نیستید!\")\n                return\n\n            members = self.db.get_alliance_members(alliance['id'])\n            if not members:\n                await query.edit_message_text(\"❌ هیچ عضوی در اتحاد یافت نشد!\")\n                return\n\n            member_list = \"👥 اعضای اتحاد:\\n\\n\"\n            for member in members:\n                member_list += f\"- {member['country_name']} ({member['role']})\\n\"\n\n            await query.edit_message_text(member_list, reply_markup=self.keyboards.back_to_alliance_keyboard())\n\n        elif query.data == \"alliance_invite_list\":\n            alliance = self.db.get_player_alliance(user_id)\n            if not alliance:\n                await query.edit_message_text(\"❌ شما عضو هیچ اتحادی نیستید!\")\n                return\n\n            if alliance['leader_id'] != user_id:\n                await query.edit_message_text(\"❌ فقط رهبر اتحاد می‌تواند دعوت‌نامه ارسال کند!\")\n                return\n\n            # Get all players not in alliance\n            all_players = self.db.get_all_players()\n            available_players = []\n\n            for player in all_players:\n                if not self.db.get_player_alliance(player['user_id']) and player['user_id'] != user_id:\n                    available_players.append(player)\n\n            if not available_players:\n                await query.edit_message_text(\n                    \"❌ هیچ کشوری برای دعوت یافت نشد!\",\n                    reply_markup=self.keyboards.alliance_invite_keyboard()\n                )\n                return\n\n            await query.edit_message_text(\n                \"👥 کشوری را برای دعوت انتخاب کنید:\",\n                reply_markup=self.keyboards.alliance_invite_keyboard(available_players)\n            )\n\n        elif query.data.startswith(\"alliance_invite_\"):\n            try:\n                target_id = int(query.data.split(\"_\")[-1])\n                alliance = self.db.get_player_alliance(user_id)\n\n                if not alliance or alliance['leader_id'] != user_id:\n                    await query.edit_message_text(\"❌ شما مجاز به ارسال دعوت‌نامه نیستید!\")\n                    return\n\n                # Check if target already in alliance\n                if self.db.get_player_alliance(target_id):\n                    await query.edit_message_text(\"❌ این کشور قبلاً عضو اتحادی است!\")\n                    return\n\n                # Send invitation\n                target_player = self.db.get_player(target_id)\n                if not target_player:\n                    await query.edit_message_text(\"❌ کشور یافت نشد!\")\n                    return\n\n                sender_player = self.db.get_player(user_id)\n\n                invite_text = f\"\"\"📨 دعوت‌نامه اتحاد\n\n🏛 اتحاد: {alliance['name']}\n👤 دعوت‌کننده: {sender_player['country_name']}\n\nآیا می‌خواهید به این اتحاد بپیوندید؟\"\"\"\n\n                invite_keyboard = [\n                    [\n                        InlineKeyboardButton(\"✅ پذیرش\", callback_data=f\"accept_alliance_{alliance['id']}\"),\n                        InlineKeyboardButton(\"❌ رد\", callback_data=\"reject_alliance\")\n                    ]\n                ]\n\n                try:\n                    await context.bot.send_message(\n                        chat_id=target_id,\n                        text=invite_text,\n                        reply_markup=InlineKeyboardMarkup(invite_keyboard)\n                    )\n                    await query.edit_message_text(\n                        f\"✅ دعوت‌نامه به {target_player['country_name']} ارسال شد!\"\n                    )\n                except:\n                    await query.edit_message_text(\"❌ خطا در ارسال دعوت‌نامه!\")\n\n            except ValueError:\n                await query.edit_message_text(\"❌ ID نامعتبر!\")\n\n        elif query.data == \"leave_alliance\":\n            result = self.leave_alliance(user_id)\n            await query.edit_message_text(result['message'])\n            if result['success']:\n                # Optionally, redirect to main menu or show a confirmation\n                pass # Or handle redirect to main menu\n\n        elif query.data == \"disband_alliance\":\n            alliance = self.db.get_player_alliance(user_id)\n            if not alliance or alliance['role'] != 'leader':\n                await query.edit_message_text(\"❌ شما رهبر اتحاد نیستید!\")\n                return\n\n            result = self.disband_alliance(alliance['id'])\n            await query.edit_message_text(result['message'])\n\n        elif query.data.startswith(\"accept_alliance_\"):\n            try:\n                alliance_id = int(query.data.split(\"_\")[-1])\n                result = self.respond_to_invitation(user_id, self.get_last_invitation_id(user_id, alliance_id), 'accept')\n                await query.edit_message_text(result['message'])\n            except Exception as e:\n                logger.error(f\"Error accepting alliance invitation: {e}\")\n                await query.edit_message_text(\"❌ خطا در پذیرش دعوت‌نامه!\")\n\n        elif query.data == \"reject_alliance\":\n            try:\n                result = self.respond_to_invitation(user_id, self.get_last_invitation_id(user_id, None), 'reject')\n                await query.edit_message_text(result['message'])\n            except Exception as e:\n                logger.error(f\"Error rejecting alliance invitation: {e}\")\n                await query.edit_message_text(\"❌ خطا در رد دعوت‌نامه!\")\n\n    def get_last_invitation_id(self, invitee_id, alliance_id=None):\n        \"\"\"Get the ID of the last pending invitation for a player.\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            query = \"SELECT id FROM alliance_invitations WHERE invitee_id = ? AND status = 'pending'\"\n            params = [invitee_id]\n            if alliance_id is not None:\n                query += \" AND alliance_id = ?\"\n                params.append(alliance_id)\n            query += \" ORDER BY created_at DESC LIMIT 1\"\n            cursor.execute(query, tuple(params))\n            result = cursor.fetchone()\n            return result[0] if result else None","size_bytes":22448},"combat.py":{"content":"import logging\nimport random\nfrom config import Config\nfrom datetime import datetime, timedelta\nimport asyncio\n\nlogger = logging.getLogger(__name__)\n\nclass CombatSystem:\n    def __init__(self, database):\n        self.db = database\n\n    def can_attack_country(self, attacker_id, defender_id):\n        \"\"\"Check if attacker can attack defender based on distance and available weapons\"\"\"\n        attacker = self.db.get_player(attacker_id)\n        defender = self.db.get_player(defender_id)\n\n        if not attacker or not defender:\n            return False, \"کشور یافت نشد\"\n\n        if attacker_id == defender_id:\n            return False, \"نمی‌توانید به خودتان حمله کنید\"\n\n        attacker_country = attacker['country_code']\n        defender_country = defender['country_code']\n        \n        # Get player weapons\n        weapons = self.db.get_player_weapons(attacker_id)\n        \n        # Check for range extenders\n        has_tanker = weapons.get('tanker_aircraft', 0) > 0\n        has_carrier = weapons.get('aircraft_carrier_transport', 0) > 0\n        \n        # Get available weapons for this distance (with range extension if applicable)\n        available_weapons = Config.get_available_weapons_for_attack(\n            attacker_country, defender_country, weapons, has_tanker, has_carrier\n        )\n        \n        if not available_weapons:\n            distance_type = Config.get_country_distance_type(attacker_country, defender_country)\n            if distance_type == 'neighbor':\n                return False, \"تسلیحات کافی برای حمله به همسایه ندارید\"\n            elif distance_type == 'regional':\n                if has_tanker or has_carrier:\n                    return False, \"حتی با سوخت‌رسان/ناوبر، جت‌های شما برد کافی ندارند\"\n                else:\n                    return False, \"برای حمله منطقه‌ای نیاز به جت یا موشک دارید\"\n            else:\n                if has_tanker or has_carrier:\n                    return False, \"حتی با سوخت‌رسان/ناوبر، فاصله خیلی زیاد است\"\n                else:\n                    return False, \"برای حمله بین‌قاره‌ای فقط موشک‌های دوربرد استفاده کنید\"\n        \n        range_bonus_text = \"\"\n        if has_carrier and has_tanker:\n            range_bonus_text = \" (با ناوبر و سوخت‌رسان)\"\n        elif has_carrier:\n            range_bonus_text = \" (با ناوبر)\"\n        elif has_tanker:\n            range_bonus_text = \" (با سوخت‌رسان)\"\n            \n        return True, f\"حمله مجاز - {len(available_weapons)} نوع سلاح در دسترس{range_bonus_text}\"\n\n    def are_neighbors(self, country1, country2):\n        \"\"\"Check if two countries are neighbors\"\"\"\n        neighbors = Config.COUNTRY_NEIGHBORS.get(country1, [])\n        return country2 in neighbors\n\n    def get_country_region(self, country_code):\n        \"\"\"Get the region of a country\"\"\"\n        for region, countries in Config.COUNTRY_DISTANCE_CATEGORY.items():\n            if country_code in countries:\n                return region\n        return 'unknown'\n\n    def calculate_travel_time(self, attacker_id, attacker_country, defender_country):\n        \"\"\"Calculate travel time for attack based on distance and equipment\"\"\"\n        base_time = 0\n\n        # Check if neighbors (10 minutes)\n        if self.are_neighbors(attacker_country, defender_country):\n            base_time = Config.COMBAT_TIMING['neighbor_time']\n        else:\n            # Check if same region (25 minutes)\n            attacker_region = self.get_country_region(attacker_country)\n            defender_region = self.get_country_region(defender_country)\n\n            if attacker_region == defender_region and attacker_region != 'unknown':\n                base_time = Config.COMBAT_TIMING['regional_time']\n            else:\n                # Different continents (40 minutes)\n                base_time = Config.COMBAT_TIMING['intercontinental_time']\n\n        # Calculate speed bonuses from equipment\n        weapons = self.db.get_player_weapons(attacker_id)\n        speed_reduction = 0\n\n        # Fast jets reduce travel time\n        fast_jets = ['f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s', 'fighter', 'jet']\n        for jet_type in fast_jets:\n            count = weapons.get(jet_type, 0)\n            speed_reduction += count * Config.COMBAT_TIMING['speed_bonus_per_jet']\n\n        # Transport equipment reduces travel time\n        transport_equipment = ['cargo_helicopter', 'cargo_plane', 'stealth_transport', 'logistics_drone']\n        for transport_type in transport_equipment:\n            count = weapons.get(transport_type, 0)\n            speed_reduction += count * Config.COMBAT_TIMING['speed_bonus_per_transport']\n\n        # Apply speed reduction (minimum 5 minutes)\n        final_time = max(5, base_time - speed_reduction)\n\n        return int(final_time)\n\n    def process_pending_attacks(self):\n        \"\"\"Process all pending attacks that are due\"\"\"\n        pending_attacks = self.db.get_pending_attacks_due()\n\n        results = []\n        for attack in pending_attacks:\n            try:\n                # Mark as executing\n                self.db.update_pending_attack_status(attack['id'], 'executing')\n\n                # Check if this is conquest mode\n                conquest_mode = bool(attack.get('conquest_mode', 0))\n\n                # Execute the attack\n                result = self.execute_attack(attack['attacker_id'], attack['defender_id'], conquest_mode)\n\n                # Mark as completed\n                self.db.update_pending_attack_status(attack['id'], 'completed')\n\n                results.append({\n                    'attack_id': attack['id'],\n                    'result': result,\n                    'attacker_id': attack['attacker_id'],\n                    'defender_id': attack['defender_id']\n                })\n\n            except Exception as e:\n                logger.error(f\"Error executing pending attack {attack['id']}: {e}\")\n                self.db.update_pending_attack_status(attack['id'], 'failed')\n\n        return results\n\n    def calculate_attack_power(self, user_id):\n        \"\"\"Calculate total attack power\"\"\"\n        weapons = self.db.get_player_weapons(user_id)\n        total_power = 0\n\n        # Only offensive weapons count for attack\n        for weapon_type, count in weapons.items():\n            if weapon_type != 'user_id' and count > 0:\n                # Check if weapon exists in config\n                if weapon_type in Config.WEAPONS:\n                    weapon_info = Config.WEAPONS[weapon_type]\n                    \n                    # Skip transport and pure defense weapons\n                    if weapon_info.get('category') in ['transport', 'defense']:\n                        continue\n                        \n                    # Skip specific defensive weapons\n                    if weapon_type in ['s500_defense', 'thaad_defense', 's400_defense',\n                                      'iron_dome', 'slq32_ew', 'phalanx_ciws']:\n                        continue\n                    \n                    weapon_power = weapon_info.get('power', 0)\n                    total_power += weapon_power * count\n\n        return total_power\n\n    def calculate_defense_power(self, user_id):\n        \"\"\"Calculate total defense power\"\"\"\n        weapons = self.db.get_player_weapons(user_id)\n        defense_power = 0\n\n        # Defense weapons\n        defense_weapons = ['s500_defense', 'thaad_defense', 's400_defense', 'iron_dome', 'slq32_ew', 'phalanx_ciws']\n\n        for weapon_type in defense_weapons:\n            count = weapons.get(weapon_type, 0)\n            if count > 0 and weapon_type in Config.WEAPONS:\n                weapon_power = Config.WEAPONS[weapon_type]['power']\n                defense_power += weapon_power * count\n\n        # Add some defensive value from other weapons\n        for weapon_type, count in weapons.items():\n            if weapon_type not in defense_weapons and weapon_type != 'user_id' and count > 0:\n                if weapon_type in Config.WEAPONS:\n                    weapon_power = Config.WEAPONS[weapon_type]['power']\n                    defense_power += weapon_power * count * 0.3  # 30% defensive value\n\n        return defense_power\n\n    def calculate_military_power(self, user_id):\n        \"\"\"Calculate total military power for display purposes\"\"\"\n        weapons = self.db.get_player_weapons(user_id)\n        total_power = 0\n\n        # Calculate total power from all weapons\n        for weapon_type, count in weapons.items():\n            if weapon_type != 'user_id' and count > 0:\n                if weapon_type in Config.WEAPONS:\n                    weapon_power = Config.WEAPONS[weapon_type]['power']\n                    total_power += weapon_power * count\n\n        return total_power\n\n    def schedule_delayed_attack(self, attacker_id, defender_id, attack_type=\"mixed\", conquest_mode=False):\n        \"\"\"Schedule a delayed attack based on travel time\"\"\"\n        can_attack, reason = self.can_attack_country(attacker_id, defender_id)\n        if not can_attack:\n            return {'success': False, 'message': reason}\n\n        # Check if player already has a pending attack\n        existing_attacks = self.db.get_player_pending_attacks(attacker_id)\n        if existing_attacks:\n            return {'success': False, 'message': 'شما قبلاً حمله‌ای در حال انجام دارید! باید منتظر تکمیل آن بمانید.'}\n\n        attacker = self.db.get_player(attacker_id)\n        defender = self.db.get_player(defender_id)\n\n        # Calculate travel time\n        travel_time = self.calculate_travel_time(attacker_id, attacker['country_code'], defender['country_code'])\n        attack_time = datetime.now() + timedelta(minutes=travel_time)\n\n        # Create pending attack\n        attack_data = {\n            'attacker_id': attacker_id,\n            'defender_id': defender_id,\n            'attack_type': attack_type,\n            'conquest_mode': conquest_mode,\n            'travel_time': travel_time,\n            'attack_time': attack_time.isoformat(),\n            'status': 'traveling'\n        }\n\n        attack_id = self.db.create_pending_attack(attack_data)\n\n        mode_text = \" (حالت فتح)\" if conquest_mode else \"\"\n        return {\n            'success': True,\n            'attack_id': attack_id,\n            'travel_time': travel_time,\n            'attack_time': attack_time,\n            'conquest_mode': conquest_mode,\n            'message': f'نیروهای شما به سمت {defender[\"country_name\"]} در حرکت هستند{mode_text}! زمان رسیدن: {travel_time} دقیقه'\n        }\n\n    def execute_attack(self, attacker_id, defender_id, conquest_mode=False):\n        \"\"\"Execute attack between countries\"\"\"\n        can_attack, reason = self.can_attack_country(attacker_id, defender_id)\n        if not can_attack:\n            return {'success': False, 'message': reason}\n\n        attacker = self.db.get_player(attacker_id)\n        defender = self.db.get_player(defender_id)\n\n        attack_power = self.calculate_attack_power(attacker_id)\n        defense_power = self.calculate_defense_power(defender_id)\n\n        if attack_power == 0:\n            return {'success': False, 'message': 'شما هیچ تسلیحاتی برای حمله ندارید!'}\n\n        # In conquest mode, defender's defense is doubled\n        effective_defense_power = defense_power * 2 if conquest_mode else defense_power\n\n        # Battle calculation with randomness\n        random_factor = random.uniform(0.8, 1.2)\n        effective_attack = attack_power * random_factor\n        effective_defense = effective_defense_power * random.uniform(0.9, 1.1)\n\n        damage = effective_attack - effective_defense\n\n        result = {\n            'attacker_country': attacker['country_name'],\n            'defender_country': defender['country_name'],\n            'attack_power': attack_power,\n            'defense_power': defense_power,\n            'effective_defense_power': effective_defense_power,\n            'damage': damage,\n            'attacker_losses': {},\n            'defender_losses': {},\n            'stolen_resources': {},\n            'conquest_mode': conquest_mode\n        }\n\n        if damage > 0:\n            # Attack successful\n            result['success'] = True\n            result['winner'] = attacker['country_name']\n\n            # Apply battle consequences\n            self._apply_successful_attack(attacker_id, defender_id, damage, result, conquest_mode)\n\n        else:\n            # Attack failed\n            result['success'] = False\n            result['winner'] = defender['country_name']\n\n            # Attacker suffers losses (doubled in failed attacks)\n            self._apply_failed_attack(attacker_id, abs(damage), result)\n\n        # Log the war\n        self._log_war(attacker_id, defender_id, result)\n\n        return result\n\n    def _apply_successful_attack(self, attacker_id, defender_id, damage, result, conquest_mode=False):\n        \"\"\"Apply consequences of successful attack\"\"\"\n        defender = self.db.get_player(defender_id)\n        defender_resources = self.db.get_player_resources(defender_id)\n        defender_weapons = self.db.get_player_weapons(defender_id)\n        defender_buildings = self.db.get_player_buildings(defender_id)\n        attacker_weapons = self.db.get_player_weapons(attacker_id)\n\n        # Calculate attack and defense power for percentage calculations\n        attack_power = self.calculate_attack_power(attacker_id)\n        defense_power = self.calculate_defense_power(defender_id)\n        \n        # In conquest mode, defender's defense is doubled\n        effective_defense_power = defense_power * 2 if conquest_mode else defense_power\n        \n        # Calculate power ratio for determining loot and destruction percentages\n        if effective_defense_power > 0:\n            power_ratio = attack_power / effective_defense_power\n        else:\n            power_ratio = float('inf')  # No defense means maximum damage\n\n        # Apply attacker weapon losses (based on defender's defense power)\n        result['attacker_losses'] = {}\n        attacker_loss_percentage = min(0.3, max(0.05, effective_defense_power / attack_power * 0.1))\n        \n        for weapon_type, count in attacker_weapons.items():\n            if weapon_type != 'user_id' and count > 0:\n                # Only count offensive weapons for losses\n                if weapon_type in Config.WEAPONS:\n                    weapon_config = Config.WEAPONS[weapon_type]\n                    if weapon_config.get('category') not in ['transport', 'defense']:\n                        losses = max(1, int(count * attacker_loss_percentage))\n                        losses = min(losses, count)\n                        \n                        if losses > 0:\n                            result['attacker_losses'][weapon_type] = losses\n                            new_count = count - losses\n                            self.db.update_weapon_count(attacker_id, weapon_type, new_count)\n\n        # Calculate resource loot percentage (10% to 75%)\n        if power_ratio <= 0.5:\n            loot_percentage = 0.10  # Weak attack vs strong defense\n        elif power_ratio <= 1.0:\n            loot_percentage = 0.15\n        elif power_ratio <= 1.5:\n            loot_percentage = 0.25\n        elif power_ratio <= 2.0:\n            loot_percentage = 0.35\n        elif power_ratio <= 3.0:\n            loot_percentage = 0.45\n        elif power_ratio <= 5.0:\n            loot_percentage = 0.55\n        elif power_ratio <= 10.0:\n            loot_percentage = 0.65\n        else:\n            # Very powerful attack (like 10+ Trident II nuclear missiles)\n            loot_percentage = 0.75\n\n        # Calculate building destruction/transfer percentage (5% to 60%)\n        if power_ratio <= 0.5:\n            building_percentage = 0.05\n        elif power_ratio <= 1.0:\n            building_percentage = 0.08\n        elif power_ratio <= 1.5:\n            building_percentage = 0.12\n        elif power_ratio <= 2.0:\n            building_percentage = 0.18\n        elif power_ratio <= 3.0:\n            building_percentage = 0.25\n        elif power_ratio <= 5.0:\n            building_percentage = 0.35\n        elif power_ratio <= 10.0:\n            building_percentage = 0.45\n        else:\n            # Very powerful attack\n            building_percentage = 0.60\n\n        # Apply soldier losses\n        soldier_losses = min(defender['soldiers'], int(damage * 100))\n        \n        # Enhanced weapon losses based on power ratio\n        weapon_loss_chance = min(0.4, 0.1 + (power_ratio * 0.05))\n        for weapon_type, count in defender_weapons.items():\n            if count > 0 and random.random() < weapon_loss_chance:\n                loss_percentage = min(0.3, 0.05 + (power_ratio * 0.03))\n                losses = min(count, max(1, int(count * loss_percentage)))\n                result['defender_losses'][weapon_type] = losses\n                # Remove weapons from defender\n                new_count = count - losses\n                self.db.update_weapon_count(defender_id, weapon_type, new_count)\n\n        # Steal resources based on calculated percentage\n        for resource_type, amount in defender_resources.items():\n            if resource_type != 'user_id' and amount > 0:\n                steal_amount = int(amount * loot_percentage)\n                if steal_amount > 0:\n                    result['stolen_resources'][resource_type] = steal_amount\n                    # Transfer resources\n                    self.db.add_resources(attacker_id, resource_type, steal_amount)\n                    self.db.consume_resources(defender_id, {resource_type: steal_amount})\n\n        # Handle buildings (mines and refineries)\n        result['destroyed_buildings'] = {}\n        result['conquered_buildings'] = {}\n        attacker_buildings = self.db.get_player_buildings(attacker_id)\n        \n        mine_buildings = ['iron_mine', 'copper_mine', 'oil_mine', 'gas_mine', \n                         'aluminum_mine', 'gold_mine', 'uranium_mine', 'lithium_mine',\n                         'coal_mine', 'silver_mine', 'nitro_mine', 'sulfur_mine', \n                         'titanium_mine', 'refinery']\n        \n        for building_type in mine_buildings:\n            building_count = defender_buildings.get(building_type, 0)\n            if building_count > 0:\n                affected_count = max(1, int(building_count * building_percentage))\n                affected_count = min(affected_count, building_count)\n                \n                if affected_count > 0:\n                    if conquest_mode:\n                        # In conquest mode, transfer buildings to attacker\n                        result['conquered_buildings'][building_type] = affected_count\n                        # Remove from defender\n                        new_defender_count = building_count - affected_count\n                        self.db.update_building_count(defender_id, building_type, new_defender_count)\n                        # Add to attacker\n                        current_attacker_count = attacker_buildings.get(building_type, 0)\n                        new_attacker_count = current_attacker_count + affected_count\n                        self.db.update_building_count(attacker_id, building_type, new_attacker_count)\n                    else:\n                        # Normal mode, destroy buildings\n                        result['destroyed_buildings'][building_type] = affected_count\n                        new_count = building_count - affected_count\n                        self.db.update_building_count(defender_id, building_type, new_count)\n\n        # Update defender soldiers\n        new_soldiers = max(0, defender['soldiers'] - soldier_losses)\n        self.db.update_player_soldiers(defender_id, new_soldiers)\n        result['defender_losses']['soldiers'] = soldier_losses\n        result['loot_percentage'] = loot_percentage * 100\n        result['building_percentage'] = building_percentage * 100\n        result['power_ratio'] = power_ratio\n        result['conquest_mode'] = conquest_mode\n\n    def _apply_failed_attack(self, attacker_id, damage, result):\n        \"\"\"Apply consequences of failed attack\"\"\"\n        attacker = self.db.get_player(attacker_id)\n        attacker_weapons = self.db.get_player_weapons(attacker_id)\n\n        # Attacker losses\n        soldier_losses = min(attacker['soldiers'], int(damage * 50))\n        weapon_loss_chance = 0.3  # Increased chance for failed attacks\n\n        # Double weapon losses for failed attacks\n        for weapon_type, count in attacker_weapons.items():\n            if weapon_type != 'user_id' and count > 0:\n                # Only count offensive weapons for losses\n                if weapon_type in Config.WEAPONS:\n                    weapon_config = Config.WEAPONS[weapon_type]\n                    if weapon_config.get('category') not in ['transport', 'defense']:\n                        if random.random() < weapon_loss_chance:\n                            losses = min(count, max(1, int(count * 0.1)))  # Double the normal loss rate\n                            result['attacker_losses'][weapon_type] = losses\n                            # Remove weapons from attacker\n                            new_count = count - losses\n                            self.db.update_weapon_count(attacker_id, weapon_type, new_count)\n\n        # Update attacker soldiers\n        new_soldiers = max(0, attacker['soldiers'] - soldier_losses)\n        self.db.update_player_soldiers(attacker_id, new_soldiers)\n        result['attacker_losses']['soldiers'] = soldier_losses\n\n    def _log_war(self, attacker_id, defender_id, result):\n        \"\"\"Log war in database\"\"\"\n        try:\n            with self.db.get_connection() as conn:\n                cursor = conn.cursor()\n                cursor.execute('''\n                    INSERT INTO wars (attacker_id, defender_id, attack_power, defense_power, result, damage_dealt)\n                    VALUES (?, ?, ?, ?, ?, ?)\n                ''', (\n                    attacker_id, defender_id,\n                    result['attack_power'], result['defense_power'],\n                    'success' if result['success'] else 'failed',\n                    result['damage']\n                ))\n                conn.commit()\n        except Exception as e:\n            logger.error(f\"Error logging war: {e}\")\n\n    def get_available_targets(self, attacker_id):\n        \"\"\"Get list of countries that can be attacked\"\"\"\n        all_players = self.db.get_all_players()\n        available_targets = []\n\n        for player in all_players:\n            if player['user_id'] != attacker_id:\n                can_attack, reason = self.can_attack_country(attacker_id, player['user_id'])\n                if can_attack:\n                    available_targets.append(player)\n\n        return available_targets\n\n    def format_battle_report(self, result):\n        \"\"\"Format battle report for display\"\"\"\n        attacker_flag = \"\"\n        defender_flag = \"\"\n\n        # Find flags\n        for code, name in Config.COUNTRIES.items():\n            if name == result['attacker_country']:\n                attacker_flag = Config.COUNTRY_FLAGS.get(code, '🏳')\n            elif name == result['defender_country']:\n                defender_flag = Config.COUNTRY_FLAGS.get(code, '🏳')\n\n        report = f\"\"\"⚔️ گزارش جنگ\n\n{attacker_flag} {result['attacker_country']} VS {defender_flag} {result['defender_country']}\n\n🔥 قدرت حمله: {result['attack_power']:,}\n🛡 قدرت دفاع: {result['defense_power']:,}\n💥 خسارت: {result['damage']:,.0f}\n\n🏆 برنده: {result['winner']}\n\"\"\"\n\n        if result['success']:\n            # Show conquest mode\n            if result.get('conquest_mode'):\n                report += f\"\\n🏴‍☠️ حالت فتح کشور\\n\"\n                report += f\"🛡 دفاع دوبرابر: {result.get('effective_defense_power', 0):,}\\n\"\n            \n            # Show power ratio and percentages\n            if 'power_ratio' in result:\n                if result['power_ratio'] == float('inf'):\n                    report += f\"\\n📊 نسبت قدرت: بی‌نهایت (بدون دفاع)\\n\"\n                else:\n                    report += f\"\\n📊 نسبت قدرت: {result['power_ratio']:.2f}:1\\n\"\n            \n            if 'loot_percentage' in result:\n                report += f\"💰 درصد غارت: {result['loot_percentage']:.0f}%\\n\"\n            \n            if 'building_percentage' in result:\n                if result.get('conquest_mode'):\n                    report += f\"🏭 درصد فتح معادن: {result['building_percentage']:.0f}%\\n\"\n                else:\n                    report += f\"💥 درصد تخریب: {result['building_percentage']:.0f}%\\n\"\n\n            if result['stolen_resources']:\n                report += \"\\n💰 منابع غارت شده:\\n\"\n                total_value = 0\n                for resource, amount in result['stolen_resources'].items():\n                    resource_name = Config.RESOURCES.get(resource, {}).get('name', resource)\n                    report += f\"• {resource_name}: {amount:,}\\n\"\n\n            if result.get('conquered_buildings'):\n                report += \"\\n🏭 معادن فتح شده:\\n\"\n                for building_type, count in result['conquered_buildings'].items():\n                    building_name = Config.BUILDINGS.get(building_type, {}).get('name', building_type)\n                    report += f\"• {building_name}: {count:,}\\n\"\n\n            if result.get('destroyed_buildings'):\n                report += \"\\n💥 ساختمان‌های تخریب شده:\\n\"\n                for building_type, count in result['destroyed_buildings'].items():\n                    building_name = Config.BUILDINGS.get(building_type, {}).get('name', building_type)\n                    report += f\"• {building_name}: {count:,}\\n\"\n\n            if result.get('attacker_losses'):\n                report += \"\\n💀 تلفات مهاجم (در نبرد):\\n\"\n                for loss_type, amount in result['attacker_losses'].items():\n                    if loss_type == 'soldiers':\n                        report += f\"• سربازان: {amount:,}\\n\"\n                    else:\n                        weapon_name = Config.WEAPONS.get(loss_type, {}).get('name', loss_type)\n                        report += f\"• {weapon_name}: {amount:,}\\n\"\n\n            if result['defender_losses']:\n                report += \"\\n💀 تلفات مدافع:\\n\"\n                for loss_type, amount in result['defender_losses'].items():\n                    if loss_type == 'soldiers':\n                        report += f\"• سربازان: {amount:,}\\n\"\n                    else:\n                        weapon_name = Config.WEAPONS.get(loss_type, {}).get('name', loss_type)\n                        report += f\"• {weapon_name}: {amount:,}\\n\"\n        else:\n            if result['attacker_losses']:\n                report += \"\\n💀 تلفات مهاجم:\\n\"\n                for loss_type, amount in result['attacker_losses'].items():\n                    if loss_type == 'soldiers':\n                        report += f\"• سربازان: {amount:,}\\n\"\n                    else:\n                        weapon_name = Config.WEAPONS.get(loss_type, {}).get('name', loss_type)\n                        report += f\"• {weapon_name}: {amount:,}\\n\"\n\n        return report","size_bytes":27595},"config.py":{"content":"\"\"\"\nDragonRP Game Configuration\nContains all game constants, and specifications\n\"\"\"\n\nclass Config:\n    \"\"\"Main configuration class for DragonRP game\"\"\"\n\n    # Admin configuration\n    ADMIN_CONFIG = {\n        'default_admin_ids': [123456789]  # Replace with actual admin user IDs\n    }\n\n    # Countries with flags\n    COUNTRIES = {\n        'AR': 'آرژانتین',\n        'IR': 'ایران',\n        'JP': 'ژاپن',\n        'RU': 'روسیه',\n        'EG': 'مصر',\n        'ES': 'اسپانیا',\n        'US': 'آمریکا',\n        'MX': 'مکزیک',\n        'FR': 'فرانسه',\n        'DE': 'آلمان',\n        'BE': 'بلژیک',\n        'CN': 'چین',\n        'KP': 'کره شمالی',\n        'TR': 'ترکیه',\n        'CA': 'کانادا',\n        'BR': 'برزیل',\n        'IT': 'ایتالیا',\n        'GB': 'انگلیس',\n        'SA': 'عربستان',\n        'PK': 'پاکستان',\n        'AF': 'افغانستان',\n        'IQ': 'عراق',\n        'IN': 'هند',\n        'AU': 'استرالیا'\n    }\n\n    # Country flags\n    COUNTRY_FLAGS = {\n        'AR': '🇦🇷', 'IR': '🇮🇷', 'JP': '🇯🇵', 'RU': '🇷🇺', 'EG': '🇪🇬',\n        'ES': '🇪🇸', 'US': '🇺🇸', 'MX': '🇲🇽', 'FR': '🇫🇷', 'DE': '🇩🇪',\n        'BE': '🇧🇪', 'CN': '🇨🇳', 'KP': '🇰🇵', 'TR': '🇹🇷', 'CA': '🇨🇦',\n        'BR': '🇧🇷', 'IT': '🇮🇹', 'GB': '🇬🇧', 'SA': '🇸🇦', 'PK': '🇵🇰',\n        'AF': '🇦🇫', 'IQ': '🇮🇶', 'IN': '🇮🇳', 'AU': '🇦🇺'\n    }\n\n    # Building costs and stats (Updated with provided prices)\n    BUILDINGS = {\n        'iron_mine': {'name': 'معدن آهن', 'cost': 90000, 'production': {'iron': 210}, 'income': 50000},\n        'copper_mine': {'name': 'معدن مس', 'cost': 100000, 'production': {'copper': 120}, 'income': 60000},\n        'oil_mine': {'name': 'معدن نفت', 'cost': 120000, 'production': {'oil': 600}, 'income': 60000},\n        'aluminum_mine': {'name': 'معدن آلومینیوم', 'cost': 150000, 'production': {'aluminum': 200}, 'income': 70000},\n        'gold_mine': {'name': 'معدن طلا', 'cost': 300000, 'production': {'gold': 18}, 'income': 210000},\n        'uranium_mine': {'name': 'معدن اورانیوم', 'cost': 1000000, 'production': {'uranium': 24}, 'income': 100000},\n        'lithium_mine': {'name': 'معدن لیتیوم', 'cost': 180000, 'production': {'lithium': 30}, 'income': 100000},\n        'coal_mine': {'name': 'معدن زغال‌سنگ', 'cost': 80000, 'production': {'coal': 1000}, 'income': 10000},\n        'nitro_mine': {'name': 'معدن نیتر', 'cost': 120000, 'production': {'nitro': 600}, 'income': 60000},\n        'sulfur_mine': {'name': 'معدن گوگرد', 'cost': 75000, 'production': {'sulfur': 900}, 'income': 30000},\n        'titanium_mine': {'name': 'معدن تیتانیوم', 'cost': 300000, 'production': {'titanium': 18}, 'income': 90000},\n        'weapon_factory': {'name': 'کارخانه اسلحه', 'cost': 15000, 'production': {}},\n        'refinery': {'name': 'پالایشگاه نفت', 'cost': 10000, 'production': {}},\n        'power_plant': {'name': 'نیروگاه برق', 'cost': 9000, 'production': {}},\n        'wheat_farm': {'name': 'مزرعه گندم', 'cost': 5000, 'population_bonus': 10000},\n        'military_base': {'name': 'پادگان آموزشی', 'cost': 5000, 'soldier_bonus': 5000},\n        'housing': {'name': 'مسکن', 'cost': 5000, 'capacity': 10000}\n    }\n\n    # Import weapons from modular system\n    try:\n        from weapons import ALL_WEAPONS, WEAPON_CATEGORIES\n        WEAPONS = ALL_WEAPONS\n        WEAPON_CATS = WEAPON_CATEGORIES\n    except ImportError:\n        # Fallback to basic weapons if modular system not available\n        WEAPONS = {\n            'rifle': {'name': 'تفنگ', 'cost': 1500, 'power': 5, 'range': 300, 'resources': {'iron': 5, 'copper': 2}, 'category': 'basic'},\n            'tank': {'name': 'تانک', 'cost': 850000, 'power': 1200, 'range': 500, 'resources': {'iron': 50, 'copper': 15, 'aluminum': 10}, 'category': 'basic'},\n            'helicopter': {'name': 'هلیکوپتر', 'cost': 2800000, 'power': 2400, 'range': 1500, 'resources': {'aluminum': 30, 'iron': 20, 'copper': 10}, 'category': 'air'},\n            'jet': {'name': 'جت جنگی', 'cost': 4500000, 'power': 3200, 'range': 2000, 'resources': {'aluminum': 40, 'iron': 25, 'copper': 15, 'titanium': 5}, 'category': 'air'},\n            'drone': {'name': 'پهپاد نظامی', 'cost': 180000, 'power': 800, 'range': 1000, 'resources': {'aluminum': 10, 'copper': 8, 'lithium': 5}, 'category': 'air'},\n\n            # Naval weapons\n            'warship': {'name': 'ناو جنگی', 'cost': 2500000, 'power': 2800, 'range': 1800, 'resources': {'iron': 100, 'aluminum': 50, 'copper': 30}, 'category': 'naval'},\n            'submarine': {'name': 'زیردریایی', 'cost': 4200000, 'power': 3200, 'range': 2000, 'resources': {'iron': 80, 'aluminum': 40, 'uranium': 5}, 'category': 'naval'},\n            'destroyer': {'name': 'ناوشکن', 'cost': 3800000, 'power': 3500, 'range': 2200, 'resources': {'iron': 90, 'aluminum': 45, 'copper': 25, 'titanium': 3}, 'category': 'naval'},\n            'aircraft_carrier': {'name': 'ناو هواپیمابر', 'cost': 12500000, 'power': 4000, 'range': 2500, 'resources': {'iron': 200, 'aluminum': 100, 'titanium': 20, 'uranium': 10}, 'category': 'naval'},\n            'aircraft_carrier_full': {'name': 'ناو هواپیمابر کامل', 'cost': 13500000, 'power': 4500, 'range': 2800, 'resources': {'iron': 220, 'aluminum': 110, 'titanium': 22, 'uranium': 11, 'copper': 90}, 'category': 'naval'},\n            'nuclear_submarine': {'name': 'زیردریایی هسته‌ای', 'cost': 5000000, 'power': 4200, 'range': 2600, 'resources': {'iron': 90, 'aluminum': 50, 'uranium': 8}, 'category': 'naval', 'coastal_attack': True},\n            'patrol_ship': {'name': 'ناوچه گشتی', 'cost': 1500000, 'power': 1500, 'range': 1200, 'resources': {'iron': 50, 'copper': 20}, 'category': 'naval'},\n            'patrol_boat': {'name': 'قایق گشتی', 'cost': 800000, 'power': 800, 'range': 800, 'resources': {'iron': 30, 'copper': 10}, 'category': 'naval'},\n            'amphibious_ship': {'name': 'کشتی دوزیست', 'cost': 2200000, 'power': 2200, 'range': 1600, 'resources': {'iron': 80, 'aluminum': 30, 'copper': 20}, 'category': 'naval'},\n\n\n            # Defense systems\n            'air_defense': {'name': 'پدافند هوایی', 'cost': 1800000, 'power': 3200, 'defense_type': 'air', 'resources': {'iron': 40, 'aluminum': 25, 'copper': 15}, 'category': 'defense'},\n            'missile_shield': {'name': 'سپر موشکی', 'cost': 2850000, 'power': 4500, 'defense_type': 'missile', 'resources': {'uranium': 3, 'iron': 20}, 'category': 'defense'},\n            'cyber_shield': {'name': 'سپر سایبری', 'cost': 1200000, 'power': 2800, 'defense_type': 'cyber', 'resources': {'lithium': 10, 'copper': 8}, 'category': 'defense'},\n\n            # Bombs\n            'simple_bomb': {'name': 'بمب ساده', 'cost': 2000, 'power': 60, 'range': 0, 'resources': {'nitro': 10, 'copper': 10, 'iron': 20, 'sulfur': 20}, 'category': 'bombs'},\n            'nuclear_bomb': {'name': 'بمب هسته‌ای ساده', 'cost': 60000, 'power': 2000, 'range': 0, 'resources': {'iron': 30, 'uranium': 6, 'sulfur': 36}, 'category': 'bombs'},\n\n            # Basic missiles\n            'simple_missile': {'name': 'موشک ساده', 'cost': 3000, 'power': 60, 'range': 500, 'resources': {'nitro': 10, 'copper': 10, 'iron': 20, 'sulfur': 20, 'coal': 10}, 'category': 'missiles'},\n            'ballistic_missile': {'name': 'موشک بالستیک ساده', 'cost': 9000, 'power': 80, 'range': 2000, 'resources': {'nitro': 15, 'copper': 15, 'iron': 40, 'sulfur': 40, 'coal': 20}, 'category': 'missiles'},\n            'nuclear_missile': {'name': 'موشک هسته‌ای ساده', 'cost': 9000, 'power': 2000, 'range': 2000, 'resources': {'nuclear_bomb': 1, 'ballistic_missile': 1, 'iron': 30, 'sulfur': 30}, 'category': 'missiles'},\n\n            # Special missiles\n            'trident2_conventional': {'name': 'Trident 2 غیر هسته‌ای', 'cost': 0, 'power': 1000, 'range': 5000, 'resources': {'simple_bomb': 13, 'ballistic_missile': 1, 'coal': 140}, 'category': 'special_missiles'},\n            'trident2_nuclear': {'name': 'Trident 2 هسته‌ای', 'cost': 190000, 'power': 30000, 'range': 5000, 'resources': {'nuclear_bomb': 13, 'ballistic_missile': 1, 'coal': 140}, 'category': 'special_missiles'},\n            'satan2_conventional': {'name': 'Satan2 غیر هسته‌ای', 'cost': 0, 'power': 940, 'range': 4500, 'resources': {'simple_bomb': 10, 'ballistic_missile': 1, 'coal': 140}, 'category': 'special_missiles'},\n            'satan2_nuclear': {'name': 'Satan2 هسته‌ای', 'cost': 160000, 'power': 21000, 'range': 4500, 'resources': {'nuclear_bomb': 10, 'ballistic_missile': 1, 'coal': 140}, 'category': 'special_missiles'},\n            'df41_nuclear': {'name': 'DF-41 هسته‌ای', 'cost': 130000, 'power': 18000, 'range': 4000, 'resources': {'nuclear_bomb': 8, 'ballistic_missile': 1, 'coal': 140}, 'category': 'special_missiles'},\n            'tomahawk_conventional': {'name': 'Tomahawk غیر هسته‌ای', 'cost': 12000, 'power': 700, 'range': 1500, 'resources': {'ballistic_missile': 1, 'simple_bomb': 1, 'iron': 10, 'sulfur': 120}, 'category': 'special_missiles'},\n            'tomahawk_nuclear': {'name': 'Tomahawk هسته‌ای', 'cost': 18000, 'power': 3000, 'range': 1500, 'resources': {'nuclear_bomb': 1, 'ballistic_missile': 1, 'iron': 30, 'coal': 20}, 'category': 'special_missiles'},\n            'kalibr_conventional': {'name': 'Kalibr غیر هسته‌ای', 'cost': 12000, 'power': 650, 'range': 1500, 'resources': {'ballistic_missile': 1, 'simple_bomb': 1, 'iron': 10, 'sulfur': 30}, 'category': 'special_missiles'},\n\n            # Advanced fighter jets\n            'f22': {'name': 'F-22', 'cost': 20000, 'power': 980, 'range': 3000, 'resources': {'titanium': 9, 'iron': 15, 'aluminum': 30, 'copper': 9, 'gold': 3}, 'category': 'advanced_jets'},\n            'strategic_bomber': {'name': 'بمب‌افکن استراتژیک', 'cost': 8500000, 'power': 4500, 'range': 4500, 'resources': {'aluminum': 60, 'titanium': 25, 'fuel': 50}, 'category': 'air'},\n            'icbm': {'name': 'موشک قاره‌پیما', 'cost': 25000000, 'power': 6000, 'range': 15000, 'resources': {'uranium': 30, 'titanium': 20, 'fuel': 40}, 'category': 'special_missiles'},\n            'f35': {'name': 'F-35', 'cost': 18000, 'power': 950, 'range': 2800, 'resources': {'titanium': 9, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2}, 'category': 'advanced_jets'},\n            'su57': {'name': 'Su-57', 'cost': 18000, 'power': 940, 'range': 2700, 'resources': {'titanium': 9, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2}, 'category': 'advanced_jets'},\n            'j20': {'name': 'J-20', 'cost': 15000, 'power': 920, 'range': 2500, 'resources': {'titanium': 9, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2}, 'category': 'advanced_jets'},\n            'f15ex': {'name': 'F-15EX', 'cost': 15000, 'power': 910, 'range': 2400, 'resources': {'titanium': 6, 'iron': 15, 'aluminum': 30, 'copper': 9, 'gold': 3}, 'category': 'advanced_jets'},\n            'su35s': {'name': 'Su-35S', 'cost': 15000, 'power': 900, 'range': 2300, 'resources': {'titanium': 6, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2}, 'category': 'advanced_jets'},\n\n            # Transport and Logistics Equipment\n            'armored_truck': {\n            'name': 'کامیون زرهی',\n            'cost': 90000,\n            'category': 'transport',\n            'power': 0,\n            'defense': 15,\n            'transport_capacity': 1000,\n            'security_bonus': 20,\n            'emoji': '🚚'\n        },\n        'cargo_helicopter': {\n            'name': 'هلیکوپتر باری',\n            'cost': 120000,\n            'category': 'transport',\n            'power': 0,\n            'defense': 25,\n            'transport_capacity': 2000,\n            'security_bonus': 35,\n            'emoji': '🚁'\n        },\n        'cargo_plane': {\n            'name': 'هواپیمای باری',\n            'cost': 240000,\n            'category': 'transport',\n            'power': 0,\n            'defense': 40,\n            'transport_capacity': 5000,\n            'security_bonus': 50,\n            'emoji': '✈️'\n        },\n        'escort_frigate': {\n            'name': 'ناوچه اسکورت',\n            'cost': 300000,\n            'category': 'transport',\n            'power': 30,\n            'defense': 60,\n            'transport_capacity': 3000,\n            'security_bonus': 45,\n            'emoji': '🚢'\n        },\n        'logistics_drone': {\n            'name': 'پهپاد لجستیک',\n            'cost': 120000,\n            'category': 'transport',\n            'power': 15,\n            'defense': 20,\n            'transport_capacity': 800,\n            'security_bonus': 25,\n            'emoji': '🚁'\n        },\n        'heavy_transport': {\n            'name': 'ترابری سنگین',\n            'cost': 210000,\n            'category': 'transport',\n            'power': 0,\n            'defense': 30,\n            'transport_capacity': 4000,\n            'security_bonus': 30,\n            'emoji': '🚛'\n        },\n        'supply_ship': {\n            'name': 'کشتی تدارکات',\n            'cost': 450000,\n            'category': 'transport',\n            'power': 25,\n            'defense': 50,\n            'transport_capacity': 8000,\n            'security_bonus': 40,\n            'emoji': '🚢'\n        },\n        'stealth_transport': {\n            'name': 'ترابری پنهان‌کار',\n            'cost': 240000,\n            'category': 'transport',\n            'power': 0,\n            'defense': 40,\n            'transport_capacity': 5000,\n            'security_bonus': 35,\n            'emoji': '✈️'\n        },\n        'tanker_aircraft': {\n            'name': 'هواپیمای سوخت‌رسان',\n            'cost': 5800000,\n            'power': 1000,\n            'range': 4000,\n            'speed': 450,\n            'armor': 300,\n            'resources': {'aluminum': 60, 'iron': 40, 'copper': 20, 'titanium': 8},\n            'category': 'transport',\n            'description': 'هواپیمای سوخت‌رسان که برد جت‌ها را افزایش می‌دهد',\n            'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n            'production_time': 250,\n            'emoji': '✈️'\n        },\n        'aircraft_carrier_transport': {\n            'name': 'ناو هواپیمابر (حمل‌ونقل)',\n            'cost': 12500000,\n            'power': 8000,\n            'range': 5000,\n            'speed': 30,\n            'armor': 6000,\n            'resources': {'iron': 200, 'aluminum': 100, 'titanium': 25, 'uranium': 15, 'copper': 80},\n            'category': 'transport',\n            'description': 'ناو هواپیمابر که جت‌ها را به مناطق دوردست می‌برد',\n            'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n            'production_time': 400,\n            'emoji': '🚢'\n        },\n        }\n\n    # Resources configuration\n    RESOURCES = {\n        'iron': {'name': 'آهن', 'emoji': '🔩', 'market_value': 10},\n        'copper': {'name': 'مس', 'emoji': '🥉', 'market_value': 15},\n        'oil': {'name': 'نفت خام', 'emoji': '🛢', 'market_value': 25},\n        'gas': {'name': 'گاز', 'emoji': '⛽', 'market_value': 20},\n        'aluminum': {'name': 'آلومینیوم', 'emoji': '🔗', 'market_value': 30},\n        'gold': {'name': 'طلا', 'emoji': '🏆', 'market_value': 50},\n        'uranium': {'name': 'اورانیوم', 'emoji': '☢️', 'market_value': 100},\n        'lithium': {'name': 'لیتیوم', 'emoji': '🔋', 'market_value': 40},\n        'coal': {'name': 'زغال‌سنگ', 'emoji': '⚫', 'market_value': 12},\n        'silver': {'name': 'نقره', 'emoji': '🥈', 'market_value': 45},\n        'fuel': {'name': 'سوخت', 'emoji': '⛽', 'market_value': 20},\n        'nitro': {'name': 'نیتر', 'emoji': '💥', 'market_value': 35},\n        'sulfur': {'name': 'گوگرد', 'emoji': '🌫', 'market_value': 18},\n        'titanium': {'name': 'تیتانیوم', 'emoji': '🛡', 'market_value': 80}\n    }\n\n    # Country neighbors for war system\n    COUNTRY_NEIGHBORS = {\n        'IR': ['TR', 'IQ', 'AF', 'PK'],\n        'TR': ['IR', 'SY', 'IQ', 'GR'],\n        'IQ': ['IR', 'TR', 'SY', 'SA', 'KW'],\n        'AF': ['IR', 'PK'],\n        'PK': ['IR', 'AF', 'IN'],\n        'SA': ['IQ', 'YE', 'AE', 'QA', 'KW'],\n        'AE': ['SA', 'QA'],\n        'QA': ['SA', 'AE'],\n        'KW': ['IQ', 'SA'],\n        'YE': ['SA'],\n        'SY': ['TR', 'IQ'],\n        'GR': ['TR'],\n        'IN': ['PK'],\n        'US': [],\n        'RU': [],\n        'CN': [],\n        'GB': [],\n        'FR': [],\n        'DE': [],\n        'JP': [],\n        'KR': [],\n        'IT': [],\n        'ES': [],\n        'CA': [],\n        'AU': [],\n        'BR': [],\n        'MX': [],\n        'AR': [],\n        'ZA': [],\n        'EG': [],\n        'NG': [],\n        'KE': [],\n        'MA': [],\n        'DZ': [],\n        'LY': [],\n        'TN': [],\n        'SD': [],\n        'ET': [],\n        'UG': [],\n        'TZ': [],\n        'MZ': [],\n        'MG': [],\n        'ZW': [],\n        'ZM': [],\n        'BW': [],\n        'NA': [],\n        'SZ': [],\n        'LS': [],\n        'MW': [],\n        'RW': [],\n        'BI': [],\n        'DJ': [],\n        'SO': [],\n        'ER': [],\n        'SS': [],\n        'TD': [],\n        'CF': [],\n        'CM': [],\n        'GQ': [],\n        'GA': [],\n        'CG': [],\n        'CD': [],\n        'AO': [],\n        'ST': [],\n        'CV': [],\n        'GW': [],\n        'GN': [],\n        'SL': [],\n        'LR': [],\n        'CI': [],\n        'GH': [],\n        'TG': [],\n        'BJ': [],\n        'NE': [],\n        'BF': [],\n        'ML': [],\n        'SN': [],\n        'GM': [],\n        'GY': [],\n        'SR': [],\n        'GF': [],\n        'VE': [],\n        'CO': [],\n        'EC': [],\n        'PE': [],\n        'BO': [],\n        'PY': [],\n        'UY': [],\n        'CL': [],\n        'FK': []\n    }\n\n    # Coastal countries that can be attacked by nuclear submarines\n    COASTAL_COUNTRIES = {\n        'IR', 'TR', 'SA', 'AE', 'QA', 'KW', 'YE', 'SY', 'GR', 'US', 'RU', 'CN', 'GB', 'FR', 'DE', 'JP', 'KR', 'IT', 'ES', 'CA', 'AU', 'BR', 'MX', 'AR', 'ZA', 'EG', 'NG', 'MA', 'DZ', 'LY', 'TN', 'SO', 'ER', 'DJ', 'GQ', 'GA', 'CG', 'AO', 'GW', 'GN', 'SL', 'LR', 'CI', 'GH', 'TG', 'BJ', 'SN', 'GM', 'GY', 'SR', 'VE', 'CO', 'EC', 'PE', 'UY', 'CL', 'FK'\n    }\n\n    # Admin configuration\n    ADMIN_CONFIG = {\n        'default_admin_ids': [123456789],  # Replace with actual admin user IDs\n        'max_logs_display': 50,\n        'reset_confirmation_required': True\n    }\n\n    # Combat configuration\n    COMBAT_CONFIG = {\n        'neighbor_attack_always_allowed': True,\n        'long_range_threshold_km': 3000,\n        'base_defense_multiplier': 0.3,\n        'weapon_loss_chance': 0.2\n    }\n\n    # Distance-based combat timing (in minutes)\n    COMBAT_TIMING = {\n        'neighbor_time': 10,        # همسایه - 10 دقیقه\n        'regional_time': 25,        # منطقه‌ای - 25 دقیقه\n        'intercontinental_time': 40, # بین قاره‌ای - 40 دقیقه\n        'speed_bonus_per_jet': 0.5,  # کاهش زمان برای هر جت\n        'speed_bonus_per_transport': 0.3  # کاهش زمان برای تجهیزات حمل‌ونقل\n    }\n\n    # Country distance categories\n    COUNTRY_DISTANCE_CATEGORY = {\n        # Regional groups (25 minutes base travel time)\n        'middle_east': ['IR', 'TR', 'IQ', 'SA', 'EG', 'AF', 'PK'],\n        'north_america': ['US', 'CA', 'MX'],\n        'europe': ['FR', 'DE', 'ES', 'BE', 'IT', 'GB'],\n        'east_asia': ['CN', 'JP', 'KP'],\n        'south_america': ['AR', 'BR'],\n        'oceania': ['AU'],\n        'eurasia': ['RU'],\n        'south_asia': ['IN']\n    }\n\n    # Weapon range categories for distance-based combat\n    WEAPON_RANGES = {\n        'neighbor_only': ['rifle', 'tank', 'drone', 'air_defense', 'missile_shield', 'cyber_shield'],  # فقط همسایه\n        'regional': ['fighter_jet', 'jet', 'f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s', 'warship', 'submarine', 'destroyer'],  # تا منطقه‌ای\n        'intercontinental': ['missile', 'ballistic_missile', 'nuclear_missile', 'simple_missile', 'trident2_conventional', 'trident2_nuclear', 'satan2_conventional', 'satan2_nuclear', 'df41_nuclear', 'tomahawk_conventional', 'tomahawk_nuclear', 'kalibr_conventional']  # بین قاره‌ای\n    }\n\n    @classmethod\n    def get_country_distance_type(cls, country1, country2):\n        \"\"\"Get distance type between two countries\"\"\"\n        if cls.are_countries_neighbors(country1, country2):\n            return 'neighbor'\n\n        # Find regions for both countries\n        region1 = None\n        region2 = None\n\n        for region, countries in cls.COUNTRY_DISTANCE_CATEGORY.items():\n            if country1 in countries:\n                region1 = region\n            if country2 in countries:\n                region2 = region\n\n        if region1 == region2:\n            return 'regional'\n        else:\n            return 'intercontinental'\n\n    @classmethod\n    def are_countries_neighbors(cls, country1, country2):\n        \"\"\"Check if two countries are neighbors\"\"\"\n        return country2 in cls.COUNTRY_NEIGHBORS.get(country1, [])\n\n    @classmethod\n    def can_attack_with_weapon(cls, weapon_type, country1, country2):\n        \"\"\"Check if a weapon can attack from country1 to country2\"\"\"\n        distance_type = cls.get_country_distance_type(country1, country2)\n\n        # همسایه - همه سلاح‌ها\n        if distance_type == 'neighbor':\n            return True\n\n        # منطقه‌ای - فقط جت‌ها و موشک‌ها\n        elif distance_type == 'regional':\n            return weapon_type in cls.WEAPON_RANGES['regional'] + cls.WEAPON_RANGES['intercontinental']\n\n        # بین قاره‌ای - فقط موشک‌های دوربرد\n        elif distance_type == 'intercontinental':\n            return weapon_type in cls.WEAPON_RANGES['intercontinental']\n\n        return False\n\n    @classmethod\n    def get_available_weapons_for_attack(cls, attacker_country, defender_country, player_weapons, has_tanker=False, has_carrier=False):\n        \"\"\"Get list of weapons that can attack based on distance and range\"\"\"\n        distance_type = Config.get_country_distance_type(attacker_country, defender_country)\n        available_weapons = []\n\n        for weapon_type, count in player_weapons.items():\n            if weapon_type == 'user_id' or count <= 0:\n                continue\n\n            weapon_config = Config.WEAPONS.get(weapon_type) # Changed from WEAPON_CAPABILITIES to WEAPONS\n            if not weapon_config:\n                continue\n\n            # Special case: Nuclear submarines can attack any coastal country\n            if weapon_type == 'nuclear_submarine' and weapon_config.get('coastal_attack'):\n                if defender_country in Config.COASTAL_COUNTRIES:\n                    available_weapons.append(weapon_type)\n                    continue\n\n            # Check weapon range vs distance\n            if distance_type == 'neighbor':\n                # All weapons can attack neighbors\n                available_weapons.append(weapon_type)\n            elif distance_type == 'regional':\n                # Check if weapon has enough range for regional attack\n                weapon_range = weapon_config.get('range', 0)\n\n                # Apply range bonus from transport equipment\n                if has_carrier and weapon_type in ['fighter_jet', 'jet', 'f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s']:\n                    weapon_range += 500  # Carrier extends jet range\n                if has_tanker and weapon_type in ['fighter_jet', 'jet', 'f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s']:\n                    weapon_range += 300  # Tanker extends jet range\n\n                if weapon_range >= 1500:  # Regional range requirement\n                    available_weapons.append(weapon_type)\n            else:  # intercontinental\n                # Only long-range weapons\n                weapon_range = weapon_config.get('range', 0)\n\n                # Apply range bonus\n                if has_carrier and weapon_type in ['fighter_jet', 'jet', 'f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s']:\n                    weapon_range += 500\n                if has_tanker and weapon_type in ['fighter_jet', 'jet', 'f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s']:\n                    weapon_range += 300\n\n                if weapon_range >= 3000:  # Intercontinental range requirement\n                    available_weapons.append(weapon_type)\n\n        return available_weapons\n\n    # Bot configuration\n    BOT_CONFIG = {\n        'news_channel': '@Dragon0RP',\n        'income_cycle_hours': 6\n    }","size_bytes":25200},"convoy.py":{"content":"import logging\nfrom telegram import InlineKeyboardButton, InlineKeyboardMarkup\nfrom config import Config\nimport json\nfrom datetime import datetime, timedelta\nimport random\n\nlogger = logging.getLogger(__name__)\n\nclass ConvoySystem:\n    def __init__(self, database):\n        self.db = database\n\n    def calculate_convoy_security(self, sender_id, resources_value):\n        \"\"\"Calculate convoy security based on sender's military power and transport equipment\"\"\"\n        weapons = self.db.get_player_weapons(sender_id)\n\n        # Calculate escort power from military weapons\n        escort_power = 0\n        escort_power += weapons.get('tank', 0) * 15\n        escort_power += weapons.get('fighter_jet', 0) * 25\n        escort_power += weapons.get('warship', 0) * 40\n        escort_power += weapons.get('drone', 0) * 20\n\n        # Calculate transport equipment bonus\n        transport_bonus = 0\n        transport_bonus += weapons.get('armored_truck', 0) * 25        # Direct convoy security\n        transport_bonus += weapons.get('cargo_helicopter', 0) * 40\n        transport_bonus += weapons.get('cargo_plane', 0) * 60\n        transport_bonus += weapons.get('escort_frigate', 0) * 80\n        transport_bonus += weapons.get('logistics_drone', 0) * 30\n        transport_bonus += weapons.get('heavy_transport', 0) * 45\n        transport_bonus += weapons.get('supply_ship', 0) * 70\n        transport_bonus += weapons.get('stealth_transport', 0) * 90\n\n        # Base security from resources value\n        base_security = min(resources_value / 1000, 100)\n\n        # Total security (0-95%)\n        total_security = min(base_security + (escort_power / 10) + (transport_bonus / 10), 95)\n\n        return int(total_security)\n\n    def can_intercept_convoy(self, interceptor_id, convoy_security, convoy_id=None):\n        \"\"\"Check if player can intercept convoy\"\"\"\n        # If convoy_id is provided, check if user is sender or receiver\n        if convoy_id:\n            convoy = self.db.get_convoy(convoy_id)\n            if convoy and (convoy['sender_id'] == interceptor_id or convoy['receiver_id'] == interceptor_id):\n                return False  # Cannot intercept own convoy\n\n        weapons = self.db.get_player_weapons(interceptor_id)\n\n        # Calculate interception power\n        intercept_power = 0\n        intercept_power += weapons.get('fighter_jet', 0) * 30\n        intercept_power += weapons.get('drone', 0) * 25\n        intercept_power += weapons.get('simple_missile', 0) * 50\n        intercept_power += weapons.get('warship', 0) * 35\n\n        # Advanced jets are better at interception\n        intercept_power += weapons.get('f22', 0) * 60\n        intercept_power += weapons.get('f35', 0) * 55\n        intercept_power += weapons.get('su57', 0) * 58\n        intercept_power += weapons.get('j20', 0) * 52\n        intercept_power += weapons.get('f15ex', 0) * 50\n        intercept_power += weapons.get('su35s', 0) * 48\n\n        # Need minimum power to attempt interception\n        min_power_needed = convoy_security * 2\n\n        return intercept_power >= min_power_needed\n\n    def attempt_convoy_interception(self, interceptor_id, convoy_id, action_type):\n        \"\"\"Attempt to intercept convoy (stop or steal)\"\"\"\n        convoy = self.db.get_convoy(convoy_id)\n        if not convoy or convoy['status'] != 'in_transit':\n            return {'success': False, 'message': 'محموله یافت نشد یا قبلاً رسیده!'}\n\n        # Check if convoy is still in transit\n        arrival_time = datetime.fromisoformat(convoy['arrival_time'])\n        if datetime.now() >= arrival_time:\n            return {'success': False, 'message': 'محموله قبلاً به مقصد رسیده!'}\n\n        convoy_security = convoy['security_level']\n\n        if not self.can_intercept_convoy(interceptor_id, convoy_security):\n            return {'success': False, 'message': 'قدرت نظامی شما برای رهگیری این محموله کافی نیست!'}\n\n        # Calculate success chance\n        interceptor_weapons = self.db.get_player_weapons(interceptor_id)\n        intercept_power = (\n            interceptor_weapons.get('fighter_jet', 0) * 30 +\n            interceptor_weapons.get('drone', 0) * 25 +\n            interceptor_weapons.get('simple_missile', 0) * 50 +\n            interceptor_weapons.get('warship', 0) * 35\n        )\n\n        success_chance = min((intercept_power / (convoy_security * 2)) * 60, 85)\n\n        # Random success\n        if random.randint(1, 100) <= success_chance:\n            if action_type == 'stop':\n                # Stop convoy - return to sender\n                self.db.update_convoy_status(convoy_id, 'stopped')\n                return {\n                    'success': True,\n                    'message': f'محموله با موفقیت متوقف شد! منابع به فرستنده بازگردانده می‌شود.',\n                    'action': 'stopped'\n                }\n            else:  # steal\n                # Steal convoy resources\n                resources = json.loads(convoy['resources'])\n                self.db.update_convoy_status(convoy['id'], 'stolen')\n\n                # Add resources to interceptor\n                for resource, amount in resources.items():\n                    if resource == 'money':\n                        player = self.db.get_player(interceptor_id)\n                        self.db.update_player_money(interceptor_id, player['money'] + amount)\n                    else:\n                        self.db.add_resources(interceptor_id, resource, amount)\n\n                return {\n                    'success': True,\n                    'message': f'محموله با موفقیت سرقت شد! منابع به شما اضافه شد.',\n                    'action': 'stolen',\n                    'stolen_resources': resources\n                }\n        else:\n            # Failed interception - lose some weapons\n            self.lose_weapons_in_failed_interception(interceptor_id)\n            return {\n                'success': False,\n                'message': f'رهگیری ناموفق! بخشی از تجهیزات شما در عملیات از دست رفت.',\n                'action': 'failed'\n            }\n\n    def lose_weapons_in_failed_interception(self, player_id):\n        \"\"\"Player loses some weapons in failed interception\"\"\"\n        weapons = self.db.get_player_weapons(player_id)\n\n        # Lose 10-30% of attacking weapons\n        loss_weapons = ['fighter_jet', 'drone', 'simple_missile']\n        for weapon in loss_weapons:\n            current = weapons.get(weapon, 0)\n            if current > 0:\n                loss = max(1, int(current * random.uniform(0.1, 0.3)))\n                new_count = max(0, current - loss)\n                self.db.update_weapon_count(player_id, weapon, new_count)\n\n    def release_stopped_convoy(self, player_id, convoy_id):\n        \"\"\"Release a stopped convoy\"\"\"\n        convoy = self.db.get_convoy(convoy_id)\n\n        if not convoy or convoy['status'] != 'stopped':\n            return {'success': False, 'message': 'محموله متوقف شده‌ای یافت نشد!'}\n\n        if convoy['sender_id'] != player_id:\n            return {'success': False, 'message': 'شما مالک این محموله نیستید!'}\n\n        # Resume convoy with new arrival time\n        new_arrival = datetime.now() + timedelta(hours=2)\n        self.db.update_convoy_arrival(convoy_id, new_arrival.isoformat(), 'in_transit')\n\n        return {\n            'success': True,\n            'message': 'محموله آزاد شد و مجدداً در حال حرکت است!'\n        }\n\n    def get_active_convoys(self):\n        \"\"\"Get all active convoys that are in transit\"\"\"\n        return self.db.get_active_convoys()\n\n    def create_convoy_with_transport(self, sender_id, receiver_id, resources, transport_type, transfer_type=\"resources\"):\n        \"\"\"Create a new convoy with specific transport equipment\"\"\"\n        # Validate sender has enough resources before creating convoy\n        if not self.validate_sender_resources(sender_id, resources):\n            return {'success': False, 'message': 'منابع کافی برای ارسال ندارید!'}\n\n        # Check if selected transport is available\n        if transport_type != 'none':\n            weapons = self.db.get_player_weapons(sender_id)\n            available_count = weapons.get(transport_type, 0)\n            if available_count < 1:\n                return {\n                    'success': False,\n                    'message': f'وسیله حمل‌ونقل {transport_type} در دسترس نیست! شما {available_count} عدد دارید.'\n                }\n            # Don't consume the transport vehicle - it can be reused\n\n        # Consume resources from sender\n        if not self.consume_sender_resources(sender_id, resources):\n            return {'success': False, 'message': 'خطا در کسر منابع!'}\n\n        # Calculate travel time based on specific transport\n        travel_time = self.calculate_convoy_travel_time_with_transport(sender_id, transport_type)\n\n        # Calculate convoy security with transport bonus\n        total_value = sum(amount * Config.RESOURCES.get(res_type, {}).get('market_value', 10)\n                         for res_type, amount in resources.items() if res_type != 'money')\n        if 'money' in resources:\n            total_value += resources['money']\n\n        security_level = self.calculate_convoy_security_with_transport(sender_id, total_value, transport_type)\n\n        # Create convoy in database\n        convoy_id = self.db.create_convoy(sender_id, receiver_id, resources, travel_time, security_level)\n\n        return {\n            'success': True,\n            'convoy_id': convoy_id,\n            'travel_time': travel_time,\n            'security_level': security_level,\n            'estimated_arrival': datetime.now() + timedelta(minutes=travel_time)\n        }\n\n    def calculate_convoy_travel_time_with_transport(self, sender_id, transport_type):\n        \"\"\"Calculate convoy travel time with specific transport\"\"\"\n        # Check if player has the transport equipment\n        if transport_type != 'none':\n            weapons = self.db.get_player_weapons(sender_id)\n            if weapons.get(transport_type, 0) < 1:\n                return 30  # Default time if transport not available\n\n        transport_times = {\n            'none': 30,\n            'armored_truck': 25,\n            'cargo_helicopter': 20,\n            'cargo_plane': 15,\n            'logistics_drone': 18,\n            'heavy_transport': 22,\n            'supply_ship': 35,\n            'stealth_transport': 12\n        }\n\n        return transport_times.get(transport_type, 30)\n\n    def calculate_convoy_security_with_transport(self, sender_id, resources_value, transport_type):\n        \"\"\"Calculate convoy security with specific transport\"\"\"\n        weapons = self.db.get_player_weapons(sender_id)\n\n        # Calculate escort power from military weapons\n        escort_power = 0\n        escort_power += weapons.get('tank', 0) * 15\n        escort_power += weapons.get('fighter_jet', 0) * 25\n        escort_power += weapons.get('warship', 0) * 40\n        escort_power += weapons.get('drone', 0) * 20\n\n        # Transport specific bonuses\n        transport_bonuses = {\n            'none': 0,\n            'armored_truck': 70,\n            'cargo_helicopter': 75,\n            'cargo_plane': 85,\n            'logistics_drone': 80,\n            'heavy_transport': 75,\n            'supply_ship': 80,\n            'stealth_transport': 95\n        }\n\n        transport_bonus = transport_bonuses.get(transport_type, 50)\n\n        # Base security from resources value\n        base_security = min(resources_value / 1000, 30)\n\n        # Total security\n        total_security = min(base_security + (escort_power / 10) + (transport_bonus / 2), 95)\n\n        return int(total_security)\n\n    def create_convoy(self, sender_id, receiver_id, resources, transfer_type=\"resources\"):\n        \"\"\"Create a new convoy with calculated travel time\"\"\"\n        # Default to no specific transport for backwards compatibility\n        return self.create_convoy_with_transport(sender_id, receiver_id, resources, 'none', transfer_type)\n\n    def calculate_convoy_travel_time(self, sender_id):\n        \"\"\"Calculate convoy travel time based on transport equipment (10-30 minutes)\"\"\"\n        weapons = self.db.get_player_weapons(sender_id)\n\n        # Base travel time: 30 minutes\n        base_time = 30\n\n        # Calculate speed reduction from transport equipment\n        speed_reduction = 0\n        speed_reduction += weapons.get('armored_truck', 0) * 1      # 1 min reduction per truck\n        speed_reduction += weapons.get('cargo_helicopter', 0) * 2   # 2 min reduction per heli\n        speed_reduction += weapons.get('cargo_plane', 0) * 3        # 3 min reduction per plane\n        speed_reduction += weapons.get('escort_frigate', 0) * 2.5   # 2.5 min reduction per frigate\n        speed_reduction += weapons.get('logistics_drone', 0) * 1.5  # 1.5 min reduction per drone\n        speed_reduction += weapons.get('heavy_transport', 0) * 2    # 2 min reduction per heavy transport\n        speed_reduction += weapons.get('supply_ship', 0) * 2.5      # 2.5 min reduction per ship\n        speed_reduction += weapons.get('stealth_transport', 0) * 4  # 4 min reduction per stealth transport\n\n        # Minimum time is 10 minutes, maximum is 30 minutes\n        final_time = max(10, base_time - int(speed_reduction))\n\n        return final_time\n\n    def create_convoy_news_keyboard(self, convoy_id, security_level, bot_username):\n        \"\"\"Create keyboard for convoy news with interception options\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"🛑 توقف محموله\", url=f\"https://t.me/{bot_username}?start=convoy_stop_{convoy_id}\"),\n                InlineKeyboardButton(\"💰 سرقت محموله\", url=f\"https://t.me/{bot_username}?start=convoy_steal_{convoy_id}\")\n            ],\n            [\n                InlineKeyboardButton(\"🛡 اسکورت محموله\", url=f\"https://t.me/{bot_username}?start=convoy_escort_{convoy_id}\")\n            ],\n            [\n                InlineKeyboardButton(f\"🛡 امنیت: {security_level}%\", callback_data=\"convoy_info\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def provide_convoy_escort(self, escorter_id, convoy_id, escort_weapons):\n        \"\"\"Provide escort for convoy to increase security\"\"\"\n        convoy = self.db.get_convoy(convoy_id)\n        if not convoy or convoy['status'] != 'in_transit':\n            return {'success': False, 'message': 'محموله یافت نشد یا قبلاً رسیده!'}\n\n        # Check if convoy is still in transit\n        arrival_time = datetime.fromisoformat(convoy['arrival_time'])\n        if datetime.now() >= arrival_time:\n            return {'success': False, 'message': 'محموله قبلاً به مقصد رسیده!'}\n\n        # Don't allow sender/receiver to escort their own convoy\n        if convoy['sender_id'] == escorter_id or convoy['receiver_id'] == escorter_id:\n            return {'success': False, 'message': 'نمی‌توانید محموله خودتان را اسکورت کنید!'}\n\n        # Calculate escort bonus\n        escort_bonus = 0\n        escorter_weapons = self.db.get_player_weapons(escorter_id)\n\n        for weapon, count in escorter_weapons.items():\n            available = escorter_weapons.get(weapon, 0)\n            if available >= count:\n                if weapon == 'fighter_jet':\n                    escort_bonus += count * 20\n                elif weapon == 'tank':\n                    escort_bonus += count * 15\n                elif weapon == 'warship':\n                    escort_bonus += count * 30\n                elif weapon == 'drone':\n                    escort_bonus += count * 18\n            else:\n                return {'success': False, 'message': f'تعداد کافی {weapon} ندارید!'}\n\n        # Apply escort bonus to convoy security\n        new_security = min(convoy['security_level'] + escort_bonus, 99)\n        self.db.update_convoy_security(convoy_id, new_security)\n\n        return {\n            'success': True,\n            'message': f'اسکورت با موفقیت انجام شد! امنیت محموله از {convoy[\"security_level\"]}% به {new_security}% افزایش یافت.',\n            'old_security': convoy['security_level'],\n            'new_security': new_security,\n            'escort_bonus': escort_bonus\n        }\n\n    def validate_sender_resources(self, sender_id, resources):\n        \"\"\"Validate that sender has enough resources\"\"\"\n        current_resources = self.db.get_player_resources(sender_id)\n        player = self.db.get_player(sender_id)\n\n        for resource, amount in resources.items():\n            if resource == 'money':\n                if player['money'] < amount:\n                    return False\n            else:\n                if current_resources.get(resource, 0) < amount:\n                    return False\n        return True\n\n    def consume_sender_resources(self, sender_id, resources):\n        \"\"\"Remove resources from sender when creating convoy\"\"\"\n        try:\n            player = self.db.get_player(sender_id)\n\n            # Handle money separately\n            if 'money' in resources:\n                money_amount = resources['money']\n                new_money = player['money'] - money_amount\n                self.db.update_player_money(sender_id, new_money)\n\n            # Handle other resources\n            other_resources = {k: v for k, v in resources.items() if k != 'money'}\n            if other_resources:\n                return self.db.consume_resources(sender_id, other_resources)\n\n            return True\n        except Exception as e:\n            logger.error(f\"Error consuming sender resources: {e}\")\n            return False\n\n    def process_convoy_arrivals(self):\n        \"\"\"Process all convoys that have arrived at their destination\"\"\"\n        arrived_convoys = self.db.get_arrived_convoys()\n        results = []\n\n        for convoy in arrived_convoys:\n            try:\n                result = self.deliver_convoy(convoy)\n                results.append(result)\n            except Exception as e:\n                logger.error(f\"Error processing convoy {convoy['id']}: {e}\")\n                # Mark convoy as failed\n                self.db.update_convoy_status(convoy['id'], 'failed')\n\n        return results\n\n    def deliver_convoy(self, convoy):\n        \"\"\"Deliver convoy resources to receiver\"\"\"\n        convoy_id = convoy['id']\n        receiver_id = convoy['receiver_id']\n        sender_id = convoy['sender_id']\n        resources = json.loads(convoy['resources'])\n        security_level = convoy['security_level']\n\n        # Calculate delivery success chance based on security\n        success_chance = min(security_level + 10, 95)\n\n        if random.randint(1, 100) <= success_chance:\n            # Successful delivery\n            try:\n                # Add resources to receiver\n                player = self.db.get_player(receiver_id)\n\n                # Handle money separately\n                if 'money' in resources:\n                    money_amount = resources['money']\n                    new_money = player['money'] + money_amount\n                    self.db.update_player_money(receiver_id, new_money)\n\n                # Handle other resources\n                for resource, amount in resources.items():\n                    if resource != 'money':\n                        self.db.add_resources(receiver_id, resource, amount)\n\n                # Mark convoy as delivered\n                self.db.update_convoy_status(convoy_id, 'delivered')\n\n                return {\n                    'convoy_id': convoy_id,\n                    'success': True,\n                    'message': 'محموله با موفقیت تحویل شد!',\n                    'resources': resources\n                }\n\n            except Exception as e:\n                logger.error(f\"Error delivering convoy {convoy_id}: {e}\")\n                self.db.update_convoy_status(convoy_id, 'failed')\n                return {\n                    'convoy_id': convoy_id,\n                    'success': False,\n                    'message': 'خطا در تحویل محموله!'\n                }\n        else:\n            # Failed delivery - convoy intercepted/lost\n            self.db.update_convoy_status(convoy_id, 'lost')\n            return {\n                'convoy_id': convoy_id,\n                'success': False,\n                'message': 'محموله در راه دزدیده شد!',\n                'resources_lost': resources\n            }","size_bytes":20695},"countries.py":{"content":"from config import Config\n\nclass CountryManager:\n    def __init__(self, database):\n        self.db = database\n    \n    def get_available_countries(self):\n        \"\"\"Get list of available (untaken) countries\"\"\"\n        taken_countries = self.get_taken_countries()\n        available = {}\n        \n        for code, name in Config.COUNTRIES.items():\n            if code not in taken_countries:\n                available[code] = name\n        \n        return available\n    \n    def get_taken_countries(self):\n        \"\"\"Get list of taken country codes\"\"\"\n        players = self.db.get_all_players()\n        return [player['country_code'] for player in players]\n    \n    def get_country_info(self, country_code):\n        \"\"\"Get detailed country information\"\"\"\n        if country_code not in Config.COUNTRIES:\n            return None\n        \n        return {\n            'code': country_code,\n            'name': Config.COUNTRIES[country_code],\n            'flag': Config.COUNTRY_FLAGS.get(country_code, '🏳'),\n            'neighbors': self.get_country_neighbors(country_code),\n            'continent': self.get_country_continent(country_code)\n        }\n    \n    def get_country_neighbors(self, country_code):\n        \"\"\"Get neighboring countries\"\"\"\n        return Config.COUNTRY_NEIGHBORS.get(country_code, [])\n    \n    def get_country_continent(self, country_code):\n        \"\"\"Get country continent\"\"\"\n        continents = {\n            'IR': 'آسیا',\n            'TR': 'آسیا/اروپا',\n            'RU': 'آسیا/اروپا',\n            'CN': 'آسیا',\n            'JP': 'آسیا',\n            'KP': 'آسیا',\n            'US': 'آمریکای شمالی',\n            'MX': 'آمریکای شمالی',\n            'CA': 'آمریکای شمالی',\n            'AR': 'آمریکای جنوبی',\n            'BR': 'آمریکای جنوبی',\n            'FR': 'اروپا',\n            'DE': 'اروپا',\n            'ES': 'اروپا',\n            'BE': 'اروپا',\n            'IT': 'اروپا',\n            'GB': 'اروپا',\n            'EG': 'آفریقا',\n            'SA': 'آسیا',\n            'PK': 'آسیا',\n            'AF': 'آسیا',\n            'IQ': 'آسیا',\n            'IN': 'آسیا',\n            'AU': 'اقیانوسیه'\n        }\n        \n        return continents.get(country_code, 'نامشخص')\n    \n    def calculate_distance(self, country1, country2):\n        \"\"\"Calculate approximate distance between countries\"\"\"\n        return Config.get_country_distance(country1, country2)\n    \n    def are_neighbors(self, country1, country2):\n        \"\"\"Check if two countries are neighbors\"\"\"\n        return Config.are_countries_neighbors(country1, country2)","size_bytes":2709},"database.py":{"content":"\nimport sqlite3\nimport logging\nfrom datetime import datetime\nimport json\nfrom config import Config\n\nlogger = logging.getLogger(__name__)\n\nclass Database:\n    def __init__(self):\n        self.db_path = 'dragonrp.db'\n\n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        try:\n            conn = sqlite3.connect(self.db_path)\n            conn.row_factory = sqlite3.Row  # This makes results behave like dictionaries\n            return conn\n        except sqlite3.Error as e:\n            logger.error(f\"Error connecting to SQLite: {e}\")\n            raise\n\n    def initialize(self):\n        \"\"\"Initialize database tables\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Players table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS players (\n                    user_id INTEGER PRIMARY KEY,\n                    username TEXT NOT NULL,\n                    country_code TEXT UNIQUE NOT NULL,\n                    country_name TEXT NOT NULL,\n                    money INTEGER DEFAULT 100000,\n                    population INTEGER DEFAULT 1000000,\n                    soldiers INTEGER DEFAULT 0,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                )\n            ''')\n\n            # Resources table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS resources (\n                    user_id INTEGER PRIMARY KEY,\n                    iron INTEGER DEFAULT 0,\n                    copper INTEGER DEFAULT 0,\n                    oil INTEGER DEFAULT 0,\n                    gas INTEGER DEFAULT 0,\n                    aluminum INTEGER DEFAULT 0,\n                    gold INTEGER DEFAULT 0,\n                    uranium INTEGER DEFAULT 0,\n                    lithium INTEGER DEFAULT 0,\n                    coal INTEGER DEFAULT 0,\n                    silver INTEGER DEFAULT 0,\n                    fuel INTEGER DEFAULT 0,\n                    nitro INTEGER DEFAULT 0,\n                    sulfur INTEGER DEFAULT 0,\n                    titanium INTEGER DEFAULT 0,\n                    FOREIGN KEY (user_id) REFERENCES players (user_id) ON DELETE CASCADE\n                )\n            ''')\n\n            # Buildings table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS buildings (\n                    user_id INTEGER PRIMARY KEY,\n                    iron_mine INTEGER DEFAULT 0,\n                    copper_mine INTEGER DEFAULT 0,\n                    oil_mine INTEGER DEFAULT 0,\n                    gas_mine INTEGER DEFAULT 0,\n                    aluminum_mine INTEGER DEFAULT 0,\n                    gold_mine INTEGER DEFAULT 0,\n                    uranium_mine INTEGER DEFAULT 0,\n                    lithium_mine INTEGER DEFAULT 0,\n                    coal_mine INTEGER DEFAULT 0,\n                    silver_mine INTEGER DEFAULT 0,\n                    nitro_mine INTEGER DEFAULT 0,\n                    sulfur_mine INTEGER DEFAULT 0,\n                    titanium_mine INTEGER DEFAULT 0,\n                    weapon_factory INTEGER DEFAULT 0,\n                    refinery INTEGER DEFAULT 0,\n                    power_plant INTEGER DEFAULT 0,\n                    wheat_farm INTEGER DEFAULT 0,\n                    military_base INTEGER DEFAULT 0,\n                    housing INTEGER DEFAULT 0,\n                    FOREIGN KEY (user_id) REFERENCES players (user_id) ON DELETE CASCADE\n                )\n            ''')\n\n            # Weapons table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS weapons (\n                    user_id BIGINT PRIMARY KEY,\n                    rifle BIGINT DEFAULT 0,\n                    tank BIGINT DEFAULT 0,\n                    fighter_jet BIGINT DEFAULT 0,\n                    jet BIGINT DEFAULT 0,\n                    drone BIGINT DEFAULT 0,\n                    warship BIGINT DEFAULT 0,\n                    submarine BIGINT DEFAULT 0,\n                    destroyer BIGINT DEFAULT 0,\n                    aircraft_carrier BIGINT DEFAULT 0,\n                    air_defense BIGINT DEFAULT 0,\n                    missile_shield BIGINT DEFAULT 0,\n                    cyber_shield BIGINT DEFAULT 0,\n                    simple_bomb BIGINT DEFAULT 0,\n                    nuclear_bomb BIGINT DEFAULT 0,\n                    simple_missile BIGINT DEFAULT 0,\n                    ballistic_missile BIGINT DEFAULT 0,\n                    nuclear_missile BIGINT DEFAULT 0,\n                    trident2_conventional BIGINT DEFAULT 0,\n                    trident2_nuclear BIGINT DEFAULT 0,\n                    satan2_conventional BIGINT DEFAULT 0,\n                    satan2_nuclear BIGINT DEFAULT 0,\n                    df41_nuclear BIGINT DEFAULT 0,\n                    tomahawk_conventional BIGINT DEFAULT 0,\n                    tomahawk_nuclear BIGINT DEFAULT 0,\n                    kalibr_conventional BIGINT DEFAULT 0,\n                    f22 BIGINT DEFAULT 0,\n                    f35 BIGINT DEFAULT 0,\n                    su57 BIGINT DEFAULT 0,\n                    j20 BIGINT DEFAULT 0,\n                    f15ex BIGINT DEFAULT 0,\n                    su35s BIGINT DEFAULT 0,\n                    helicopter BIGINT DEFAULT 0,\n                    strategic_bomber BIGINT DEFAULT 0,\n                    armored_truck BIGINT DEFAULT 0,\n                    cargo_helicopter BIGINT DEFAULT 0,\n                    cargo_plane BIGINT DEFAULT 0,\n                    escort_frigate BIGINT DEFAULT 0,\n                    logistics_drone BIGINT DEFAULT 0,\n                    heavy_transport BIGINT DEFAULT 0,\n                    supply_ship BIGINT DEFAULT 0,\n                    stealth_transport BIGINT DEFAULT 0,\n                    kf51_panther BIGINT DEFAULT 0,\n                    abrams_x BIGINT DEFAULT 0,\n                    m1e3_abrams BIGINT DEFAULT 0,\n                    t90ms_proryv BIGINT DEFAULT 0,\n                    m1a2_abrams_sepv3 BIGINT DEFAULT 0,\n                    s500_defense BIGINT DEFAULT 0,\n                    thaad_defense BIGINT DEFAULT 0,\n                    s400_defense BIGINT DEFAULT 0,\n                    iron_dome BIGINT DEFAULT 0,\n                    slq32_ew BIGINT DEFAULT 0,\n                    phalanx_ciws BIGINT DEFAULT 0,\n                    aircraft_carrier_full BIGINT DEFAULT 0,\n                    nuclear_submarine BIGINT DEFAULT 0,\n                    patrol_ship BIGINT DEFAULT 0,\n                    patrol_boat BIGINT DEFAULT 0,\n                    amphibious_ship BIGINT DEFAULT 0,\n                    tanker_aircraft BIGINT DEFAULT 0,\n                    aircraft_carrier_transport BIGINT DEFAULT 0,\n                    FOREIGN KEY (user_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Wars table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS wars (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    attacker_id BIGINT NOT NULL,\n                    defender_id BIGINT NOT NULL,\n                    attack_power BIGINT NOT NULL,\n                    defense_power BIGINT NOT NULL,\n                    result VARCHAR(50) NOT NULL,\n                    damage_dealt BIGINT DEFAULT 0,\n                    resources_stolen TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (attacker_id) REFERENCES players (user_id) ON DELETE CASCADE,\n                    FOREIGN KEY (defender_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Convoys table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS convoys (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    sender_id BIGINT NOT NULL,\n                    receiver_id BIGINT NOT NULL,\n                    resources TEXT NOT NULL,\n                    departure_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    arrival_time TIMESTAMP NOT NULL,\n                    status VARCHAR(50) DEFAULT 'in_transit',\n                    security_level INT DEFAULT 50,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (sender_id) REFERENCES players (user_id) ON DELETE CASCADE,\n                    FOREIGN KEY (receiver_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Pending attacks table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS pending_attacks (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    attacker_id BIGINT NOT NULL,\n                    defender_id BIGINT NOT NULL,\n                    attack_type VARCHAR(50) DEFAULT 'mixed',\n                    conquest_mode TINYINT DEFAULT 0,\n                    travel_time INT NOT NULL,\n                    departure_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    attack_time TIMESTAMP NOT NULL,\n                    status VARCHAR(50) DEFAULT 'traveling',\n                    FOREIGN KEY (attacker_id) REFERENCES players (user_id) ON DELETE CASCADE,\n                    FOREIGN KEY (defender_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Admin logs table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS admin_logs (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    admin_id BIGINT NOT NULL,\n                    action TEXT NOT NULL,\n                    target_id BIGINT,\n                    details TEXT,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Marketplace listings\n            cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS marketplace_listings (\n                id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                seller_id BIGINT NOT NULL,\n                item_name VARCHAR(255) NOT NULL,\n                item_type VARCHAR(255) NOT NULL,\n                item_id VARCHAR(255) NOT NULL,\n                quantity BIGINT NOT NULL,\n                price BIGINT NOT NULL,\n                status VARCHAR(50) DEFAULT 'active',\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (seller_id) REFERENCES players (user_id) ON DELETE CASCADE\n            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            \"\"\")\n\n            # Market transactions table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS market_transactions (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    listing_id BIGINT NOT NULL,\n                    buyer_id BIGINT NOT NULL,\n                    seller_id BIGINT NOT NULL,\n                    item_type VARCHAR(255) NOT NULL,\n                    quantity BIGINT NOT NULL,\n                    total_paid BIGINT NOT NULL,\n                    status VARCHAR(50) DEFAULT 'pending',\n                    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    delivery_date TIMESTAMP NULL,\n                    FOREIGN KEY (listing_id) REFERENCES marketplace_listings (id) ON DELETE CASCADE,\n                    FOREIGN KEY (buyer_id) REFERENCES players (user_id) ON DELETE CASCADE,\n                    FOREIGN KEY (seller_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Purchase tracking table for preventing duplicate news\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS purchase_tracking (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    buyer_id BIGINT NOT NULL,\n                    item_type VARCHAR(255) NOT NULL,\n                    first_purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    UNIQUE KEY unique_buyer_item (buyer_id, item_type),\n                    FOREIGN KEY (buyer_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            # Build tracking table for preventing duplicate news\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS build_tracking (\n                    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n                    builder_id BIGINT NOT NULL,\n                    item_type VARCHAR(255) NOT NULL,\n                    first_build_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    UNIQUE KEY unique_builder_item (builder_id, item_type),\n                    FOREIGN KEY (builder_id) REFERENCES players (user_id) ON DELETE CASCADE\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n            ''')\n\n            conn.commit()\n            cursor.close()\n            logger.info(\"MariaDB database initialized successfully\")\n\n    def create_player(self, user_id, username, country_code):\n        \"\"\"Create a new player\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n\n                country_name = Config.COUNTRIES.get(country_code, country_code)\n\n                # Insert player\n                cursor.execute('''\n                    INSERT INTO players (user_id, username, country_code, country_name)\n                    VALUES (%s, %s, %s, %s)\n                ''', (user_id, username, country_code, country_name))\n\n                # Initialize resources\n                cursor.execute('''\n                    INSERT INTO resources (user_id) VALUES (%s)\n                ''', (user_id,))\n\n                # Initialize buildings\n                cursor.execute('''\n                    INSERT INTO buildings (user_id) VALUES (%s)\n                ''', (user_id,))\n\n                # Initialize weapons\n                cursor.execute('''\n                    INSERT INTO weapons (user_id) VALUES (%s)\n                ''', (user_id,))\n\n                conn.commit()\n                cursor.close()\n                logger.info(f\"Player created: {username} - {country_name}\")\n                return True\n\n        except mysql.connector.IntegrityError:\n            logger.error(f\"Country {country_code} already taken\")\n            return False\n        except Exception as e:\n            logger.error(f\"Error creating player: {e}\")\n            return False\n\n    def get_player(self, user_id):\n        \"\"\"Get player information\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM players WHERE user_id = %s', (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            return result\n\n    def get_all_players(self):\n        \"\"\"Get all players\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM players ORDER BY country_name')\n            result = cursor.fetchall()\n            cursor.close()\n            return result\n\n    def set_player_building(self, user_id, building_type, count):\n        \"\"\"Set player building count to specific value\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n                query = f'''\n                    UPDATE buildings \n                    SET {building_type} = %s\n                    WHERE user_id = %s\n                '''\n                cursor.execute(query, (count, user_id))\n                conn.commit()\n                cursor.close()\n                logger.info(f\"Set {building_type} to {count} for player {user_id}\")\n                return True\n        except Exception as e:\n            logger.error(f\"Error setting building count: {e}\")\n            return False\n\n    def update_player_income(self, user_id, new_money, new_population, new_soldiers):\n        \"\"\"Update player money, population, and soldiers (for income cycle)\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n                cursor.execute('''\n                    UPDATE players \n                    SET money = %s, population = %s, soldiers = %s\n                    WHERE user_id = %s\n                ''', (new_money, new_population, new_soldiers, user_id))\n                conn.commit()\n                cursor.close()\n                logger.info(f\"Updated income for player {user_id}: ${new_money:,}, population: {new_population:,}, soldiers: {new_soldiers:,}\")\n                return True\n        except Exception as e:\n            logger.error(f\"Error updating player income: {e}\")\n            return False\n\n    def get_all_countries(self):\n        \"\"\"Get all countries with players\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT user_id, username, country_name, country_code FROM players ORDER BY country_name')\n            result = cursor.fetchall()\n            cursor.close()\n            return result\n\n    def is_country_taken(self, country_code):\n        \"\"\"Check if country is already taken\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT 1 FROM players WHERE country_code = %s', (country_code,))\n            result = cursor.fetchone()\n            cursor.close()\n            return result is not None\n\n    def get_player_resources(self, user_id):\n        \"\"\"Get player resources\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM resources WHERE user_id = %s', (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            return result if result else {}\n\n    def get_player_buildings(self, user_id):\n        \"\"\"Get player buildings\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM buildings WHERE user_id = %s', (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            return result if result else {}\n\n    def get_player_weapons(self, user_id):\n        \"\"\"Get player weapons\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM weapons WHERE user_id = %s', (user_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            if result:\n                logger.info(f\"get_player_weapons for user {user_id}: rifle={result.get('rifle', 0)}\")\n                return result\n            else:\n                logger.warning(f\"No weapons found for user {user_id}\")\n                return {}\n\n    def update_player_money(self, user_id, new_amount):\n        \"\"\"Update player money\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n                cursor.execute(\"\"\"\n                    UPDATE players SET money = %s WHERE user_id = %s\n                \"\"\", (new_amount, user_id))\n                conn.commit()\n                cursor.close()\n                logger.info(f\"Updated player {user_id} money to {new_amount}\")\n                return True\n        except Exception as e:\n            logger.error(f\"Error updating player money: {e}\")\n            return False\n\n    def update_player_population(self, user_id, new_population):\n        \"\"\"Update player population\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n                cursor.execute(\n                    \"UPDATE players SET population = %s WHERE user_id = %s\",\n                    (new_population, user_id)\n                )\n                conn.commit()\n                cursor.close()\n                return True\n        except Exception as e:\n            logger.error(f\"Error updating player population: {e}\")\n            return False\n\n    def update_player_soldiers(self, user_id, new_soldiers):\n        \"\"\"Update player's soldiers count\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                UPDATE players \n                SET soldiers = %s\n                WHERE user_id = %s\n            ''', (new_soldiers, user_id))\n            conn.commit()\n            cursor.close()\n\n    def update_resource(self, user_id, resource_type, new_amount):\n        \"\"\"Update specific resource amount\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            query = f'''\n                UPDATE resources \n                SET {resource_type} = %s\n                WHERE user_id = %s\n            '''\n            cursor.execute(query, (new_amount, user_id))\n            conn.commit()\n            cursor.close()\n\n    def update_building_count(self, user_id, building_type, new_count):\n        \"\"\"Update building count\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            query = f'''\n                UPDATE buildings \n                SET {building_type} = %s\n                WHERE user_id = %s\n            '''\n            cursor.execute(query, (new_count, user_id))\n            conn.commit()\n            cursor.close()\n\n    def add_building(self, user_id, building_type):\n        \"\"\"Add a building to player\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            query = f'''\n                UPDATE buildings \n                SET {building_type} = {building_type} + 1 \n                WHERE user_id = %s\n            '''\n            cursor.execute(query, (user_id,))\n            conn.commit()\n            cursor.close()\n\n    def add_weapon(self, user_id, weapon_type, quantity=1):\n        \"\"\"Add weapons to player\"\"\"\n        logger.info(f\"add_weapon called: user_id={user_id}, weapon_type={weapon_type}, quantity={quantity}\")\n        \n        # Map weapon names to database column names\n        weapon_column_map = {\n            'rifle': 'rifle',\n            'tank': 'tank',\n            'fighter': 'fighter_jet',\n            'fighter_jet': 'fighter_jet',\n            'helicopter': 'helicopter',\n            'jet': 'jet',\n            'drone': 'drone',\n            'strategic_bomber': 'strategic_bomber',\n            'warship': 'warship',\n            'submarine': 'submarine',\n            'destroyer': 'destroyer',\n            'aircraft_carrier': 'aircraft_carrier',\n            'aircraft_carrier_full': 'aircraft_carrier_full',\n            'nuclear_submarine': 'nuclear_submarine',\n            'patrol_ship': 'patrol_ship',\n            'patrol_boat': 'patrol_boat',\n            'amphibious_ship': 'amphibious_ship',\n            'air_defense': 'air_defense',\n            'missile_shield': 'missile_shield',\n            'cyber_shield': 'cyber_shield',\n            's500_defense': 's500_defense',\n            'thaad_defense': 'thaad_defense',\n            's400_defense': 's400_defense',\n            'iron_dome': 'iron_dome',\n            'slq32_ew': 'slq32_ew',\n            'phalanx_ciws': 'phalanx_ciws',\n            'simple_bomb': 'simple_bomb',\n            'nuclear_bomb': 'nuclear_bomb',\n            'simple_missile': 'simple_missile',\n            'ballistic_missile': 'ballistic_missile',\n            'nuclear_missile': 'nuclear_missile',\n            'trident2_conventional': 'trident2_conventional',\n            'trident2_nuclear': 'trident2_nuclear',\n            'satan2_conventional': 'satan2_conventional',\n            'satan2_nuclear': 'satan2_nuclear',\n            'df41_nuclear': 'df41_nuclear',\n            'tomahawk_conventional': 'tomahawk_conventional',\n            'tomahawk_nuclear': 'tomahawk_nuclear',\n            'kalibr_conventional': 'kalibr_conventional',\n            'f22': 'f22',\n            'f35': 'f35',\n            'su57': 'su57',\n            'j20': 'j20',\n            'f15ex': 'f15ex',\n            'su35s': 'su35s',\n            'kf51_panther': 'kf51_panther',\n            'abrams_x': 'abrams_x',\n            'm1e3_abrams': 'm1e3_abrams',\n            't90ms_proryv': 't90ms_proryv',\n            'm1a2_abrams_sepv3': 'm1a2_abrams_sepv3',\n            'armored_truck': 'armored_truck',\n            'cargo_helicopter': 'cargo_helicopter',\n            'cargo_plane': 'cargo_plane',\n            'escort_frigate': 'escort_frigate',\n            'logistics_drone': 'logistics_drone',\n            'heavy_transport': 'heavy_transport',\n            'supply_ship': 'supply_ship',\n            'stealth_transport': 'stealth_transport',\n            'tanker_aircraft': 'tanker_aircraft',\n            'aircraft_carrier_transport': 'aircraft_carrier_transport'\n        }\n\n        column_name = weapon_column_map.get(weapon_type, weapon_type)\n        logger.info(f\"Mapped weapon_type '{weapon_type}' to column '{column_name}'\")\n\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            \n            # Check if user exists in weapons table\n            cursor.execute('SELECT COUNT(*) FROM weapons WHERE user_id = %s', (user_id,))\n            user_exists = cursor.fetchone()[0] > 0\n            logger.info(f\"User {user_id} exists in weapons table: {user_exists}\")\n            \n            if not user_exists:\n                logger.info(f\"Creating weapons entry for user {user_id}\")\n                # Create a new weapons entry for this user\n                cursor.execute('INSERT INTO weapons (user_id) VALUES (%s)', (user_id,))\n            \n            # Check current value before update\n            cursor.execute(f'SELECT {column_name} FROM weapons WHERE user_id = %s', (user_id,))\n            current_value = cursor.fetchone()\n            if current_value:\n                current_value = current_value[0] or 0\n            else:\n                current_value = 0\n            logger.info(f\"Current {column_name} value for user {user_id}: {current_value}\")\n            \n            # Update weapons\n            cursor.execute(f'''\n                UPDATE weapons \n                SET {column_name} = {column_name} + %s \n                WHERE user_id = %s\n            ''', (quantity, user_id))\n            \n            # Check after update\n            cursor.execute(f'SELECT {column_name} FROM weapons WHERE user_id = %s', (user_id,))\n            new_value = cursor.fetchone()\n            if new_value:\n                new_value = new_value[0] or 0\n            else:\n                new_value = 0\n            logger.info(f\"New {column_name} value for user {user_id}: {new_value}\")\n            \n            conn.commit()\n            cursor.close()\n\n    def add_resources(self, user_id, resource_type, quantity):\n        \"\"\"Add resources to player\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            query = f'''\n                UPDATE resources \n                SET {resource_type} = {resource_type} + %s \n                WHERE user_id = %s\n            '''\n            cursor.execute(query, (quantity, user_id))\n            conn.commit()\n            cursor.close()\n\n    def subtract_resources(self, user_id, resource_type, quantity):\n        \"\"\"Subtract resources from player\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            query = f'''\n                UPDATE resources \n                SET {resource_type} = {resource_type} - %s \n                WHERE user_id = %s\n            '''\n            cursor.execute(query, (quantity, user_id))\n            conn.commit()\n            cursor.close()\n\n    def consume_resources(self, user_id, resources_needed):\n        \"\"\"Consume resources from player\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n\n            # Check if player has enough resources\n            current_resources = self.get_player_resources(user_id)\n            for resource, amount in resources_needed.items():\n                if current_resources.get(resource, 0) < amount:\n                    cursor.close()\n                    return False\n\n            # Consume resources\n            for resource, amount in resources_needed.items():\n                query = f'''\n                    UPDATE resources \n                    SET {resource} = {resource} - %s \n                    WHERE user_id = %s\n                '''\n                cursor.execute(query, (amount, user_id))\n\n            conn.commit()\n            cursor.close()\n            return True\n\n    def log_admin_action(self, admin_id, action, target_id=None, details=None):\n        \"\"\"Log admin action\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT INTO admin_logs (admin_id, action, target_id, details)\n                VALUES (%s, %s, %s, %s)\n            ''', (admin_id, action, target_id, details))\n            conn.commit()\n            cursor.close()\n\n    def get_admin_logs(self, limit=50):\n        \"\"\"Get admin logs\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('''\n                SELECT * FROM admin_logs \n                ORDER BY created_at DESC \n                LIMIT %s\n            ''', (limit,))\n            result = cursor.fetchall()\n            cursor.close()\n            return result\n\n    def delete_player(self, user_id):\n        \"\"\"Delete player and all related data\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Delete from all tables (CASCADE will handle related data)\n            cursor.execute('DELETE FROM players WHERE user_id = %s', (user_id,))\n\n            conn.commit()\n            cursor.close()\n            return True\n\n    def update_weapon_count(self, user_id, weapon_type, new_count):\n        \"\"\"Update weapon count\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            query = f'''\n                UPDATE weapons \n                SET {weapon_type} = %s \n                WHERE user_id = %s\n            '''\n            cursor.execute(query, (new_count, user_id))\n            conn.commit()\n            cursor.close()\n\n    def get_weapon_count(self, user_id, weapon_type):\n        \"\"\"Get specific weapon count\"\"\"\n        weapons = self.get_player_weapons(user_id)\n        return weapons.get(weapon_type, 0)\n\n    def get_active_convoys(self):\n        \"\"\"Get all active convoys in transit\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('''\n                SELECT c.*, \n                       s.country_name as sender_country,\n                       r.country_name as receiver_country\n                FROM convoys c\n                JOIN players s ON c.sender_id = s.user_id\n                JOIN players r ON c.receiver_id = r.user_id\n                WHERE c.status = 'in_transit'\n                AND c.arrival_time > NOW()\n                ORDER BY c.created_at DESC\n            ''')\n            results = cursor.fetchall()\n            cursor.close()\n            return results if results else []\n\n    def create_convoy(self, sender_id, receiver_id, resources, travel_minutes=30, security_level=50):\n        \"\"\"Create a new convoy\"\"\"\n        import json\n        from datetime import datetime, timedelta\n\n        arrival_time = datetime.now() + timedelta(minutes=travel_minutes)\n\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT INTO convoys (sender_id, receiver_id, resources, arrival_time, security_level, status, created_at)\n                VALUES (%s, %s, %s, %s, %s, 'in_transit', NOW())\n            ''', (sender_id, receiver_id, json.dumps(resources), arrival_time, security_level))\n\n            convoy_id = cursor.lastrowid\n            conn.commit()\n            cursor.close()\n            return convoy_id\n\n    def get_convoy(self, convoy_id):\n        \"\"\"Get convoy details\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM convoys WHERE id = %s', (convoy_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            return result\n\n    def update_convoy_status(self, convoy_id, new_status):\n        \"\"\"Update convoy status\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('UPDATE convoys SET status = %s WHERE id = %s', (new_status, convoy_id))\n            conn.commit()\n            cursor.close()\n\n    def update_convoy_arrival(self, convoy_id, new_arrival_time, new_status):\n        \"\"\"Update convoy arrival time and status\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                UPDATE convoys \n                SET arrival_time = %s, status = %s \n                WHERE id = %s\n            ''', (new_arrival_time, new_status, convoy_id))\n            conn.commit()\n            cursor.close()\n\n    def update_convoy_security(self, convoy_id, new_security_level):\n        \"\"\"Update convoy security level\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                UPDATE convoys \n                SET security_level = %s \n                WHERE id = %s\n            ''', (new_security_level, convoy_id))\n            conn.commit()\n            cursor.close()\n\n    def get_arrived_convoys(self):\n        \"\"\"Get all convoys that have arrived at their destination\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('''\n                SELECT c.*, \n                       s.country_name as sender_country,\n                       r.country_name as receiver_country\n                FROM convoys c\n                JOIN players s ON c.sender_id = s.user_id\n                JOIN players r ON c.receiver_id = r.user_id\n                WHERE c.status = 'in_transit'\n                AND c.arrival_time <= NOW()\n                ORDER BY c.arrival_time ASC\n            ''')\n            results = cursor.fetchall()\n            cursor.close()\n            return results if results else []\n\n    def create_pending_attack(self, attack_data):\n        \"\"\"Create a new pending attack\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT INTO pending_attacks (attacker_id, defender_id, attack_type, conquest_mode, travel_time, attack_time, status)\n                VALUES (%s, %s, %s, %s, %s, %s, %s)\n            ''', (\n                attack_data['attacker_id'],\n                attack_data['defender_id'], \n                attack_data['attack_type'],\n                1 if attack_data.get('conquest_mode', False) else 0,\n                attack_data['travel_time'],\n                attack_data['attack_time'],\n                attack_data['status']\n            ))\n            attack_id = cursor.lastrowid\n            conn.commit()\n            cursor.close()\n            return attack_id\n\n    def get_pending_attack(self, attack_id):\n        \"\"\"Get pending attack details\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('SELECT * FROM pending_attacks WHERE id = %s', (attack_id,))\n            result = cursor.fetchone()\n            cursor.close()\n            return result\n\n    def get_player_pending_attacks(self, player_id):\n        \"\"\"Get all pending attacks for a player\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            cursor.execute('''\n                SELECT * FROM pending_attacks \n                WHERE attacker_id = %s AND status IN ('traveling', 'pending')\n            ''', (player_id,))\n            results = cursor.fetchall()\n            cursor.close()\n            return results\n\n    def get_pending_attacks_due(self):\n        \"\"\"Get all pending attacks that are due for execution\"\"\"\n        from datetime import datetime\n        with self.get_connection() as conn:\n            cursor = conn.cursor(dictionary=True)\n            current_time = datetime.now()\n            cursor.execute('''\n                SELECT * FROM pending_attacks \n                WHERE attack_time <= %s AND status = 'traveling'\n            ''', (current_time,))\n            result = cursor.fetchall()\n            cursor.close()\n            return result\n\n    def update_pending_attack_status(self, attack_id, new_status):\n        \"\"\"Update pending attack status\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('UPDATE pending_attacks SET status = %s WHERE id = %s', (new_status, attack_id))\n            conn.commit()\n            cursor.close()\n\n    def reset_all_data(self):\n        \"\"\"Reset all game data (admin function)\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Drop and recreate all game tables\n            tables = ['market_transactions', 'marketplace_listings', 'purchase_tracking', 'build_tracking',\n                     'pending_attacks', 'convoys', 'wars', 'weapons', 'buildings', 'resources', 'players']\n            for table in tables:\n                cursor.execute(f'DROP TABLE IF EXISTS {table}')\n\n            conn.commit()\n            cursor.close()\n\n        # Reinitialize database\n        self.initialize()\n        return True\n\n    def check_first_purchase(self, user_id, item_type):\n        \"\"\"Check if this is user's first purchase of this item type\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\n                'SELECT id FROM purchase_tracking WHERE buyer_id = %s AND item_type = %s',\n                (user_id, item_type)\n            )\n            result = cursor.fetchone()\n            cursor.close()\n            return result is None\n\n    def record_first_purchase(self, user_id, item_type):\n        \"\"\"Record first purchase of an item type\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT IGNORE INTO purchase_tracking (buyer_id, item_type)\n                VALUES (%s, %s)\n            ''', (user_id, item_type))\n            conn.commit()\n            cursor.close()\n\n    def check_first_build(self, user_id, item_type):\n        \"\"\"Check if this is user's first build of this item type\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\n                'SELECT id FROM build_tracking WHERE builder_id = %s AND item_type = %s',\n                (user_id, item_type)\n            )\n            result = cursor.fetchone()\n            cursor.close()\n            return result is None\n\n    def record_first_build(self, user_id, item_type):\n        \"\"\"Record first build of an item type\"\"\"\n        with self.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT IGNORE INTO build_tracking (builder_id, item_type)\n                VALUES (%s, %s)\n            ''', (user_id, item_type))\n            conn.commit()\n            cursor.close()\n\n    def give_infinite_resources_to_all_players(self):\n        \"\"\"Give infinite money and resources to all players for testing\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n                \n                # Give 1 billion money to all players\n                cursor.execute(\"UPDATE players SET money = 1000000000, population = 50000000, soldiers = 10000000\")\n                \n                # Give massive resources to all players\n                cursor.execute(\"\"\"\n                    UPDATE resources SET \n                    iron = 1000000,\n                    copper = 1000000,\n                    oil = 1000000,\n                    gas = 1000000,\n                    aluminum = 1000000,\n                    gold = 1000000,\n                    uranium = 1000000,\n                    lithium = 1000000,\n                    coal = 1000000,\n                    silver = 1000000,\n                    fuel = 1000000,\n                    nitro = 1000000,\n                    sulfur = 1000000,\n                    titanium = 1000000\n                \"\"\")\n                \n                # Give lots of buildings to all players\n                cursor.execute(\"\"\"\n                    UPDATE buildings SET \n                    iron_mine = 100,\n                    copper_mine = 100,\n                    oil_mine = 100,\n                    gas_mine = 100,\n                    aluminum_mine = 100,\n                    gold_mine = 100,\n                    uranium_mine = 100,\n                    lithium_mine = 100,\n                    coal_mine = 100,\n                    silver_mine = 100,\n                    nitro_mine = 100,\n                    sulfur_mine = 100,\n                    titanium_mine = 100,\n                    weapon_factory = 50,\n                    refinery = 50,\n                    power_plant = 50,\n                    wheat_farm = 50,\n                    military_base = 50,\n                    housing = 50\n                \"\"\")\n                \n                conn.commit()\n                cursor.close()\n                logger.info(\"Infinite resources given to all players for testing\")\n                return True\n        except Exception as e:\n            logger.error(f\"Error giving infinite resources: {e}\")\n            return False\n\n    def clear_test_data(self):\n        \"\"\"Clear test data from database\"\"\"\n        try:\n            with self.get_connection() as conn:\n                cursor = conn.cursor()\n                # Delete test players - CASCADE will handle related data\n                cursor.execute(\"DELETE FROM players WHERE user_id IN (123456, 123457, 123458)\")\n                conn.commit()\n                cursor.close()\n                logger.info(\"Test data cleared successfully\")\n                return True\n        except Exception as e:\n            logger.error(f\"Error clearing test data: {e}\")\n            return False\n","size_bytes":42384},"economy.py":{"content":"import logging\nfrom config import Config\n\nlogger = logging.getLogger(__name__)\n\nclass Economy:\n    def __init__(self, database):\n        self.db = database\n\n    def calculate_income(self, user_id):\n        \"\"\"Calculate 6-hour income from buildings\"\"\"\n        buildings = self.db.get_player_buildings(user_id)\n        total_income = 0\n\n        for building_type, count in buildings.items():\n            if building_type in Config.BUILDINGS and count > 0:\n                building_config = Config.BUILDINGS[building_type]\n                building_income = building_config.get('income', 0)\n                total_income += building_income * count\n\n        return total_income\n\n    def calculate_population_increase(self, user_id):\n        \"\"\"Calculate population increase from farms\"\"\"\n        buildings = self.db.get_player_buildings(user_id)\n        wheat_farms = buildings.get('wheat_farm', 0)\n\n        return wheat_farms * 10000  # Each farm adds 10,000 population\n\n    def calculate_soldier_increase(self, user_id):\n        \"\"\"Calculate soldier increase from military bases\"\"\"\n        buildings = self.db.get_player_buildings(user_id)\n        military_bases = buildings.get('military_base', 0)\n        return military_bases * 5000  # Each base produces 5000 soldiers per cycle\n\n    def update_player_income(self, user_id, new_money, new_population, new_soldiers):\n        \"\"\"Update player income data\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                UPDATE players \n                SET money = ?, population = ?, soldiers = ?\n                WHERE user_id = ?\n            ''', (new_money, new_population, new_soldiers, user_id))\n            conn.commit()\n\n    def distribute_mine_resources(self, user_id):\n        \"\"\"Distribute resources from mines\"\"\"\n        buildings = self.db.get_player_buildings(user_id)\n\n        resource_production = {\n            'iron_mine': ('iron', 1000),\n            'copper_mine': ('copper', 800),\n            'oil_mine': ('oil', 600),\n            'gas_mine': ('gas', 700),\n            'aluminum_mine': ('aluminum', 500),\n            'gold_mine': ('gold', 200),\n            'uranium_mine': ('uranium', 18),\n            'lithium_mine': ('lithium', 300),\n            'coal_mine': ('coal', 1200),\n            'silver_mine': ('silver', 400),\n            'nitro_mine': ('nitro', 600),\n            'sulfur_mine': ('sulfur', 900),\n            'titanium_mine': ('titanium', 60)\n        }\n\n        for building_type, (resource_type, production_amount) in resource_production.items():\n            mine_count = buildings.get(building_type, 0)\n            if mine_count > 0:\n                total_production = production_amount * mine_count\n                self.db.add_resources(user_id, resource_type, total_production)\n\n        # Convert oil to fuel in refineries\n        refineries = buildings.get('refinery', 0)\n        if refineries > 0:\n            player_resources = self.db.get_player_resources(user_id)\n            oil_available = player_resources.get('oil', 0)\n\n            # Each refinery can process 500 oil to fuel per cycle\n            max_processing = refineries * 500\n            oil_to_process = min(oil_available, max_processing)\n\n            if oil_to_process > 0:\n                # Convert oil to fuel (1:1 ratio)\n                self.db.consume_resources(user_id, {'oil': oil_to_process})\n                self.db.add_resources(user_id, 'fuel', oil_to_process)\n\n    def get_income_report(self, user_id):\n        \"\"\"Get detailed income report\"\"\"\n        buildings = self.db.get_player_buildings(user_id)\n\n        report = \"📊 گزارش درآمد شش‌ساعته:\\n\\n\"\n        total_income = 0\n\n        # Building income\n        for building_type, count in buildings.items():\n            if building_type in Config.BUILDINGS and count > 0:\n                building_config = Config.BUILDINGS[building_type]\n                building_income = building_config.get('income', 0) * count\n                if building_income > 0:\n                    building_name = building_config['name']\n                    report += f\"💰 {building_name} ({count}x): ${building_income:,}\\n\"\n                    total_income += building_income\n\n        report += f\"\\n💵 درآمد کل: ${total_income:,}\\n\\n\"\n\n        # Resource production\n        report += \"📦 تولید منابع:\\n\"\n        resource_production = {\n            'iron_mine': ('iron', 210, '🔩'),\n            'copper_mine': ('copper', 120, '🥉'),\n            'oil_mine': ('oil', 600, '🛢'),\n            'aluminum_mine': ('aluminum', 200, '🔗'),\n            'gold_mine': ('gold', 18, '🏆'),\n            'uranium_mine': ('uranium', 24, '☢️'),\n            'lithium_mine': ('lithium', 30, '🔋'),\n            'coal_mine': ('coal', 1000, '⚫'),\n            'nitro_mine': ('nitro', 600, '💥'),\n            'sulfur_mine': ('sulfur', 900, '🌫'),\n            'titanium_mine': ('titanium', 18, '🔘')\n        }\n\n        for building_type, (resource_type, production, emoji) in resource_production.items():\n            mine_count = buildings.get(building_type, 0)\n            if mine_count > 0:\n                total_production = production * mine_count\n                resource_name = Config.RESOURCES[resource_type]['name']\n                report += f\"{emoji} {resource_name}: +{total_production:,}\\n\"\n\n        # Population and soldiers\n        population_increase = self.calculate_population_increase(user_id)\n        soldier_increase = self.calculate_soldier_increase(user_id)\n\n        if population_increase > 0:\n            report += f\"\\n👥 افزایش جمعیت: +{population_increase:,}\"\n\n        if soldier_increase > 0:\n            report += f\"\\n⚔️ آموزش سرباز: +{soldier_increase:,}\"\n\n        return report\n\n    def get_building_requirements_text(self, building_type):\n        \"\"\"Get building requirements text\"\"\"\n        if building_type not in Config.BUILDINGS:\n            return \"ساختمان نامعتبر\"\n\n        building_config = Config.BUILDINGS[building_type]\n        text = f\"🏗 {building_config['name']}\\n\"\n        text += f\"💰 هزینه: ${building_config['cost']:,}\\n\"\n\n        if 'income' in building_config:\n            text += f\"💵 درآمد هر 6 ساعت: ${building_config['income']:,}\\n\"\n\n        if 'resource' in building_config:\n            resource_name = Config.RESOURCES[building_config['resource']]['name']\n            text += f\"📦 تولید: {resource_name}\\n\"\n\n        if 'population_increase' in building_config:\n            text += f\"👥 افزایش جمعیت: +{building_config['population_increase']:,}\\n\"\n\n        if 'soldier_production' in building_config:\n            text += f\"⚔️ تولید سرباز: {building_config['soldier_production']:,} در 6 ساعت\\n\"\n\n        if 'requirements' in building_config:\n            req_names = []\n            for req in building_config['requirements']:\n                req_name = Config.BUILDINGS.get(req, {}).get('name', req)\n                req_names.append(req_name)\n            text += f\"⚠️ نیازمندی: {', '.join(req_names)}\\n\"\n\n        return text\n\n    def can_afford_building(self, user_id, building_type):\n        \"\"\"Check if player can afford building\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return False, \"بازیکن یافت نشد\"\n\n        building_config = Config.BUILDINGS.get(building_type)\n        if not building_config:\n            return False, \"نوع ساختمان نامعتبر\"\n\n        if player['money'] < building_config['cost']:\n            return False, f\"پول کافی ندارید! نیاز: ${building_config['cost']:,}\"\n\n        # Check requirements\n        requirements = building_config.get('requirements', [])\n        if requirements:\n            buildings = self.db.get_player_buildings(user_id)\n            for req in requirements:\n                if buildings.get(req, 0) == 0:\n                    req_name = Config.BUILDINGS.get(req, {}).get('name', req)\n                    return False, f\"ابتدا باید {req_name} بسازید\"\n\n        return True, \"OK\"\n\n    def calculate_total_resource_value(self, user_id):\n        \"\"\"Calculate total value of all resources\"\"\"\n        resources = self.db.get_player_resources(user_id)\n        total_value = 0\n\n        for resource_type, amount in resources.items():\n            if resource_type in Config.RESOURCES and amount > 0:\n                market_value = Config.RESOURCES[resource_type]['market_value']\n                total_value += amount * market_value\n\n        return total_value\n\n    def get_economy_stats(self, user_id):\n        \"\"\"Get comprehensive economy statistics\"\"\"\n        player = self.db.get_player(user_id)\n        buildings = self.db.get_player_buildings(user_id)\n        resources = self.db.get_player_resources(user_id)\n\n        stats = {\n            'money': player['money'],\n            'population': player['population'],\n            'soldiers': player['soldiers'],\n            'total_income': self.calculate_income(user_id),\n            'total_buildings': sum(buildings.values()),\n            'resource_value': self.calculate_total_resource_value(user_id)\n        }\n\n        return stats","size_bytes":9279},"game_logic.py":{"content":"import logging\nfrom config import Config\nfrom datetime import datetime\n\nlogger = logging.getLogger(__name__)\n\nclass GameLogic:\n    def __init__(self, database):\n        self.db = database\n\n    def get_player_stats(self, user_id):\n        \"\"\"Get comprehensive player statistics\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return None\n\n        resources = self.db.get_player_resources(user_id)\n        buildings = self.db.get_player_buildings(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        return {\n            'user_id': user_id,\n            'country_name': player['country_name'],\n            'country_code': player['country_code'],\n            'money': player['money'],\n            'population': player['population'],\n            'soldiers': player['soldiers'],\n            'resources': resources,\n            'buildings': buildings,\n            'weapons': weapons\n        }\n\n    def build_structure(self, user_id, building_type, quantity=1):\n        \"\"\"Build a structure\"\"\"\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد!'}\n\n        building_config = Config.BUILDINGS.get(building_type)\n        if not building_config:\n            return {'success': False, 'message': 'نوع ساختمان نامعتبر!'}\n\n        total_cost = building_config['cost'] * quantity\n\n        if player['money'] < total_cost:\n            return {\n                'success': False,\n                'message': f\"پول کافی ندارید! نیاز: ${total_cost:,}, موجودی: ${player['money']:,}\"\n            }\n\n        # Deduct money and add building\n        new_money = player['money'] - total_cost\n        self.db.update_player_money(user_id, new_money)\n\n        # Add building to database\n        buildings = self.db.get_player_buildings(user_id)\n        if buildings is None:\n            buildings = {}\n        current_count = buildings.get(building_type, 0)\n        self.db.set_player_building(user_id, building_type, current_count + quantity)\n\n        # Check if first build for news\n        is_first_build = self.db.check_first_build(user_id, building_type)\n        if is_first_build:\n            self.db.record_first_build(user_id, building_type)\n\n        return {\n            'success': True,\n            'message': f\"✅ {quantity} {building_config['name']} با موفقیت ساخته شد!\",\n            'building_name': building_config['name'],\n            'remaining_money': new_money,\n            'is_first_build': is_first_build\n        }\n\n    def produce_weapon(self, user_id, weapon_type, quantity=1):\n        \"\"\"Produce weapons\"\"\"\n        # Check if weapon type exists in config\n        if weapon_type not in Config.WEAPONS:\n            available_weapons = list(Config.WEAPONS.keys())[:10]  # Show first 10 weapons for debugging\n            return {'success': False, 'message': f'نوع سلاح نامعتبر: {weapon_type}\\nسلاح‌های موجود: {\", \".join(available_weapons)}'}\n\n        player = self.db.get_player(user_id)\n        if not player:\n            return {'success': False, 'message': 'بازیکن یافت نشد!'}\n\n        weapon_config = Config.WEAPONS[weapon_type]\n\n        if quantity <= 0:\n            return {'success': False, 'message': 'تعداد باید بیشتر از صفر باشد!'}\n\n        total_cost = weapon_config.get('cost', 0) * quantity\n        weapon_name = weapon_config.get('name', weapon_type)\n        required_resources = weapon_config.get('resources', {})\n\n        # Check building requirements\n        building_requirements = weapon_config.get('requirements', [])\n        if building_requirements:\n            buildings = self.db.get_player_buildings(user_id)\n            for requirement in building_requirements:\n                if buildings.get(requirement, 0) == 0:\n                    req_name = Config.BUILDINGS.get(requirement, {}).get('name', requirement)\n                    return {'success': False, 'message': f'برای تولید این سلاح به {req_name} نیاز دارید!'}\n\n        # Check money\n        if player['money'] < total_cost:\n            return {\n                'success': False,\n                'message': f'پول کافی ندارید! نیاز: ${total_cost:,} برای {quantity} عدد، موجود: ${player[\"money\"]:,}'\n            }\n\n        # Separate weapon requirements from resource requirements\n        weapon_requirements = {}\n        resource_requirements = {}\n\n        for item, amount in required_resources.items():\n            if item in Config.WEAPONS:\n                weapon_requirements[item] = amount * quantity\n            else:\n                resource_requirements[item] = amount * quantity\n\n        # Check weapon requirements\n        if weapon_requirements:\n            current_weapons = self.db.get_player_weapons(user_id)\n            for req_weapon, req_amount in weapon_requirements.items():\n                current_amount = current_weapons.get(req_weapon, 0)\n                if current_amount < req_amount:\n                    req_weapon_name = Config.WEAPONS[req_weapon].get('name', req_weapon)\n                    return {\n                        'success': False,\n                        'message': f'سلاح مورد نیاز کافی نیست! نیاز: {req_amount} {req_weapon_name}, موجود: {current_amount}'\n                    }\n\n        # Check resource requirements\n        if resource_requirements:\n            current_resources = self.db.get_player_resources(user_id)\n            for resource, req_amount in resource_requirements.items():\n                current_amount = current_resources.get(resource, 0)\n                if current_amount < req_amount:\n                    resource_name = Config.RESOURCES.get(resource, {}).get('name', resource)\n                    return {\n                        'success': False,\n                        'message': f'منبع کافی نیست! نیاز: {req_amount} {resource_name}, موجود: {current_amount}'\n                    }\n\n        # Consume required resources\n        if resource_requirements:\n            for resource, amount in resource_requirements.items():\n                self.db.consume_resources(user_id, {resource: amount})\n\n        # Consume required weapons\n        if weapon_requirements:\n            for req_weapon, amount in weapon_requirements.items():\n                current_count = self.db.get_weapon_count(user_id, req_weapon)\n                new_count = current_count - amount\n                self.db.update_weapon_count(user_id, req_weapon, new_count)\n\n        # Deduct money\n        new_money = player['money'] - total_cost\n        self.db.update_player_money(user_id, new_money)\n\n        # Add produced weapons\n        logger.info(f\"Adding {quantity} {weapon_type} to user {user_id}\")\n        weapons_before = self.db.get_player_weapons(user_id)\n        logger.info(f\"Weapons before: {weapon_type}={weapons_before.get(weapon_type, 0)}\")\n        \n        self.db.add_weapon(user_id, weapon_type, quantity)\n        \n        weapons_after = self.db.get_player_weapons(user_id)\n        logger.info(f\"Weapons after: {weapon_type}={weapons_after.get(weapon_type, 0)}\")\n\n        return {\n            'success': True,\n            'message': f'{weapon_name} با موفقیت تولید شد! تعداد: {quantity}',\n            'weapon_name': weapon_name,\n            'quantity': quantity,\n            'remaining_money': new_money\n        }\n\n    def calculate_military_power(self, user_id):\n        \"\"\"Calculate total military power\"\"\"\n        weapons = self.db.get_player_weapons(user_id)\n        total_power = 0\n\n        for weapon_type, count in weapons.items():\n            if weapon_type in Config.WEAPONS:\n                weapon_power = Config.WEAPONS[weapon_type]['power']\n                total_power += weapon_power * count\n\n        return total_power\n\n    def calculate_defense_power(self, user_id):\n        \"\"\"Calculate total defense power\"\"\"\n        weapons = self.db.get_player_weapons(user_id)\n        defense_power = 0\n\n        # Only defensive weapons count for defense\n        defensive_weapons = ['air_defense', 'missile_shield', 'cyber_shield']\n\n        for weapon_type in defensive_weapons:\n            count = weapons.get(weapon_type, 0)\n            if weapon_type in Config.WEAPONS:\n                weapon_power = Config.WEAPONS[weapon_type]['power']\n                defense_power += weapon_power * count\n\n        return defense_power\n\n    def can_attack_country(self, attacker_id, defender_id):\n        \"\"\"Check if attacker can reach defender\"\"\"\n        attacker = self.db.get_player(attacker_id)\n        defender = self.db.get_player(defender_id)\n\n        if not attacker or not defender:\n            return False, \"کشور یافت نشد!\"\n\n        attacker_country = attacker['country_code']\n        defender_country = defender['country_code']\n\n        # Check if countries are neighbors\n        if self.are_countries_neighbors(attacker_country, defender_country):\n            return True, \"کشورهای همسایه - حمله مجاز\"\n\n        # Check if attacker has long-range weapons\n        weapons = self.db.get_player_weapons(attacker_id)\n        long_range_weapons = ['missile', 'drone', 'fighter_jet']\n\n        has_long_range = any(weapons.get(weapon, 0) > 0 for weapon in long_range_weapons)\n\n        if has_long_range:\n            return True, \"دارای تسلیحات با برد بالا\"\n\n        return False, \"فاصله زیاد - نیاز به تسلیحات با برد بالا\"\n\n    def are_countries_neighbors(self, country1, country2):\n        \"\"\"Check if two countries are neighbors (simplified)\"\"\"\n        # This is a simplified version - in reality would need complex geography data\n        neighbors = {\n            'IR': ['TR', 'IQ', 'AF', 'PK'],  # Iran\n            'TR': ['IR', 'IQ', 'SY', 'GR'],  # Turkey\n            'US': ['MX', 'CA'],  # USA\n            'MX': ['US'],  # Mexico\n            'RU': ['CN', 'KP'],  # Russia\n            'CN': ['RU', 'KP', 'JP'],  # China\n            'FR': ['DE', 'ES'],  # France\n            'DE': ['FR'],  # Germany\n            'ES': ['FR'],  # Spain\n            'EG': ['SA'],  # Egypt\n            'JP': ['CN', 'KP'],  # Japan\n            'AR': [],  # Argentina (island nation for game purposes)\n            'BE': ['FR', 'DE'],  # Belgium\n            'KP': ['CN', 'RU', 'JP'],  # North Korea\n        }\n\n        return country2 in neighbors.get(country1, [])\n\n    def execute_attack(self, attacker_id, defender_id, attack_type='mixed'):\n        \"\"\"Execute attack between two countries\"\"\"\n        # Check if attack is possible\n        can_attack, reason = self.can_attack_country(attacker_id, defender_id)\n        if not can_attack:\n            return {'success': False, 'message': f\"حمله امکان‌پذیر نیست: {reason}\"}\n\n        # Calculate powers\n        attack_power = self.calculate_military_power(attacker_id)\n        defense_power = self.calculate_defense_power(defender_id)\n\n        if attack_power == 0:\n            return {'success': False, 'message': 'شما هیچ تسلیحاتی برای حمله ندارید!'}\n\n        # Battle calculation with randomness\n        import random\n        random_factor = random.uniform(0.8, 1.2)\n        effective_attack = attack_power * random_factor\n\n        damage = effective_attack - defense_power\n\n        attacker = self.db.get_player(attacker_id)\n        defender = self.db.get_player(defender_id)\n\n        result = {\n            'attacker': attacker['country_name'],\n            'defender': defender['country_name'],\n            'attack_power': attack_power,\n            'defense_power': defense_power,\n            'damage': damage\n        }\n\n        if damage > 0:\n            # Attack successful\n            result['success'] = True\n            result['winner'] = attacker['country_name']\n\n            # Calculate losses and stolen resources\n            self._apply_battle_consequences(attacker_id, defender_id, damage)\n\n        else:\n            # Attack failed\n            result['success'] = False\n            result['winner'] = defender['country_name']\n\n            # Attacker suffers losses\n            self._apply_failed_attack_consequences(attacker_id, abs(damage))\n\n        # Log the war\n        self._log_war(attacker_id, defender_id, attack_power, defense_power, result)\n\n        return result\n\n    def _apply_battle_consequences(self, attacker_id, defender_id, damage):\n        \"\"\"Apply consequences of successful attack\"\"\"\n        # Defender loses soldiers and some weapons\n        defender = self.db.get_player(defender_id)\n        defender_weapons = self.db.get_player_weapons(defender_id)\n        defender_resources = self.db.get_player_resources(defender_id)\n\n        # Calculate losses based on damage\n        soldier_losses = min(defender['soldiers'], int(damage * 10))\n\n        # Attacker steals some resources\n        stolen_resources = {}\n        for resource, amount in defender_resources.items():\n            if amount > 0 and resource != 'user_id':\n                stolen_amount = min(amount, int(damage * 5))\n                if stolen_amount > 0:\n                    stolen_resources[resource] = stolen_amount\n                    # Remove from defender\n                    self.db.consume_resources(defender_id, {resource: stolen_amount})\n                    # Add to attacker\n                    self.db.add_resources(attacker_id, resource, stolen_amount)\n\n        # Update defender's soldiers\n        new_soldiers = max(0, defender['soldiers'] - soldier_losses)\n        self.db.update_player_income(attacker_id, defender['money'], defender['population'], new_soldiers)\n\n    def _apply_failed_attack_consequences(self, attacker_id, damage):\n        \"\"\"Apply consequences of failed attack\"\"\"\n        attacker = self.db.get_player(attacker_id)\n\n        # Attacker loses some soldiers and weapons\n        soldier_losses = min(attacker['soldiers'], int(damage * 5))\n        new_soldiers = max(0, attacker['soldiers'] - soldier_losses)\n\n        self.db.update_player_income(attacker_id, attacker['money'], attacker['population'], new_soldiers)\n\n    def _log_war(self, attacker_id, defender_id, attack_power, defense_power, result):\n        \"\"\"Log war in database\"\"\"\n        # This would be implemented to store war history\n        pass\n\n    def get_country_ranking(self):\n        \"\"\"Get ranking of all countries by power\"\"\"\n        players = self.db.get_all_players()\n        rankings = []\n\n        for player in players:\n            military_power = self.calculate_military_power(player['user_id'])\n            rankings.append({\n                'country_name': player['country_name'],\n                'military_power': military_power,\n                'population': player['population'],\n                'money': player['money']\n            })\n\n        # Sort by military power\n        rankings.sort(key=lambda x: x['military_power'], reverse=True)\n        return rankings","size_bytes":15051},"keyboards.py":{"content":"from telegram import InlineKeyboardButton, InlineKeyboardMarkup\nfrom config import Config\n\nclass Keyboards:\n    def __init__(self):\n        pass\n\n    def country_selection_keyboard(self):\n        \"\"\"Create country selection keyboard\"\"\"\n        keyboard = []\n\n        # Create buttons for all countries in rows of 2\n        countries = list(Config.COUNTRIES.items())\n        for i in range(0, len(countries), 2):\n            row = []\n            for j in range(i, min(i + 2, len(countries))):\n                country_code, country_name = countries[j]\n                button = InlineKeyboardButton(\n                    f\"{Config.COUNTRY_FLAGS.get(country_code, '🏳')} {country_name}\",\n                    callback_data=f\"select_country_{country_code}\"\n                )\n                row.append(button)\n            keyboard.append(row)\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def main_menu_keyboard(self, is_admin=False):\n        \"\"\"Create main menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"📈 اقتصاد\", callback_data=\"economy\"),\n                InlineKeyboardButton(\"⚔️ نظامی\", callback_data=\"military\")\n            ],\n            [\n                InlineKeyboardButton(\"🤝 دیپلماسی\", callback_data=\"diplomacy\"),\n                InlineKeyboardButton(\"📊 منابع\", callback_data=\"resources\")\n            ],\n            [\n                InlineKeyboardButton(\"📢 بیانیه رسمی\", callback_data=\"official_statement\")\n            ]\n        ]\n\n        if is_admin:\n            keyboard.append([\n                InlineKeyboardButton(\"👑 پنل ادمین\", callback_data=\"admin_panel\")\n            ])\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def economy_menu_keyboard(self):\n        \"\"\"Create economy menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"🏗 ساخت و ساز\", callback_data=\"buildings\"),\n                InlineKeyboardButton(\"📊 گزارش درآمد\", callback_data=\"income_report\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"main_menu\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def buildings_menu_keyboard(self):\n        \"\"\"Create buildings menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"⛏ معدن آهن - $90K\", callback_data=\"build_iron_mine\"),\n                InlineKeyboardButton(\"⛏ معدن مس - $100K\", callback_data=\"build_copper_mine\")\n            ],\n            [\n                InlineKeyboardButton(\"🛢 معدن نفت - $120K\", callback_data=\"build_oil_mine\"),\n                InlineKeyboardButton(\"🔗 معدن آلومینیوم - $150K\", callback_data=\"build_aluminum_mine\")\n            ],\n            [\n                InlineKeyboardButton(\"🏆 معدن طلا - $300K\", callback_data=\"build_gold_mine\"),\n                InlineKeyboardButton(\"☢️ معدن اورانیوم - $1M\", callback_data=\"build_uranium_mine\")\n            ],\n            [\n                InlineKeyboardButton(\"🔋 معدن لیتیوم - $180K\", callback_data=\"build_lithium_mine\"),\n                InlineKeyboardButton(\"⚫ معدن زغال - $80K\", callback_data=\"build_coal_mine\")\n            ],\n            [\n                InlineKeyboardButton(\"💥 معدن نیتر - $120K\", callback_data=\"build_nitro_mine\"),\n                InlineKeyboardButton(\"🌫 معدن گوگرد - $75K\", callback_data=\"build_sulfur_mine\")\n            ],\n            [\n                InlineKeyboardButton(\"🛡 معدن تیتانیوم - $300K\", callback_data=\"build_titanium_mine\")\n            ],\n            [\n                InlineKeyboardButton(\"🏭 کارخانه اسلحه - $15K\", callback_data=\"build_weapon_factory\"),\n                InlineKeyboardButton(\"⚡ نیروگاه - $9K\", callback_data=\"build_power_plant\")\n            ],\n            [\n                InlineKeyboardButton(\"🏭 پالایشگاه - $10K\", callback_data=\"build_refinery\"),\n                InlineKeyboardButton(\"🌾 مزرعه - $5K\", callback_data=\"build_wheat_farm\")\n            ],\n            [\n                InlineKeyboardButton(\"🪖 پادگان - $5K\", callback_data=\"build_military_base\"),\n                InlineKeyboardButton(\"🏘 مسکن - $5K\", callback_data=\"build_housing\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"economy\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def military_menu_keyboard(self):\n        \"\"\"Create military menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"🔫 تولید تسلیحات\", callback_data=\"weapons\"),\n                InlineKeyboardButton(\"⚔️ حمله\", callback_data=\"attack_menu\")\n            ],\n            [\n                InlineKeyboardButton(\"🛡 وضعیت دفاعی\", callback_data=\"defense_status\"),\n                InlineKeyboardButton(\"📊 قدرت نظامی\", callback_data=\"military_power\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"main_menu\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def weapons_menu_keyboard(self):\n        \"\"\"Create weapons production menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"🔫 سلاح‌های پایه\", callback_data=\"weapon_cat_basic\"),\n                InlineKeyboardButton(\"🛡 سیستم‌های دفاعی\", callback_data=\"weapon_cat_defense\")\n            ],\n            [\n                InlineKeyboardButton(\"🚢 تسلیحات دریایی\", callback_data=\"weapon_cat_naval\"),\n                InlineKeyboardButton(\"💣 بمب‌ها\", callback_data=\"weapon_cat_bombs\")\n            ],\n            [\n                InlineKeyboardButton(\"🚀 موشک‌های ساده\", callback_data=\"weapon_cat_missiles\"),\n                InlineKeyboardButton(\"⚡ موشک‌های مخصوص\", callback_data=\"weapon_cat_special_missiles\")\n            ],\n            [\n                InlineKeyboardButton(\"✈️ جت‌های پیشرفته\", callback_data=\"weapon_cat_advanced_jets\"),\n                InlineKeyboardButton(\"🚚 تجهیزات حمل‌ونقل\", callback_data=\"weapon_cat_transport\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"military\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def weapon_category_keyboard(self, category):\n        \"\"\"Create keyboard for specific weapon category\"\"\"\n        keyboard = []\n\n        # Get weapons in this category\n        weapons_in_category = []\n        for weapon_key, weapon_config in Config.WEAPONS.items():\n            if weapon_config.get('category') == category:\n                weapons_in_category.append(weapon_key)\n\n        # Create buttons for weapons (max 2 per row)\n        for i in range(0, len(weapons_in_category), 2):\n            row = []\n            for j in range(2):\n                if i + j < len(weapons_in_category):\n                    weapon_key = weapons_in_category[i + j]\n                    weapon_config = Config.WEAPONS.get(weapon_key, {})\n                    weapon_name = weapon_config.get('name', weapon_key)\n                    emoji = self._get_weapon_emoji(weapon_key)\n                    button_text = f\"{emoji} {weapon_name}\"\n                    callback_data = f\"select_weapon_{weapon_key}\"\n                    row.append(InlineKeyboardButton(button_text, callback_data=callback_data))\n            keyboard.append(row)\n\n        # Back button\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"weapons\")])\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def diplomacy_menu_keyboard(self, user_id):\n        \"\"\"Create diplomacy menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"⚔️ انتخاب هدف حمله\", callback_data=\"select_attack_target\"),\n                InlineKeyboardButton(\"🚚 انتقال منابع\", callback_data=\"send_resources\")\n            ],\n            [\n                InlineKeyboardButton(\"🏴‍☠️ دزدی محموله\", callback_data=\"intercept_convoys\"),\n                InlineKeyboardButton(\"📢 بیانیه رسمی\", callback_data=\"official_statement\")\n            ],\n            [\n                InlineKeyboardButton(\"🕊 پیشنهاد صلح\", callback_data=\"propose_peace\"),\n                InlineKeyboardButton(\"🤝 اتحادها\", callback_data=\"alliances\")\n            ],\n            [\n                InlineKeyboardButton(\"🛒 فروشگاه\", callback_data=\"marketplace\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت به منوی اصلی\", callback_data=\"main_menu\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def alliance_menu_keyboard(self, has_alliance=False):\n        \"\"\"Create alliance menu keyboard\"\"\"\n        if has_alliance:\n            keyboard = [\n                [\n                    InlineKeyboardButton(\"👥 اعضای اتحاد\", callback_data=\"alliance_members\"),\n                    InlineKeyboardButton(\"📨 دعوت بازیکن\", callback_data=\"alliance_invite_list\") # Changed callback\n                ],\n                [\n                    InlineKeyboardButton(\"📋 دعوت‌نامه‌ها\", callback_data=\"alliance_invitations\"),\n                    InlineKeyboardButton(\"🚪 ترک اتحاد\", callback_data=\"alliance_leave\")\n                ],\n                [\n                    InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"diplomacy\")\n                ]\n            ]\n        else:\n            keyboard = [\n                [\n                    InlineKeyboardButton(\"➕ تشکیل اتحاد\", callback_data=\"alliance_create\"),\n                    InlineKeyboardButton(\"📋 دعوت‌نامه‌ها\", callback_data=\"alliance_invitations\")\n                ],\n                [\n                    InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"diplomacy\")\n                ]\n            ]\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def marketplace_menu_keyboard(self):\n        \"\"\"Create marketplace menu keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"🛒 خرید کالا\", callback_data=\"market_browse\"),\n                InlineKeyboardButton(\"💰 فروش کالا\", callback_data=\"market_sell\")\n            ],\n            [\n                InlineKeyboardButton(\"📋 آگهی‌های من\", callback_data=\"market_my_listings\"),\n                InlineKeyboardButton(\"📊 تاریخچه خرید\", callback_data=\"market_history\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"diplomacy\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def market_categories_keyboard(self):\n        \"\"\"Create market categories keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"⚔️ تسلیحات\", callback_data=\"market_cat_weapons\"),\n                InlineKeyboardButton(\"📊 منابع\", callback_data=\"market_cat_resources\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"marketplace\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def attack_targets_keyboard(self, available_targets):\n        \"\"\"Create attack targets keyboard\"\"\"\n        keyboard = []\n\n        for target in available_targets:\n            flag = Config.COUNTRY_FLAGS.get(target['country_code'], '🏳')\n            button = InlineKeyboardButton(\n                f\"{flag} {target['country_name']}\",\n                callback_data=f\"select_target_{target['user_id']}\"\n            )\n            keyboard.append([button])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"diplomacy\")])\n        return InlineKeyboardMarkup(keyboard)\n\n    def attack_type_selection_keyboard(self, target_id):\n        \"\"\"Create attack type selection keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"⚔️ حمله معمولی\", callback_data=f\"attack_type_{target_id}_normal\"),\n                InlineKeyboardButton(\"💥 حمله سنگین\", callback_data=f\"attack_type_{target_id}_heavy\")\n            ],\n            [\n                InlineKeyboardButton(\"🚀 حمله موشکی\", callback_data=f\"attack_type_{target_id}_missile\"),\n                InlineKeyboardButton(\"✈️ حمله هوایی\", callback_data=f\"attack_type_{target_id}_air\")\n            ],\n            [\n                InlineKeyboardButton(\"🌊 حمله دریایی\", callback_data=f\"attack_type_{target_id}_naval\"),\n                InlineKeyboardButton(\"🔥 حمله ترکیبی\", callback_data=f\"attack_type_{target_id}_mixed\")\n            ],\n            [\n                InlineKeyboardButton(\"🏴‍☠️ فتح کشور (دفاع ×2)\", callback_data=f\"attack_type_{target_id}_conquest\")\n            ],\n            [InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"attack_menu\")]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def weapon_selection_keyboard(self, target_id, attack_type, available_weapons, selected_weapons=None):\n        \"\"\"Create keyboard for weapon selection in attack\"\"\"\n        if selected_weapons is None:\n            selected_weapons = {}\n\n        keyboard = []\n\n        # Show available weapons for attack\n        attack_weapons = []\n        for weapon_key, count in available_weapons.items():\n            if weapon_key != 'user_id' and count > 0 and weapon_key in Config.WEAPONS:\n                weapon_config = Config.WEAPONS[weapon_key]\n\n                # Skip pure transport and defense weapons  \n                if weapon_config.get('category') in ['transport', 'defense']:\n                    continue\n\n                attack_weapons.append(weapon_key)\n\n        if not attack_weapons:\n            keyboard.append([InlineKeyboardButton(\"❌ سلاح مناسب برای حمله ندارید\", callback_data=\"no_weapons\")])\n        else:\n            for weapon_key in attack_weapons[:8]:  # Show max 8 weapons\n                count = available_weapons.get(weapon_key, 0)\n                weapon_config = Config.WEAPONS[weapon_key]\n                weapon_name = weapon_config.get('name', weapon_key)\n                emoji = self._get_weapon_emoji(weapon_key)\n\n                button_text = f\"{emoji} {weapon_name} ({count})\"\n                callback_data = f\"execute_attack_{target_id}_{attack_type}_{weapon_key}\"\n\n                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])\n\n        keyboard.append([InlineKeyboardButton(\"⚔️ حمله با همه سلاح‌ها\", callback_data=f\"execute_attack_{target_id}_{attack_type}_all\")])\n        keyboard.append([InlineKeyboardButton(\"🔙 انتخاب نوع حمله\", callback_data=f\"select_target_{target_id}\")])\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def _filter_weapons_by_attack_type(self, attack_type, available_weapons):\n        \"\"\"Filter weapons based on attack type\"\"\"\n        filtered = {}\n\n        for weapon_key, count in available_weapons.items():\n            if weapon_key in Config.WEAPONS and count > 0:\n                weapon_data = Config.WEAPONS[weapon_key]\n                category = weapon_data.get('category', '')\n\n                include_weapon = False\n\n                if attack_type == \"mixed\":\n                    include_weapon = True\n                elif attack_type == \"ground\" and category in ['basic', 'ground', 'defense', 'transport']:\n                    include_weapon = True\n                elif attack_type == \"air\" and category in ['air', 'advanced_jets', 'transport']:\n                    include_weapon = True\n                elif attack_type == \"naval\" and category in ['naval', 'transport']:\n                    include_weapon = True\n                elif attack_type == \"missile\" and category in ['missiles', 'special_missiles']:\n                    include_weapon = True\n                elif attack_type == \"cyber\" and category in ['defense']:\n                    include_weapon = True\n\n                if include_weapon:\n                    filtered[weapon_key] = weapon_data\n\n        return filtered\n\n    def send_resources_targets_keyboard(self, countries):\n        \"\"\"Create send resources targets keyboard\"\"\"\n        keyboard = []\n\n        for country in countries:\n            flag = Config.COUNTRY_FLAGS.get(country.get('country_code'), '🏳')\n            button = InlineKeyboardButton(\n                f\"{flag} {country['country_name']}\",\n                callback_data=f\"send_to_{country['user_id']}\"\n            )\n            keyboard.append([button])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"diplomacy\")])\n        return InlineKeyboardMarkup(keyboard)\n\n    def resource_transfer_keyboard(self, target_id, transfer_options):\n        \"\"\"Create resource transfer options keyboard\"\"\"\n        keyboard = []\n\n        for option_code, option_text in transfer_options:\n            button = InlineKeyboardButton(\n                option_text,\n                callback_data=f\"transfer_{target_id}_{option_code}\"\n            )\n            keyboard.append([button])\n\n        # Add manual input button\n        keyboard.append([InlineKeyboardButton(\"✏️ مقدار دستی\", callback_data=f\"manual_transfer_{target_id}\")])\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"send_resources\")])\n        return InlineKeyboardMarkup(keyboard)\n\n    def back_to_main_keyboard(self):\n        \"\"\"Back to main menu keyboard\"\"\"\n        keyboard = [\n            [InlineKeyboardButton(\"🔙 بازگشت به منوی اصلی\", callback_data=\"main_menu\")]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def back_to_military_keyboard(self):\n        \"\"\"Back to military menu keyboard\"\"\"\n        keyboard = [\n            [InlineKeyboardButton(\"🔙 بازگشت به منوی نظامی\", callback_data=\"military\")]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def back_to_diplomacy_keyboard(self):\n        \"\"\"Back to diplomacy keyboard\"\"\"\n        keyboard = [[InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"diplomacy\")]]\n        return InlineKeyboardMarkup(keyboard)\n\n    def convoy_action_confirmation_keyboard(self, convoy_id, action_type, can_perform=True):\n        \"\"\"Create convoy action confirmation keyboard\"\"\"\n        keyboard = []\n\n        if can_perform:\n            if action_type == \"stop\":\n                keyboard.append([InlineKeyboardButton(\"✅ تایید توقف محموله\", callback_data=f\"confirm_convoy_stop_{convoy_id}\")])\n            elif action_type == \"steal\":\n                keyboard.append([InlineKeyboardButton(\"✅ تایید سرقت محموله\", callback_data=f\"confirm_convoy_steal_{convoy_id}\")])\n        else:\n            keyboard.append([InlineKeyboardButton(\"❌ امکان انجام عملیات نیست\", callback_data=\"convoy_info\")])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 انصراف\", callback_data=\"intercept_convoys\")])\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_panel_keyboard(self):\n        \"\"\"Create admin panel keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"📊 آمار بازی\", callback_data=\"admin_stats\"),\n                InlineKeyboardButton(\"👥 مدیریت بازیکنان\", callback_data=\"admin_players\")\n            ],\n            [\n                InlineKeyboardButton(\"📋 لاگ‌ها\", callback_data=\"admin_logs\"),\n                InlineKeyboardButton(\"🔄 ریست بازی\", callback_data=\"admin_reset\")\n            ],\n            [\n                InlineKeyboardButton(\"♾️ منابع بینهایت\", callback_data=\"admin_infinite_resources\"),\n                InlineKeyboardButton(\"🏴 ریست کشور\", callback_data=\"admin_country_reset\")\n            ],\n            [\n                InlineKeyboardButton(\"🎁 هدیه به کشورها\", callback_data=\"admin_give_items\"),\n                InlineKeyboardButton(\"⚖️ جریمه بازیکنان\", callback_data=\"admin_penalties\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 منوی اصلی\", callback_data=\"main_menu\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_players_keyboard(self, players):\n        \"\"\"Create admin players management keyboard\"\"\"\n        keyboard = []\n\n        for player in players[:10]:  # Show max 10 players\n            flag = Config.COUNTRY_FLAGS.get(player['country_code'], '🏳')\n            button = InlineKeyboardButton(\n                f\"{flag} {player['country_name']}\",\n                callback_data=f\"admin_player_{player['user_id']}\"\n            )\n            keyboard.append([button])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 پنل ادمین\", callback_data=\"admin_panel\")])\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_player_actions_keyboard(self, user_id):\n        \"\"\"Create admin actions keyboard for specific player\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"💰 اضافه کردن پول\", callback_data=f\"admin_add_money_{user_id}\"),\n                InlineKeyboardButton(\"📊 نمایش کامل\", callback_data=f\"admin_view_{user_id}\")\n            ],\n            [\n                InlineKeyboardButton(\"🎁 هدیه آیتم\", callback_data=f\"admin_give_to_{user_id}\"),\n                InlineKeyboardButton(\"❌ حذف بازیکن\", callback_data=f\"admin_delete_{user_id}\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_players\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_give_items_keyboard(self):\n        \"\"\"Create admin give items keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"💰 پول\", callback_data=\"admin_give_all_to_money_1000000\"),\n                InlineKeyboardButton(\"🔩 آهن\", callback_data=\"admin_give_all_to_iron_50000\")\n            ],\n            [\n                InlineKeyboardButton(\"🥉 مس\", callback_data=\"admin_give_all_to_copper_30000\"),\n                InlineKeyboardButton(\"🛢 نفت\", callback_data=\"admin_give_all_to_oil_25000\")\n            ],\n            [\n                InlineKeyboardButton(\"🔗 آلومینیوم\", callback_data=\"admin_give_all_to_aluminum_20000\"),\n                InlineKeyboardButton(\"🏆 طلا\", callback_data=\"admin_give_all_to_gold_10000\")\n            ],\n            [\n                InlineKeyboardButton(\"☢️ اورانیوم\", callback_data=\"admin_give_all_to_uranium_5000\"),\n                InlineKeyboardButton(\"🔋 لیتیوم\", callback_data=\"admin_give_all_to_lithium_8000\")\n            ],\n            [\n                InlineKeyboardButton(\"⚫ زغال‌سنگ\", callback_data=\"admin_give_all_to_coal_15000\"),\n                InlineKeyboardButton(\"💥 نیتر\", callback_data=\"admin_give_all_to_nitro_12000\")\n            ],\n            [\n                InlineKeyboardButton(\"🌫 گوگرد\", callback_data=\"admin_give_all_to_sulfur_10000\"),\n                InlineKeyboardButton(\"🛡 تیتانیوم\", callback_data=\"admin_give_all_to_titanium_3000\")\n            ],\n            [\n                InlineKeyboardButton(\"🔫 تفنگ\", callback_data=\"admin_give_all_to_rifle_1000\"),\n                InlineKeyboardButton(\"🚗 تانک\", callback_data=\"admin_give_all_to_tank_50\")\n            ],\n            [\n                InlineKeyboardButton(\"✈️ جنگنده\", callback_data=\"admin_give_all_to_fighter_20\"),\n                InlineKeyboardButton(\"🚁 پهپاد\", callback_data=\"admin_give_all_to_drone_30\")\n            ],\n            [\n                InlineKeyboardButton(\"🚀 جت جنگی\", callback_data=\"admin_give_all_to_jet_15\"),\n                InlineKeyboardButton(\"🚢 ناو جنگی\", callback_data=\"admin_give_all_to_warship_10\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_menu\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_give_resources_keyboard(self):\n        \"\"\"Create keyboard for giving resources\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"🔩 آهن (1000)\", callback_data=\"admin_give_iron_1000\"),\n                InlineKeyboardButton(\"🥉 مس (1000)\", callback_data=\"admin_give_copper_1000\")\n            ],\n            [\n                InlineKeyboardButton(\"🛢 نفت (1000)\", callback_data=\"admin_give_oil_1000\"),\n                InlineKeyboardButton(\"🔗 آلومینیوم (1000)\", callback_data=\"admin_give_aluminum_1000\")\n            ],\n            [\n                InlineKeyboardButton(\"🏆 طلا (100)\", callback_data=\"admin_give_gold_100\"),\n                InlineKeyboardButton(\"☢️ اورانیوم (100)\", callback_data=\"admin_give_uranium_100\")\n            ],\n            [\n                InlineKeyboardButton(\"🔋 لیتیوم (500)\", callback_data=\"admin_give_lithium_500\"),\n                InlineKeyboardButton(\"⚫ زغال‌سنگ (1000)\", callback_data=\"admin_give_coal_1000\")\n            ],\n            [\n                InlineKeyboardButton(\"💥 نیتر (500)\", callback_data=\"admin_give_nitro_500\"),\n                InlineKeyboardButton(\"🌫 گوگرد (500)\", callback_data=\"admin_give_sulfur_500\")\n            ],\n            [\n                InlineKeyboardButton(\"🛡 تیتانیوم (100)\", callback_data=\"admin_give_titanium_100\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 انتخاب دسته\", callback_data=\"admin_give_items\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_give_weapons_keyboard(self):\n        \"\"\"Create keyboard for admin weapon gifting\"\"\"\n        keyboard = []\n\n        # Basic weapons\n        keyboard.append([\n            InlineKeyboardButton(\"🔫 1000 تفنگ\", callback_data=\"admin_give_rifle_1000\"),\n            InlineKeyboardButton(\"🔫 5000 تفنگ\", callback_data=\"admin_give_rifle_5000\")\n        ])\n\n        keyboard.append([\n            InlineKeyboardButton(\"🚗 100 تانک\", callback_data=\"admin_give_tank_100\"),\n            InlineKeyboardButton(\"🚗 500 تانک\", callback_data=\"admin_give_tank_500\")\n        ])\n\n        # Aircraft\n        keyboard.append([\n            InlineKeyboardButton(\"✈️ 50 جنگنده\", callback_data=\"admin_give_fighter_50\"),\n            InlineKeyboardButton(\"🚁 100 پهپاد\", callback_data=\"admin_give_drone_100\")\n        ])\n\n        # Advanced weapons\n        keyboard.append([\n            InlineKeyboardButton(\"🚀 10 موشک\", callback_data=\"admin_give_missile_10\"),\n            InlineKeyboardButton(\"💣 5 بمب هسته‌ای\", callback_data=\"admin_give_nuclear_5\")\n        ])\n\n        # Special jets\n        keyboard.append([\n            InlineKeyboardButton(\"✈️ 1 F-22\", callback_data=\"admin_give_f22_1\"),\n            InlineKeyboardButton(\"🚀 5 موشک بالستیک\", callback_data=\"admin_give_ballistic_5\")\n        ])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_give_items\")])\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_give_money_keyboard(self):\n        \"\"\"Create keyboard for admin money gifting\"\"\"\n        keyboard = []\n\n        # Small amounts\n        keyboard.append([\n            InlineKeyboardButton(\"💰 $10,000\", callback_data=\"admin_give_money_10000\"),\n            InlineKeyboardButton(\"💰 $50,000\", callback_data=\"admin_give_money_50000\")\n        ])\n\n        # Medium amounts  \n        keyboard.append([\n            InlineKeyboardButton(\"💰 $100,000\", callback_data=\"admin_give_money_100000\"),\n            InlineKeyboardButton(\"💰 $500,000\", callback_data=\"admin_give_money_500000\")\n        ])\n\n        # Large amounts\n        keyboard.append([\n            InlineKeyboardButton(\"💰 $1,000,000\", callback_data=\"admin_give_money_1000000\"),\n            InlineKeyboardButton(\"💰 $5,000,000\", callback_data=\"admin_give_money_5000000\")\n        ])\n\n        # Very large amounts\n        keyboard.append([\n            InlineKeyboardButton(\"💰 $10,000,000\", callback_data=\"admin_give_money_10000000\"),\n            InlineKeyboardButton(\"💰 $100,000,000\", callback_data=\"admin_give_money_100000000\")\n        ])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_give_items\")])\n\n        return InlineKeyboardMarkup(keyboard)\n\n    def convoy_action_keyboard(self, convoy_id):\n        \"\"\"Create convoy action keyboard for news channel\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"⛔ توقف محموله\", callback_data=f\"convoy_stop_{convoy_id}\"),\n                InlineKeyboardButton(\"💰 سرقت محموله\", callback_data=f\"convoy_steal_{convoy_id}\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def convoy_private_confirmation_keyboard(self, convoy_id, action_type):\n        \"\"\"Create convoy confirmation keyboard for private messages\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"✅ تایید\", callback_data=f\"confirm_convoy_{action_type}_{convoy_id}\"),\n                InlineKeyboardButton(\"❌ انصراف\", callback_data=\"main_menu\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def quantity_selection_keyboard(self, item_type, item_name):\n        \"\"\"کیبورد انتخاب تعداد برای ساخت سلاح یا ساختمان\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"1 عدد\", callback_data=f\"quantity_{item_type}_{item_name}_1\"),\n                InlineKeyboardButton(\"5 عدد\", callback_data=f\"quantity_{item_type}_{item_name}_5\")\n            ],\n            [\n                InlineKeyboardButton(\"10 عدد\", callback_data=f\"quantity_{item_type}_{item_name}_10\"),\n                InlineKeyboardButton(\"25 عدد\", callback_data=f\"quantity_{item_type}_{item_name}_25\")\n            ],\n            [\n                InlineKeyboardButton(\"50 عدد\", callback_data=f\"quantity_{item_type}_{item_name}_50\"),\n                InlineKeyboardButton(\"100 عدد\", callback_data=f\"quantity_{item_type}_{item_name}_100\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"weapons\" if item_type == \"weapon\" else \"buildings\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)\n\n    def _get_weapon_emoji(self, weapon_key):\n        \"\"\"Get emoji for weapon type\"\"\"\n        weapon_emojis = {\n            'rifle': '🔫',\n            'tank': '🚗',\n            'fighter_jet': '✈️',\n            'jet': '✈️',\n            'helicopter': '🚁',\n            'drone': '🚁',\n            'warship': '🚢',\n            'submarine': '🚢',\n            'destroyer': '🚢',\n            'aircraft_carrier': '🚢',\n            'air_defense': '🛡',\n            'missile_shield': '🚀',\n            'cyber_shield': '💻',\n            'simple_bomb': '💣',\n            'nuclear_bomb': '☢️',\n            'simple_missile': '🚀',\n            'ballistic_missile': '🚀',\n            'nuclear_missile': '☢️',\n            'f22': '✈️',\n            'f35': '✈️',\n            'su57': '✈️',\n            'j20': '✈️',\n            'armored_truck': '🚚',\n            'cargo_helicopter': '🚁',\n            'cargo_plane': '✈️',\n            'stealth_transport': '🥷'\n        }\n        return weapon_emojis.get(weapon_key, '⚔️')\n\n    def alliance_invite_keyboard(self, all_players=None):\n        \"\"\"Keyboard for alliance invite options\"\"\"\n        keyboard = []\n\n        if all_players:\n            # Show list of countries to invite\n            for player in all_players[:10]:  # Limit to 10 players\n                country_flag = Config.COUNTRY_FLAGS.get(player['country_code'], '🏳')\n                country_name = player['country_name']\n                keyboard.append([\n                    InlineKeyboardButton(\n                        f\"{country_flag} {country_name}\", \n                        callback_data=f\"alliance_invite_{player['user_id']}\"\n                    )\n                ])\n        else:\n            keyboard.append([InlineKeyboardButton(\"📧 دعوت عضو جدید\", callback_data=\"alliance_invite_list\")])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"alliance_menu\")])\n        return InlineKeyboardMarkup(keyboard)\n\n    def admin_penalties_keyboard(self):\n        \"\"\"Create admin penalties keyboard\"\"\"\n        keyboard = [\n            [\n                InlineKeyboardButton(\"💰 جریمه پول\", callback_data=\"penalty_money\"),\n                InlineKeyboardButton(\"📊 جریمه منابع\", callback_data=\"penalty_resources\")\n            ],\n            [\n                InlineKeyboardButton(\"⚔️ جریمه تسلیحات\", callback_data=\"penalty_weapons\"),\n                InlineKeyboardButton(\"🏗 جریمه ساختمان\", callback_data=\"penalty_buildings\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"admin_panel\")\n            ]\n        ]\n        return InlineKeyboardMarkup(keyboard)","size_bytes":33573},"main.py":{"content":"import logging\nimport asyncio\nimport os\nfrom telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.interval import IntervalTrigger\nimport datetime\n\n# Updated database imports\nfrom database import Database\nfrom game_logic import GameLogic\nfrom keyboards import Keyboards\nfrom admin import AdminPanel\nfrom economy import Economy\nfrom news import NewsChannel\nfrom combat import CombatSystem\nfrom countries import CountryManager\nfrom config import Config\nfrom convoy import ConvoySystem\nfrom alliance import AllianceSystem\nfrom marketplace import Marketplace\n\n# Configure logging\nlogging.basicConfig(\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    level=logging.INFO\n)\nlogger = logging.getLogger(__name__)\n\nclass DragonRPBot:\n    def __init__(self):\n        self.token = os.getenv(\"TELEGRAM_BOT_TOKEN\", \"7315307921:AAHZGyLUDCR4XudiqdQCRtjYqjeODfdwChE\")\n        \n        # Initialize Database\n        self.db = Database()\n        \n        self.game_logic = GameLogic(self.db)\n        self.keyboards = Keyboards()\n        self.admin = AdminPanel(self.db)\n        self.economy = Economy(self.db)\n        self.combat = CombatSystem(self.db)\n        self.countries = CountryManager(self.db)\n        self.news = NewsChannel()\n        self.convoy = ConvoySystem(self.db)\n        self.alliance = AllianceSystem(self.db)\n        self.marketplace = Marketplace(self.db)\n        self.scheduler = AsyncIOScheduler()\n\n    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle /start command\"\"\"\n        user_id = update.effective_user.id\n        username = update.effective_user.username or update.effective_user.first_name\n\n        # Log user info for admin setup\n        logger.info(f\"User started bot - ID: {user_id}, Username: {username}\")\n\n        # Check if there's a convoy action parameter\n        if context.args and len(context.args) > 0:\n            action_param = context.args[0]\n            if action_param.startswith(\"convoy_stop_\"):\n                convoy_id = int(action_param.replace(\"convoy_stop_\", \"\"))\n                await self.handle_convoy_action_from_start(update, context, convoy_id, \"stop\")\n                return\n            elif action_param.startswith(\"convoy_steal_\"):\n                convoy_id = int(action_param.replace(\"convoy_steal_\", \"\"))\n                await self.handle_convoy_action_from_start(update, context, convoy_id, \"steal\")\n                return\n\n        # Check if user already has a country\n        player = self.db.get_player(user_id)\n        if player:\n            await self.show_main_menu(update, context)\n            return\n\n        # Show welcome message and country selection\n        welcome_text = \"\"\"🎮 خوش آمدید به جنگ جهانی - DragonRP!\n\nدر این بازی استراتژیک، شما یک کشور را کنترل می‌کنید.\nهدف: ساختن اقتصاد، تولید منابع، ایجاد ارتش و تسلط بر دیگر کشورها\n\nلطفاً کشور خود را انتخاب کنید:\"\"\"\n\n        keyboard = self.keyboards.country_selection_keyboard()\n        await update.message.reply_text(welcome_text, reply_markup=keyboard)\n\n    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle all callback queries\"\"\"\n        query = update.callback_query\n\n        try:\n            await query.answer()\n        except Exception as e:\n            logger.warning(f\"Failed to answer callback query: {e}\")\n\n        user_id = query.from_user.id\n        data = query.data\n\n        try:\n            if data.startswith(\"select_country_\"):\n                await self.handle_country_selection(query, context)\n            elif data == \"main_menu\":\n                await self.show_main_menu_callback(query, context)\n            elif data == \"economy\":\n                await self.show_economy_menu(query, context)\n            elif data == \"military\":\n                await self.show_military_menu(query, context)\n            elif data == \"diplomacy\":\n                await self.show_diplomacy_menu(query, context)\n            elif data == \"resources\":\n                await self.show_resources_menu(query, context)\n            elif data == \"buildings\":\n                await self.show_buildings_menu(query, context)\n            elif data == \"weapons\" or data == \"weapon_production\":\n                await self.show_weapons_menu(query, context)\n            elif data.startswith(\"weapon_cat_\"):\n                await self.show_weapon_category(query, context)\n            elif data.startswith(\"build_\"):\n                await self.handle_building_construction(query, context)\n            elif data.startswith(\"produce_\") or data.startswith(\"select_weapon_\"):\n                # Check if it's quantity selection or direct production\n                if data.count(\"_\") > 1:  # select_weapon_rifle format\n                    await self.show_weapon_quantity_selection(query, context)\n                else:  # produce_rifle format\n                    await self.handle_weapon_production(query, context)\n            elif data.startswith(\"select_building_\"):\n                await self.show_building_quantity_selection(query, context)\n            elif data.startswith(\"quantity_\"):\n                await self.handle_quantity_selection(query, context)\n            elif data == \"select_attack_target\":\n                await self.show_attack_targets(query, context)\n            elif data == \"attack_menu\":\n                await self.show_attack_targets(query, context)\n            elif data.startswith(\"select_target_\"):\n                await self.show_attack_type_selection(query, context)\n            elif data.startswith(\"attack_type_\"):\n                await self.show_weapon_selection_for_attack(query, context)\n            elif data.startswith(\"execute_attack_\"):\n                await self.handle_attack_execution(query, context)\n            elif data == \"send_resources\":\n                await self.show_send_resources_menu(query, context)\n            elif data == \"official_statement\":\n                await self.handle_official_statement(query, context)\n            elif data == \"income_report\":\n                await self.show_income_report(query, context)\n            elif data == \"defense_status\":\n                await self.show_defense_status(query, context)\n            elif data == \"military_power\":\n                await self.show_military_power(query, context)\n            elif data == \"propose_peace\":\n                await self.propose_peace(query, context)\n            elif data == \"intercept_convoys\":\n                await self.show_convoy_interception_menu(query, context)\n            elif data.startswith(\"send_to_\"):\n                await self.handle_resource_transfer_transport_select(query, context)\n            elif data.startswith(\"transfer_\"):\n                await self.handle_transport_selection(query, context)\n            elif data.startswith(\"use_transport_\"):\n                await self.handle_transport_selection(query, context)\n            elif data.startswith(\"convoy_\"):\n                if data.startswith(\"convoy_escort_\"):\n                    await self.handle_convoy_escort(query, context)\n                else:\n                    await self.handle_convoy_action(query, context)\n            elif data.startswith(\"confirm_convoy_\"):\n                await self.handle_convoy_confirmation(query, context)\n            elif data == \"alliances\":\n                await self.show_alliance_menu(query, context)\n            elif data.startswith(\"alliance_\"):\n                if data == \"alliance_create\":\n                    await self.handle_alliance_create(query, context)\n                elif data == \"alliance_invite\":\n                    await self.handle_alliance_invite(query, context)\n                elif data.startswith(\"alliance_invite_\"):\n                    target_id = int(data.replace(\"alliance_invite_\", \"\"))\n                    await self.process_alliance_invitation(query, context, target_id)\n                elif data == \"alliance_members\":\n                    await self.handle_alliance_members(query, context)\n                elif data == \"alliance_invitations\":\n                    await self.handle_alliance_invitations(query, context)\n                elif data == \"alliance_leave\":\n                    await self.handle_alliance_leave(query, context)\n            elif data == \"marketplace\":\n                await self.show_marketplace_menu(query, context)\n            elif data.startswith(\"market_\"):\n                await self.handle_marketplace_action(query, context)\n            elif data.startswith(\"sell_resource_\") or data.startswith(\"sell_weapon_\"):\n                await self.handle_sell_item_dialog(query, context, data)\n            elif data.startswith(\"invite_\"):\n                await self.handle_alliance_invite(query, context)\n            elif data.startswith(\"accept_inv_\"):\n                await self.handle_invitation_response(query, context, \"accept\")\n            elif data.startswith(\"reject_inv_\"):\n                await self.handle_invitation_response(query, context, \"reject\")\n            elif data.startswith(\"buy_\"):\n                await self.handle_marketplace_purchase(query, context)\n            elif data.startswith(\"sell_cat_\"):\n                await self.handle_sell_category(query, context)\n            elif data.startswith(\"remove_\"):\n                await self.handle_remove_listing(query, context)\n            elif data.startswith(\"confirm_sell_\"):\n                await self.handle_confirm_sell(query, context)\n            elif data.startswith(\"manual_transfer_\"):\n                await self.handle_manual_transfer(query, context)\n            elif data.startswith(\"manual_sell_\"):\n                await self.handle_manual_sell(query, context)\n            elif data.startswith(\"admin_give_cat_\"):\n                await self.show_admin_give_category(query, context)\n            elif data.startswith(\"penalty_money_\") or data.startswith(\"penalty_resources_\") or data.startswith(\"penalty_weapons_\"):\n                await self.admin.handle_penalty_action(query, context, data)\n            elif data.startswith(\"admin_\"):\n                await self.admin.handle_admin_action(query, context)\n            else:\n                logger.warning(f\"Unhandled callback query: {query.data}\")\n                await query.edit_message_text(\"❌ دستور نامعتبر است!\")\n\n        except Exception as e:\n            logger.error(f\"Error handling callback {data}: {e}\")\n            await query.edit_message_text(\"❌ خطایی رخ داد. لطفاً دوباره تلاش کنید.\")\n\n    async def handle_country_selection(self, query, context):\n        \"\"\"Handle country selection\"\"\"\n        user_id = query.from_user.id\n        username = query.from_user.username or query.from_user.first_name\n        country_code = query.data.replace(\"select_country_\", \"\")\n\n        # Check if country is already taken\n        if self.db.is_country_taken(country_code):\n            await query.edit_message_text(\"❌ این کشور قبلاً انتخاب شده است. لطفاً کشور دیگری انتخاب کنید.\")\n            return\n\n        # Create new player\n        success = self.db.create_player(user_id, username, country_code)\n        if success:\n            country_name = Config.COUNTRIES[country_code]\n            await query.edit_message_text(\n                f\"🎉 تبریک! شما با موفقیت کشور {country_name} را انتخاب کردید.\\n\\n\"\n                f\"جمعیت اولیه: 1,000,000 نفر\\n\"\n                f\"پول اولیه: 100,000 دلار\\n\\n\"\n                f\"حالا می‌توانید شروع به ساختن اقتصاد خود کنید!\"\n            )\n\n            # Send news to channel\n            await self.news.send_player_joined(country_name, username)\n\n            # Show main menu\n            await asyncio.sleep(2)\n            await self.show_main_menu_callback(query, context)\n        else:\n            await query.edit_message_text(\"❌ خطایی در ایجاد کشور رخ داد. لطفاً دوباره تلاش کنید.\")\n\n    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Show main menu after /start\"\"\"\n        user_id = update.effective_user.id\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await update.message.reply_text(\"❌ ابتدا باید کشور خود را انتخاب کنید. /start\")\n            return\n\n        stats = self.game_logic.get_player_stats(user_id)\n        if not stats:\n            await update.message.reply_text(\"❌ خطا در دریافت اطلاعات بازیکن\")\n            return\n\n        menu_text = f\"\"\"🏛 {stats['country_name']} - پنل مدیریت\n\n👥 جمعیت: {stats['population']:,}\n💰 پول: ${stats['money']:,}\n⚔️سربازان: {stats['soldiers']:,}\n\n📊 منابع:\n🔩 آهن: {stats['resources'].get('iron', 0):,}\n🥉 مس: {stats['resources'].get('copper', 0):,}\n🛢 نفت: {stats['resources'].get('oil', 0):,}\n🔗 آلومینیوم: {stats['resources'].get('aluminum', 0):,}\n🏆 طلا: {stats['resources'].get('gold', 0):,}\n☢️ اورانیوم: {stats['resources'].get('uranium', 0):,}\n🔋 لیتیوم: {stats['resources'].get('lithium', 0):,}\n⚫ زغال‌سنگ: {stats['resources'].get('coal', 0):,}\n💥 نیتر: {stats['resources'].get('nitro', 0):,}\n🌫 گوگرد: {stats['resources'].get('sulfur', 0):,}\n🛡 تیتانیوم: {stats['resources'].get('titanium', 0):,}\n\nانتخاب کنید:\"\"\"\n\n        is_admin = self.admin.is_admin(update.effective_user.id)\n        keyboard = self.keyboards.main_menu_keyboard(is_admin)\n        await update.message.reply_text(menu_text, reply_markup=keyboard)\n\n    async def show_main_menu_callback(self, query, context):\n        \"\"\"Show main menu from callback\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ ابتدا باید کشور خود را انتخاب کنید. /start\")\n            return\n\n        stats = self.game_logic.get_player_stats(user_id)\n        if not stats:\n            await query.edit_message_text(\"❌ خطا در دریافت اطلاعات بازیکن\")\n            return\n\n        menu_text = f\"\"\"🏛 {stats['country_name']} - پنل مدیریت\n\n👥 جمعیت: {stats['population']:,}\n💰 پول: ${stats['money']:,}\n⚔️سربازان: {stats['soldiers']:,}\n\n📊 منابع:\n🔩 آهن: {stats['resources'].get('iron', 0):,}\n🥉 مس: {stats['resources'].get('copper', 0):,}\n🛢 نفت: {stats['resources'].get('oil', 0):,}\n🔗 آلومینیوم: {stats['resources'].get('aluminum', 0):,}\n🏆 طلا: {stats['resources'].get('gold', 0):,}\n☢️ اورانیوم: {stats['resources'].get('uranium', 0):,}\n🔋 لیتیوم: {stats['resources'].get('lithium', 0):,}\n⚫ زغال‌سنگ: {stats['resources'].get('coal', 0):,}\n💥 نیتر: {stats['resources'].get('nitro', 0):,}\n🌫 گوگرد: {stats['resources'].get('sulfur', 0):,}\n🛡 تیتانیوم: {stats['resources'].get('titanium', 0):,}\n\nانتخاب کنید:\"\"\"\n\n        is_admin = self.admin.is_admin(user_id)\n        keyboard = self.keyboards.main_menu_keyboard(is_admin)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_economy_menu(self, query, context):\n        \"\"\"Show economy management menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        buildings = self.db.get_player_buildings(user_id)\n        income = self.economy.calculate_income(user_id)\n\n        menu_text = f\"\"\"📈 مدیریت اقتصاد - {player['country_name']}\n\n💰 درآمد هر 6 ساعت: ${income:,}\n\n🏗 ساختمان‌های موجود:\n⛏ معادن آهن: {buildings.get('iron_mine', 0)}\n⛏ معادن مس: {buildings.get('copper_mine', 0)}\n🛢 معادن نفت: {buildings.get('oil_mine', 0)}\n⛽ معادن گاز: {buildings.get('gas_mine', 0)}\n🔗 معادن آلومینیوم: {buildings.get('aluminum_mine', 0)}\n🏆 معادن طلا: {buildings.get('gold_mine', 0)}\n☢️ معادن اورانیوم: {buildings.get('uranium_mine', 0)}\n🔋 معادن لیتیوم: {buildings.get('lithium_mine', 0)}\n⚫ معادن زغال: {buildings.get('coal_mine', 0)}\n🥈 معادن نقره: {buildings.get('silver_mine', 0)}\n\n🏭 کارخانه اسلحه: {buildings.get('weapon_factory', 0)}\n🏭 پالایشگاه: {buildings.get('refinery', 0)}\n⚡ نیروگاه: {buildings.get('power_plant', 0)}\n🌾 مزرعه گندم: {buildings.get('wheat_farm', 0)}\n🪖 پادگان: {buildings.get('military_base', 0)}\n🏘 مسکن: {buildings.get('housing', 0)}\"\"\"\n\n        keyboard = self.keyboards.economy_menu_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_buildings_menu(self, query, context):\n        \"\"\"Show building construction menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        menu_text = f\"\"\"🏗 ساخت و ساز - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\nانتخاب کنید:\n\n⛏ معادن (تولید هر 6 ساعت):\n• معدن آهن - $90,000 (210 واحد/6ساعت، درآمد: $50K)\n• معدن مس - $100,000 (120 واحد/6ساعت، درآمد: $60K)\n• معدن نفت - $120,000 (600 واحد/6ساعت، درآمد: $60K)\n• معدن آلومینیوم - $150,000 (200 واحد/6ساعت، درآمد: $70K)\n• معدن طلا - $300,000 (18 واحد/6ساعت، درآمد: $210K)\n• معدن اورانیوم - $1,000,000 (24 واحد/6ساعت، درآمد: $100K)\n• معدن لیتیوم - $180,000 (30 واحد/6ساعت، درآمد: $100K)\n• معدن زغال‌سنگ - $80,000 (1000 واحد/6ساعت، درآمد: $10K)\n• معدن نیتر - $120,000 (600 واحد/6ساعت، درآمد: $60K)\n• معدن گوگرد - $75,000 (900 واحد/6ساعت، درآمد: $30K)\n• معدن تیتانیوم - $300,000 (18 واحد/6ساعت، درآمد: $90K)\n\n🏭 ساختمان‌های تولیدی:\n• کارخانه اسلحه - $15,000 (امکان تولید سلاح)\n• پالایشگاه نفت - $10,000 (پردازش نفت)\n• نیروگاه برق - $9,000 (تامین برق)\n• مزرعه گندم - $5,000 (+10,000 جمعیت)\n• پادگان آموزشی - $5,000 (+5,000 سرباز)\n• مسکن - $5,000 (ظرفیت: 10,000 نفر)\"\"\"\n\n        keyboard = self.keyboards.buildings_menu_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_building_construction(self, query, context):\n        \"\"\"Handle building construction\"\"\"\n        user_id = query.from_user.id\n        building_type = query.data.replace(\"build_\", \"\")\n\n        result = self.game_logic.build_structure(user_id, building_type)\n\n        # Add back button\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = [[InlineKeyboardButton(\"🔙 بازگشت به ساختمان‌ها\", callback_data=\"buildings\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        if result['success']:\n            await query.edit_message_text(\n                f\"✅ {result['message']}\\n\\n\"\n                f\"💰 پول باقی‌مانده: ${result['remaining_money']:,}\",\n                reply_markup=reply_markup\n            )\n\n            # Send news to channel only for first build\n            player = self.db.get_player(user_id)\n            if result.get('is_first_build', False):\n                await self.news.send_building_constructed(player['country_name'], result['building_name'])\n        else:\n            await query.edit_message_text(f\"❌ {result['message']}\", reply_markup=reply_markup)\n\n    async def show_military_menu(self, query, context):\n        \"\"\"Show military management menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n        logger.info(f\"Military menu for user {user_id}: rifle={weapons.get('rifle', 0)}, weapons={weapons}\")\n\n        # Count total weapons for summary\n        weapon_counts = {}\n        basic_weapons = ['missile', 'warship']\n        defense_weapons = []\n        bombs = ['simple_bomb', 'nuclear_bomb']\n        missiles = ['simple_missile', 'ballistic_missile', 'nuclear_missile', 'trident2_conventional', 'trident2_nuclear', 'satan2_conventional', 'satan2_nuclear', 'df41_nuclear', 'tomahawk_conventional', 'tomahawk_nuclear', 'kalibr_conventional']\n        jets = ['f22', 'f35', 'su57', 'j20', 'f15ex', 'su35s']\n        naval = ['submarine', 'destroyer', 'aircraft_carrier', 'patrol_ship', 'patrol_boat', 'amphibious_ship', 'aircraft_carrier_full', 'nuclear_submarine']\n        transport = ['armored_truck', 'cargo_helicopter', 'cargo_plane', 'escort_frigate', 'logistics_drone', 'heavy_transport', 'supply_ship', 'stealth_transport']\n        tanks = ['kf51_panther', 'abrams_x', 'm1e3_abrams', 't90ms_proryv', 'm1a2_abrams_sepv3']\n        advanced_defense = ['s500_defense', 'thaad_defense', 's400_defense', 'iron_dome', 'slq32_ew', 'phalanx_ciws']\n        other = []\n\n        weapon_counts['basic'] = sum(weapons.get(w, 0) for w in basic_weapons)\n        weapon_counts['defense'] = sum(weapons.get(w, 0) for w in defense_weapons + advanced_defense)\n        weapon_counts['bombs'] = sum(weapons.get(w, 0) for w in bombs)\n        weapon_counts['missiles'] = sum(weapons.get(w, 0) for w in missiles)\n        weapon_counts['jets'] = sum(weapons.get(w, 0) for w in jets)\n        weapon_counts['naval'] = sum(weapons.get(w, 0) for w in naval)\n        weapon_counts['transport'] = sum(weapons.get(w, 0) for w in transport)\n        weapon_counts['tanks'] = sum(weapons.get(w, 0) for w in tanks)\n        weapon_counts['other'] = sum(weapons.get(w, 0) for w in other)\n\n        menu_text = f\"\"\"⚔️ مدیریت نظامی - {player['country_name']}\n\n👥 جمعیت: {player['population']:,}\n⚔️سربازان: {player['soldiers']:,}\n\n🔫 خلاصه تسلیحات:\n🔫 سلاح‌های پایه: {weapon_counts['basic']:,}\n🛡 سیستم‌های دفاعی: {weapon_counts['defense']:,}\n💣 بمب‌ها: {weapon_counts['bombs']:,}\n🚀 موشک‌ها: {weapon_counts['missiles']:,}\n✈️ جنگنده‌ها: {weapon_counts['jets']:,}\n🚢 نیروی دریایی: {weapon_counts['naval']:,}\n🚚 نقل و انتقال: {weapon_counts['transport']:,}\n🛡 تانک‌های پیشرفته: {weapon_counts['tanks']:,}\n🚁 سایر: {weapon_counts['other']:,}\n\n📊 جزئیات اصلی:\n🚀 موشک: {weapons.get('missile', 0):,}\n🚢 کشتی جنگی: {weapons.get('warship', 0):,}\n💣 بمب هسته‌ای: {weapons.get('nuclear_bomb', 0):,}\n🚀 موشک بالستیک: {weapons.get('ballistic_missile', 0):,}\n🚀 Trident 2 هسته‌ای: {weapons.get('trident2_nuclear', 0):,}\n🚀 Satan 2 هسته‌ای: {weapons.get('satan2_nuclear', 0):,}\n✈️ F-22: {weapons.get('f22', 0):,}\n\nانتخاب کنید:\"\"\"\n\n        keyboard = self.keyboards.military_menu_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_weapons_menu(self, query, context):\n        \"\"\"Show weapon production categories menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        resources = self.db.get_player_resources(user_id)\n\n        menu_text = f\"\"\"🔫 تولید تسلیحات - {player['country_name']}\n\n💰 پول: ${player['money']:,}\n\n📊 منابع موجود:\n🔩 آهن: {resources['iron']:,}\n🥉 مس: {resources['copper']:,}\n🛢 نفت: {resources['oil']:,}\n🔗 آلومینیوم: {resources['aluminum']:,}\n🏆 طلا: {resources['gold']:,}\n☢️ اورانیوم: {resources['uranium']:,}\n🔋 لیتیوم: {resources['lithium']:,}\n⚫ زغال‌سنگ: {resources['coal']:,}\n💥 نیتر: {resources['nitro']:,}\n🌫 گوگرد: {resources['sulfur']:,}\n🛡 تیتانیوم: {resources['titanium']:,}\n\n💡 برای تولید تسلیحات به کارخانه اسلحه نیاز دارید!\n\n🎯 دسته‌بندی سلاح‌ها:\n• سلاح‌های پایه: تفنگ، تانک، جنگنده، پهپاد\n• بمب‌ها: بمب ساده، بمب هسته‌ای\n• موشک‌ها: موشک ساده، بالستیک، هسته‌ای\n• موشک‌های مخصوص: Trident، Satan2، DF-41، Tomahawk\n• جت‌های پیشرفته: F-22، F-35، Su-57، J-20\"\"\"\n\n        keyboard = self.keyboards.weapons_menu_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_weapon_category(self, query, context):\n        \"\"\"Show weapons in specific category\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        resources = self.db.get_player_resources(user_id)\n\n        category = query.data.replace(\"weapon_cat_\", \"\")\n\n        category_names = {\n            'basic': 'سلاح‌های پایه',\n            'defense': 'سیستم‌های دفاعی',\n            'bombs': 'بمب‌ها',\n            'missiles': 'موشک‌های ساده',\n            'special_missiles': 'موشک‌های مخصوص',\n            'advanced_jets': 'جت‌های پیشرفته',\n            'naval': 'تسلیحات دریایی'\n        }\n\n        category_name = category_names.get(category, category)\n        weapons_in_category = [\n            weapon for weapon, config in Config.WEAPONS.items()\n            if config.get('category') == category\n        ]\n\n        menu_text = f\"\"\"🔫 {category_name}\n\n💰 پول شما: ${player['money']:,}\n\n🔧 برای تولید به کارخانه اسلحه نیاز دارید!\n\n🎯 سلاح‌های موجود:\"\"\"\n\n        # Resource name mapping\n        resource_names = {\n            'iron': '🔩 آهن',\n            'copper': '🥉 مس',\n            'aluminum': '🔗 آلومینیوم',\n            'titanium': '🛡 تیتانیوم',\n            'uranium': '☢️ اورانیوم',\n            'lithium': '🔋 لیتیوم',\n            'coal': '⚫ زغال‌سنگ',\n            'nitro': '💥 نیتر',\n            'sulfur': '🌫 گوگرد',\n            'gold': '🏆 طلا'\n        }\n\n        for weapon in weapons_in_category[:6]:  # نمایش حداکثر 6 سلاح برای فضای بیشتر\n            config = Config.WEAPONS[weapon]\n            materials_text = \"\"\n\n            # Show required materials\n            if 'resources' in config:\n                materials = []\n                for resource, amount in config['resources'].items():\n                    if resource in resource_names:\n                        materials.append(f\"{resource_names[resource]}: {amount:,}\")\n                    elif resource in Config.WEAPONS:\n                        # If it's another weapon requirement\n                        weapon_name = Config.WEAPONS[resource]['name']\n                        materials.append(f\"🔫 {weapon_name}: {amount}\")\n\n                if materials:\n                    materials_text = f\"\\n   📋 مواد: {' | '.join(materials)}\"\n\n            menu_text += f\"\\n• {config['name']}: ${config['cost']:,}{materials_text}\"\n\n        keyboard = self.keyboards.weapon_category_keyboard(category)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_weapon_production(self, query, context):\n        \"\"\"Handle weapon production\"\"\"\n        parts = query.data.split('_')\n        if len(parts) < 3:\n            await query.edit_message_text(\"❌ خطا در پردازش درخواست!\")\n            return\n\n        weapon_type = '_'.join(parts[2:])  # Handle multi-part weapon names\n        user_id = query.from_user.id\n\n        # Check if weapon exists in config\n        if weapon_type not in Config.WEAPONS:\n            available_weapons = list(Config.WEAPONS.keys())[:10]\n            await query.edit_message_text(\n                f\"❌ نوع سلاح نامعتبر: {weapon_type}\\n\\n\"\n                f\"سلاح‌های موجود: {', '.join(available_weapons)}\"\n            )\n            return\n\n        weapon_config = Config.WEAPONS[weapon_type]\n        result = self.game_logic.produce_weapon(user_id, weapon_type, 1)\n\n        if result['success']:\n            weapon_name = weapon_config.get('name', weapon_type)\n\n            await query.edit_message_text(\n                f\"✅ {weapon_name} با موفقیت تولید شد!\\n\\n\"\n                f\"💰 هزینه: ${weapon_config.get('cost', 0):,}\\n\"\n                f\"💰 پول باقی‌مانده: ${result['remaining_money']:,}\",\n                reply_markup=self.keyboards.back_to_military_keyboard()\n            )\n\n            # Send news to channel only for special weapons\n            player = self.db.get_player(user_id)\n            await self.news.send_weapon_produced(player['country_name'], result['weapon_name'], 1)\n        else:\n            await query.edit_message_text(\n                f\"❌ {result['message']}\",\n                reply_markup=self.keyboards.back_to_military_keyboard()\n            )\n\n    async def show_weapon_quantity_selection(self, query, context):\n        \"\"\"Show quantity selection for weapon production\"\"\"\n        user_id = query.from_user.id\n        weapon_type = query.data.replace(\"select_weapon_\", \"\")\n\n        player = self.db.get_player(user_id)\n        weapon_config = Config.WEAPONS.get(weapon_type, {})\n\n        if not weapon_config:\n            await query.edit_message_text(\"❌ نوع سلاح نامعتبر است!\")\n            return\n\n        weapon_name = weapon_config.get('name', weapon_type)\n        weapon_cost = weapon_config.get('cost', 0)\n\n        menu_text = f\"\"\"🔫 انتخاب تعداد - {weapon_name}\n\n💰 پول شما: ${player['money']:,}\n💲 قیمت هر واحد: ${weapon_cost:,}\n\nچند عدد می‌خواهید تولید کنید؟\"\"\"\n\n        keyboard = self.keyboards.quantity_selection_keyboard(\"weapon\", weapon_type)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_building_quantity_selection(self, query, context):\n        \"\"\"Show quantity selection for building construction\"\"\"\n        user_id = query.from_user.id\n        building_type = query.data.replace(\"select_building_\", \"\")\n\n        player = self.db.get_player(user_id)\n        building_config = Config.BUILDINGS.get(building_type, {})\n\n        if not building_config:\n            await query.edit_message_text(\"❌ نوع ساختمان نامعتبر است!\")\n            return\n\n        building_name = building_config.get('name', building_type)\n        building_cost = building_config.get('cost', 0)\n\n        menu_text = f\"\"\"🏗 انتخاب تعداد - {building_name}\n\n💰 پول شما: ${player['money']:,}\n💲 قیمت هر واحد: ${building_cost:,}\n\nچند عدد می‌خواهید بسازید؟\"\"\"\n\n        keyboard = self.keyboards.quantity_selection_keyboard(\"building\", building_type)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_quantity_selection(self, query, context):\n        \"\"\"Handle quantity selection for production/construction\"\"\"\n        user_id = query.from_user.id\n        data_parts = query.data.split(\"_\")\n\n        if len(data_parts) < 4:\n            await query.edit_message_text(\"❌ داده نامعتبر!\")\n            return\n\n        # Format: quantity_type_item_amount (may have underscores in item name)\n        item_type = data_parts[1]  # weapon or building\n        quantity = int(data_parts[-1])  # amount (last part)\n        item_name = \"_\".join(data_parts[2:-1])  # everything between type and amount\n\n        if item_type == \"weapon\":\n            result = self.game_logic.produce_weapon(user_id, item_name, quantity)\n\n            if result['success']:\n                await query.edit_message_text(\n                    f\"✅ {result['message']}\\n\\n\"\n                    f\"💰 پول باقی‌مانده: ${result['remaining_money']:,}\"\n                )\n\n                # Send news to channel only for special weapons\n                player = self.db.get_player(user_id)\n                await self.news.send_weapon_produced(player['country_name'], result['weapon_name'], quantity)\n            else:\n                await query.edit_message_text(f\"❌ {result['message']}\")\n\n        elif item_type == \"building\":\n            result = self.game_logic.build_structure(user_id, item_name, quantity)\n\n            if result['success']:\n                await query.edit_message_text(\n                    f\"✅ {result['message']}\\n\\n\"\n                    f\"💰 پول باقی‌مانده: ${result['remaining_money']:,}\"\n                )\n\n                # Send news to channel\n                player = self.db.get_player(user_id)\n                await self.news.send_building_constructed(player['country_name'], result['building_name'], quantity)\n            else:\n                await query.edit_message_text(f\"❌ {result['message']}\")\n\n    async def show_diplomacy_menu(self, query, context):\n        \"\"\"Show diplomacy menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        all_countries = self.db.get_all_countries()\n        menu_text = f\"\"\"🤝 دیپلماسی - {player['country_name']}\n\n🌍 کشورهای موجود:\n\"\"\"\n\n        for country in all_countries:\n            if country['user_id'] != user_id:\n                menu_text += f\"🏴 {country['country_name']} - {country['username']}\\n\"\n\n        menu_text += \"\\n💡 قابلیت‌های دیپلماسی:\"\n        menu_text += \"\\n• ارسال منابع امن\"\n        menu_text += \"\\n• دزدی محموله‌های درحال انتقال\"\n        menu_text += \"\\n• بیانیه رسمی\"\n        menu_text += \"\\n• پیشنهاد صلح\"\n\n        menu_text += \"\\nانتخاب کنید:\"\n\n        keyboard = self.keyboards.diplomacy_menu_keyboard(user_id)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_attack_targets(self, query, context):\n        \"\"\"Show available attack targets based on distance and available weapons\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n        attacker_country = player['country_code']\n\n        # Get all countries\n        all_countries = self.db.get_all_countries()\n        available_targets = []\n\n        for target in all_countries:\n            if target['user_id'] != user_id:  # Can't attack yourself\n                target_country = target['country_code']\n\n                # Check what weapons can attack this target\n                available_weapons = Config.get_available_weapons_for_attack(\n                    attacker_country, target_country, weapons\n                )\n\n                if available_weapons:\n                    distance_type = Config.get_country_distance_type(attacker_country, target_country)\n                    target['distance_type'] = distance_type\n                    target['available_weapons_count'] = len(available_weapons)\n                    available_targets.append(target)\n\n        if not available_targets:\n            await query.edit_message_text(\n                \"⚔️ هیچ کشور قابل حمله‌ای یافت نشد!\\n\\n\"\n                \"💡 برای حمله به کشورهای مختلف نیاز دارید:\\n\"\n                \"🔫 همسایه‌ها: همه سلاح‌ها\\n\"\n                \"✈️ منطقه‌ای: جت‌ها و موشک‌ها\\n\"\n                \"🚀 بین‌قاره‌ای: فقط موشک‌های دوربرد\",\n                reply_markup=self.keyboards.back_to_military_keyboard()\n            )\n            return\n\n        menu_text = f\"⚔️ انتخاب هدف حمله - {player['country_name']}\\n\\n\"\n\n        # Group targets by distance\n        neighbors = [t for t in available_targets if t['distance_type'] == 'neighbor']\n        regional = [t for t in available_targets if t['distance_type'] == 'regional'] \n        intercontinental = [t for t in available_targets if t['distance_type'] == 'intercontinental']\n\n        if neighbors:\n            menu_text += \"🔫 همسایه‌ها (همه سلاح‌ها):\\n\"\n            for target in neighbors:\n                flag = Config.COUNTRY_FLAGS.get(target['country_code'], '🏳')\n                menu_text += f\"{flag} {target['country_name']} ({target['available_weapons_count']} نوع سلاح)\\n\"\n            menu_text += \"\\n\"\n\n        if regional:\n            menu_text += \"✈️ منطقه‌ای (جت‌ها و موشک‌ها):\\n\"\n            for target in regional:\n                flag = Config.COUNTRY_FLAGS.get(target['country_code'], '🏳')\n                menu_text += f\"{flag} {target['country_name']} ({target['available_weapons_count']} نوع سلاح)\\n\"\n            menu_text += \"\\n\"\n\n        if intercontinental:\n            menu_text += \"🚀 بین‌قاره‌ای (فقط موشک‌های دوربرد):\\n\"\n            for target in intercontinental:\n                flag = Config.COUNTRY_FLAGS.get(target['country_code'], '🏳')\n                menu_text += f\"{flag} {target['country_name']} ({target['available_weapons_count']} نوع سلاح)\\n\"\n            menu_text += \"\\n\"\n\n        menu_text += \"انتخاب کنید:\"\n\n        keyboard = self.keyboards.attack_targets_keyboard(available_targets)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_attack_type_selection(self, query, context):\n        \"\"\"Show attack type selection menu\"\"\"\n        user_id = query.from_user.id\n        target_id = int(query.data.replace(\"select_target_\", \"\"))\n\n        target = self.db.get_player(target_id)\n        if not target:\n            await query.edit_message_text(\"❌ کشور هدف یافت نشد!\")\n            return\n\n        menu_text = f\"⚔️ نوع حمله به {target['country_name']}\\n\\nنوع حمله را انتخاب کنید:\"\n\n        keyboard = self.keyboards.attack_type_selection_keyboard(target_id)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_weapon_selection_for_attack(self, query, context):\n        \"\"\"Show weapon selection for attack based on distance and range\"\"\"\n        user_id = query.from_user.id\n        data_parts = query.data.split(\"_\")\n        target_id = int(data_parts[2])\n        attack_type = data_parts[3]\n\n        # Check if this is conquest mode\n        conquest_mode = attack_type == \"conquest\"\n\n        # Get player and target information\n        player = self.db.get_player(user_id)\n        target = self.db.get_player(target_id)\n\n        if not target:\n            await query.edit_message_text(\"❌ کشور هدف یافت نشد!\")\n            return\n\n        # Get player weapons\n        player_weapons = self.db.get_player_weapons(user_id)\n\n        # Check for range extenders\n        has_tanker = player_weapons.get('tanker_aircraft', 0) > 0\n        has_carrier = player_weapons.get('aircraft_carrier_transport', 0) > 0\n\n        # Get weapons that can attack this target based on distance\n        available_weapon_types = Config.get_available_weapons_for_attack(\n            player['country_code'], target['country_code'], player_weapons, has_tanker, has_carrier\n        )\n\n        # Convert list to dictionary with quantities\n        available_weapons = {}\n        for weapon_type in available_weapon_types:\n            if weapon_type in player_weapons and player_weapons[weapon_type] > 0:\n                available_weapons[weapon_type] = player_weapons[weapon_type]\n\n        if not available_weapons:\n            distance_type = Config.get_country_distance_type(player['country_code'], target['country_code'])\n            keyboard = self.keyboards.back_to_military_keyboard()\n\n            if distance_type == 'neighbor':\n                message = f\"❌ تسلیحات کافی برای حمله به {target['country_name']} ندارید!\"\n            elif distance_type == 'regional':\n                if has_tanker or has_carrier:\n                    message = f\"❌ حتی با سوخت‌رسان/ناوبر، جت‌های شما برد کافی ندارند\"\n                else:\n                    message = f\"❌ برای حمله به {target['country_name']} نیاز به جت یا موشک دارید!\"\n            else:\n                if has_tanker or has_carrier:\n                    message = f\"❌ حتی با سوخت‌رسان/ناوبر، فاصله خیلی زیاد است\"\n                else:\n                    message = f\"❌ برای حمله به {target['country_name']} فقط موشک‌های دوربرد استفاده کنید!\"\n\n            await query.edit_message_text(message, reply_markup=keyboard)\n            return\n\n        # Display available weapons for this distance\n        distance_type = Config.get_country_distance_type(player['country_code'], target['country_code'])\n\n        menu_text = f\"⚔️ انتخاب تسلیحات برای حمله به {target['country_name']}\\n\\n\"\n\n        range_bonus_text = \"\"\n        if has_carrier and has_tanker:\n            range_bonus_text = \" (با ناوبر و سوخت‌رسان)\"\n        elif has_carrier:\n            range_bonus_text = \" (با ناوبر)\"\n        elif has_tanker:\n            range_bonus_text = \" (با سوخت‌رسان)\"\n\n        if distance_type == 'neighbor':\n            menu_text += f\"🔫 همسایه - همه سلاح‌ها قابل استفاده{range_bonus_text}:\\n\"\n        elif distance_type == 'regional':\n            menu_text += f\"✈️ منطقه‌ای - جت‌ها و موشک‌ها{range_bonus_text}:\\n\"\n        else:\n            menu_text += f\"🚀 بین‌قاره‌ای - فقط موشک‌های دوربرد{range_bonus_text}:\\n\"\n\n        # List available weapons\n        for weapon_type, quantity in available_weapons.items():\n            weapon_config = Config.WEAPONS.get(weapon_type, {})\n            weapon_name = weapon_config.get('name', weapon_type)\n            emoji = weapon_config.get('emoji', '⚔️')\n            menu_text += f\"{emoji} {weapon_name}: {quantity:,}\\n\"\n\n        menu_text += f\"\\nنوع حمله: {attack_type}\\nانتخاب کنید:\"\n\n        keyboard = self.keyboards.weapon_selection_keyboard(target_id, attack_type, available_weapons)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_attack_execution(self, query, context):\n        \"\"\"Handle actual attack execution\"\"\"\n        user_id = query.from_user.id\n        data_parts = query.data.split(\"_\")\n\n        if len(data_parts) < 4:\n            await query.edit_message_text(\"❌ داده‌های حمله نامعتبر!\")\n            return\n\n        target_id = int(data_parts[2])\n        attack_type = data_parts[3]\n        weapon_selection = data_parts[4] if len(data_parts) > 4 else \"all\"\n\n        # Check if this is conquest mode\n        conquest_mode = attack_type == \"conquest\"\n\n        attacker = self.db.get_player(user_id)\n        target = self.db.get_player(target_id)\n\n        if not target:\n            await query.edit_message_text(\"❌ کشور هدف یافت نشد!\")\n            return\n\n        # Check if attacker has any offensive weapons\n        available_weapons = self.db.get_player_weapons(user_id)\n        has_offensive_weapons = False\n        offensive_weapons = []\n\n        for weapon_type, count in available_weapons.items():\n            if weapon_type != 'user_id' and count > 0:\n                # Check if weapon exists in config\n                if weapon_type in Config.WEAPONS:\n                    weapon_config = Config.WEAPONS[weapon_type]\n                    # Skip pure transport and defense weapons\n                    if weapon_config.get('category') not in ['transport', 'defense']:\n                        has_offensive_weapons = True\n                        offensive_weapons.append(f\"{weapon_config.get('name', weapon_type)}: {count}\")\n\n        if not has_offensive_weapons:\n            await query.edit_message_text(\n                \"❌ شما هیچ سلاح تهاجمی برای حمله ندارید!\\n\\n\"\n                \"ابتدا از بخش تسلیحات، سلاح‌های تهاجمی تولید کنید.\\n\\n\"\n                f\"سلاح‌های موجود: {', '.join(offensive_weapons) if offensive_weapons else 'هیچکدام'}\"\n            )\n            return\n\n        # Execute attack\n        result = self.combat.schedule_delayed_attack(user_id, target_id, attack_type, conquest_mode)\n\n        if not result['success']:\n            await query.edit_message_text(f\"❌ {result['message']}\")\n            return\n\n        await query.edit_message_text(f\"✅ {result['message']}\")\n\n        # Send news to channel about attack preparation\n        attacker_flag = Config.COUNTRY_FLAGS.get(attacker['country_code'], '🏳')\n        target_flag = Config.COUNTRY_FLAGS.get(target['country_code'], '🏳')\n\n        mode_text = \" 🏴‍☠️ (حالت فتح)\" if conquest_mode else \"\"\n        attack_news = f\"\"\"⚔️ آماده‌سازی حمله{mode_text}!\n\n🔥 {attacker_flag} <b>{attacker['country_name']}</b>\n🎯 {target_flag} <b>{target['country_name']}</b>\n\n⏱ زمان رسیدن: {result['travel_time']} دقیقه\n🔥 نوع حمله: {attack_type}\n\n💀 جنگ در راه است...\"\"\"\n\n        await self.news.send_text_message(attack_news)\n\n    async def show_resources_menu(self, query, context):\n        \"\"\"Show resources overview menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        resources = self.db.get_player_resources(user_id)\n\n        total_value = 0\n        for resource, amount in resources.items():\n            if resource != 'user_id' and isinstance(amount, int):\n                total_value += amount * 10\n\n        menu_text = f\"\"\"📊 منابع - {player['country_name']}\n\n🔩 آهن: {resources.get('iron', 0):,}\n🥉 مس: {resources.get('copper', 0):,}\n🛢 نفت خام: {resources.get('oil', 0):,}\n⛽ گاز: {resources.get('gas', 0):,}\n🔗 آلومینیوم: {resources.get('aluminum', 0):,}\n🏆 طلا: {resources.get('gold', 0):,}\n☢️ اورانیوم: {resources.get('uranium', 0):,}\n🔋 لیتیوم: {resources.get('lithium', 0):,}\n⚫ زغال‌سنگ: {resources.get('coal', 0):,}\n🥈 نقره: {resources.get('silver', 0):,}\n⛽ سوخت: {resources.get('fuel', 0):,}\n\n📊 ارزش کل منابع: ${total_value:,}\"\"\"\n\n        keyboard = self.keyboards.back_to_main_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_send_resources_menu(self, query, context):\n        \"\"\"Show resource transfer menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        resources = self.db.get_player_resources(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        all_countries = self.db.get_all_countries()\n        other_countries = [c for c in all_countries if c['user_id'] != user_id]\n\n        if not other_countries:\n            await query.edit_message_text(\"❌ هیچ کشور دیگری برای ارسال منابع یافت نشد!\")\n            return\n\n        # Calculate estimated travel time based on transport equipment\n        # Default to 0 if no transports are present\n        transport_options = [\n            ('none', 'بدون وسیله', '🚶‍♂️'),\n            ('armored_truck', 'کامیون زرهی', '🚚'),\n            ('cargo_helicopter', 'هلیکوپتر باری', '🚁'),\n            ('cargo_plane', 'هواپیمای باری', '✈️'),\n            ('logistics_drone', 'پهپاد لجستیک', '🛸'),\n            ('heavy_transport', 'ترابری سنگین', '🚛'),\n            ('supply_ship', 'کشتی تدارکات', '🚢'),\n            ('stealth_transport', 'ترابری پنهان‌کار', '🥷')\n        ]\n\n        menu_text = f\"\"\"🚚 انتقال منابع - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n⏱ زمان انتقال تخمینی: (با توجه به انتخاب وسیله نقلیه)\n\n📊 منابع موجود:\n🔩 آهن: {resources.get('iron', 0):,}\n🥉 مس: {resources.get('copper', 0):,}\n🛢 نفت: {resources.get('oil', 0):,}\n⛽ گاز: {resources.get('gas', 0):,}\n🔗 آلومینیوم: {resources.get('aluminum', 0):,}\n🏆 طلا: {resources.get('gold', 0):,}\n☢️ اورانیوم: {resources.get('uranium', 0):,}\n🔋 لیتیوم: {resources.get('lithium', 0):,}\n\n🚛 تجهیزات حمل‌ونقل:\n🚚 کامیون زرهی: {weapons.get('armored_truck', 0)}\n🚁 هلیکوپتر باری: {weapons.get('cargo_helicopter', 0)}\n✈️ هواپیمای باری: {weapons.get('cargo_plane', 0)}\n🛸 پهپاد لجستیک: {weapons.get('logistics_drone', 0)}\n🚛 ترابری سنگین: {weapons.get('heavy_transport', 0)}\n🚢 کشتی تدارکات: {weapons.get('supply_ship', 0)}\n🥷 ترابری پنهان‌کار: {weapons.get('stealth_transport', 0)}\n\n💡 محموله در طول مسیر قابل رهگیری است!\n\nکشور مقصد را انتخاب کنید:\"\"\"\n\n        keyboard = self.keyboards.send_resources_targets_keyboard(other_countries)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_resource_transfer_transport_select(self, query, context):\n        \"\"\"Handle transport selection for resource transfer\"\"\"\n        user_id = query.from_user.id\n        target_id = int(query.data.replace(\"send_to_\", \"\"))\n\n        player = self.db.get_player(user_id)\n        target_player = self.db.get_player(target_id)\n        resources = self.db.get_player_resources(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        menu_text = f\"\"\"🚚 انتخاب وسیله نقلیه - انتقال به {target_player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\nمنابع قابل انتقال (حداکثر 1000 واحد):\n\"\"\"\n\n        available_resources_for_transfer = []\n        for resource, amount in resources.items():\n            if resource != 'user_id' and amount >= 1000:\n                resource_config = Config.RESOURCES.get(resource, {})\n                resource_name = resource_config.get('name', resource)\n                resource_emoji = resource_config.get('emoji', '📦')\n                available_resources_for_transfer.append(f\"{resource_emoji} {resource_name} ({amount:,} موجود)\")\n\n        if available_resources_for_transfer:\n            menu_text += \"\\n\" + \"\\n\".join(available_resources_for_transfer)\n        else:\n            menu_text += \"\\n❌ منابع کافی برای انتقال ندارید!\"\n\n        menu_text += \"\"\"\n\n🚛 وسایل نقلیه موجود:\"\"\"\n\n        transport_options = [\n            ('none', 'بدون وسیله', '🚶‍♂️', 0),\n            ('armored_truck', 'کامیون زرهی', '🚚', weapons.get('armored_truck', 0)),\n            ('cargo_helicopter', 'هلیکوپتر باری', '🚁', weapons.get('cargo_helicopter', 0)),\n            ('cargo_plane', 'هواپیمای باری', '✈️', weapons.get('cargo_plane', 0)),\n            ('escort_frigate', 'ناوچه اسکورت', '🚢', weapons.get('escort_frigate', 0)),\n            ('logistics_drone', 'پهپاد لجستیک', '🛸', weapons.get('logistics_drone', 0)),\n            ('heavy_transport', 'ترابری سنگین', '🚛', weapons.get('heavy_transport', 0)),\n            ('supply_ship', 'کشتی تدارکات', '🚢', weapons.get('supply_ship', 0)),\n            ('stealth_transport', 'ترابری پنهان‌کار', '🥷', weapons.get('stealth_transport', 0))\n        ]\n\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = []\n        for transport_id, transport_name, transport_emoji, count in transport_options:\n            if count > 0 or transport_id == 'none':\n                keyboard.append([InlineKeyboardButton(\n                    f\"{transport_emoji} {transport_name} ({count} موجود)\",\n                    callback_data=f\"transfer_{target_id}_{transport_id}\"\n                )])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"send_resources\")])\n        await query.edit_message_text(menu_text, reply_markup=InlineKeyboardMarkup(keyboard))\n\n\n    async def handle_transport_selection(self, query, context):\n        \"\"\"Handle the actual transport selection and resource transfer\"\"\"\n        user_id = query.from_user.id\n\n        # Handle both transfer_ and use_transport_ formats\n        if query.data.startswith(\"transfer_\"):\n            data_parts = query.data.replace(\"transfer_\", \"\").split(\"_\")\n        elif query.data.startswith(\"use_transport_\"):\n            data_parts = query.data.replace(\"use_transport_\", \"\").split(\"_\")\n        else:\n            await query.edit_message_text(\"❌ داده نامعتبر!\")\n            return\n\n        if len(data_parts) < 2:\n            await query.edit_message_text(\"❌ داده نامعتبر!\")\n            return\n\n        try:\n            target_id = int(data_parts[0])\n            transport_type = \"_\".join(data_parts[1:])  # Join all remaining parts for multi-word transport names\n        except (ValueError, IndexError):\n            await query.edit_message_text(\"❌ داده‌های نامعتبر!\", reply_markup=self.keyboards.back_to_main_keyboard())\n            return\n\n        player = self.db.get_player(user_id)\n        target = self.db.get_player(target_id)\n\n        if not player or not target:\n            await query.edit_message_text(\"❌ کشور یافت نشد!\", reply_markup=self.keyboards.back_to_main_keyboard())\n            return\n        resources = self.db.get_player_resources(user_id)\n\n        # Select 1000 units of the first available resource or money\n        transfer_resources = {}\n        transfer_description = \"\"\n        can_transfer = False\n\n        # Prioritize money if available and no other resources\n        if player['money'] >= 10000: # Use a higher threshold for money transfer as it's a different category\n            transfer_resources = {'money': 10000}\n            transfer_description = \"💰 10,000 دلار\"\n            can_transfer = True\n        else:\n            # Find the first resource with at least 1000 units\n            for resource_type, amount in resources.items():\n                if resource_type != 'user_id' and amount >= 1000:\n                    transfer_resources = {resource_type: 1000}\n                    resource_config = Config.RESOURCES.get(resource_type, {})\n                    transfer_description = f\"{resource_config.get('emoji', '📦')} 1,000 {resource_config.get('name', resource_type)}\"\n                    can_transfer = True\n                    break # Transfer only one resource type at a time\n\n        if not can_transfer:\n            await query.edit_message_text(\"❌ منابع کافی برای انتقال ندارید!\", reply_markup=self.keyboards.back_to_main_keyboard())\n            return\n\n        # Check if selected transport is available\n        if transport_type != 'none':\n            weapons = self.db.get_player_weapons(user_id)\n            available_count = weapons.get(transport_type, 0)\n            if available_count < 1:\n                # Debug info for the user - show all transport weapons for debugging\n                all_transports = {\n                    'armored_truck': weapons.get('armored_truck', 0),\n                    'cargo_helicopter': weapons.get('cargo_helicopter', 0), \n                    'cargo_plane': weapons.get('cargo_plane', 0),\n                    'escort_frigate': weapons.get('escort_frigate', 0),\n                    'logistics_drone': weapons.get('logistics_drone', 0),\n                    'heavy_transport': weapons.get('heavy_transport', 0),\n                    'supply_ship': weapons.get('supply_ship', 0),\n                    'stealth_transport': weapons.get('stealth_transport', 0)\n                }\n\n                debug_text = f\"\"\"❌ وسیله حمل‌ونقل انتخابی در دسترس نیست!\n\n🔍 جزئیات:\n• وسیله انتخابی: {transport_type}\n• تعداد موجود: {available_count}\n\n📊 تمام وسایل حمل‌ونقل شما:\n🚚 کامیون زرهی: {all_transports['armored_truck']}\n🚁 هلیکوپتر باری: {all_transports['cargo_helicopter']}\n✈️ هواپیمای باری: {all_transports['cargo_plane']}\n🚢 ناوچه اسکورت: {all_transports['escort_frigate']}\n🛸 پهپاد لجستیک: {all_transports['logistics_drone']}\n🚛 ترابری سنگین: {all_transports['heavy_transport']}\n🚢 کشتی تدارکات: {all_transports['supply_ship']}\n🥷 ترابری پنهان‌کار: {all_transports['stealth_transport']}\"\"\"\n\n                await query.edit_message_text(debug_text, reply_markup=self.keyboards.back_to_main_keyboard())\n                return\n\n        # Create convoy with selected transport (resources will be deducted automatically)\n        convoy_result = self.convoy.create_convoy_with_transport(user_id, target_id, transfer_resources, transport_type)\n\n        # Check if convoy creation was successful\n        if not convoy_result.get('success', False):\n            await query.edit_message_text(f\"❌ {convoy_result.get('message', 'خطا در ایجاد محموله!')}\", reply_markup=self.keyboards.back_to_main_keyboard())\n            return\n\n        # Get transport info\n        transport_info = {\n            'none': ('بدون وسیله', '🚶‍♂️'),\n            'armored_truck': ('کامیون زرهی', '🚚'),\n            'cargo_helicopter': ('هلیکوپتر باری', '🚁'),\n            'cargo_plane': ('هواپیمای باری', '✈️'),\n            'logistics_drone': ('پهپاد لجستیک', '🛸'),\n            'heavy_transport': ('ترابری سنگین', '🚛'),\n            'supply_ship': ('کشتی تدارکات', '🚢'),\n            'stealth_transport': ('ترابری پنهان‌کار', '🥷')\n        }.get(transport_type, ('نامشخص', '🚛'))\n\n        # Add news\n        sender_country = Config.COUNTRY_FLAGS.get(player['country_code'], '🏳') + ' ' + player['country_name']\n        receiver_country = Config.COUNTRY_FLAGS.get(target['country_code'], '🏳') + ' ' + target['country_name']\n\n        news_text = f\"\"\"🚚 انتقال منابع جدید!\n\n📤 فرستنده: {sender_country}\n📥 گیرنده: {receiver_country}\n📦 محموله: {transfer_description}\n🚛 وسیله نقلیه: {transport_info[1]} {transport_info[0]}\n🛡 سطح امنیت: {convoy_result['security_level']}%\n⏰ زمان تحویل: {convoy_result['estimated_arrival'].strftime('%H:%M')}\n\nمحموله در حال حرکت است...\"\"\"\n\n        keyboard = self.convoy.create_convoy_news_keyboard(\n            convoy_result['convoy_id'],\n            convoy_result['security_level'],\n            context.bot.username\n        )\n\n        # Send news to channel\n        await context.bot.send_message(\n            chat_id=Config.BOT_CONFIG['news_channel'],\n            text=news_text,\n            reply_markup=keyboard\n        )\n\n        success_text = f\"\"\"✅ منابع با موفقیت ارسال شد!\n\n📦 محموله: {transfer_description}\n🚛 وسیله نقلیه: {transport_info[1]} {transport_info[0]}\n🎯 مقصد: {receiver_country}\n🛡 سطح امنیت: {convoy_result['security_level']}%\n⏰ زمان رسیدن: {convoy_result['estimated_arrival'].strftime('%H:%M')}\n\nمحموله در کانال اخبار منتشر شد.\"\"\"\n\n        keyboard = self.keyboards.back_to_main_keyboard()\n        await query.edit_message_text(success_text, reply_markup=keyboard)\n\n\n\n    async def handle_convoy_action(self, query, context):\n        \"\"\"Handle convoy interception actions - show confirmation\"\"\"\n        user_id = query.from_user.id\n        action_data = query.data.replace(\"convoy_\", \"\")\n\n        if action_data.startswith(\"stop_\"):\n            convoy_id = int(action_data.replace(\"stop_\", \"\"))\n            action_type = \"stop\"\n        elif action_data.startswith(\"steal_\"):\n            convoy_id = int(action_data.replace(\"steal_\", \"\"))\n            action_type = \"steal\"\n        else:\n            await query.edit_message_text(\"❌ دستور نامعتبر!\")\n            return\n\n        # Get convoy details\n        convoy = self.db.get_convoy(convoy_id)\n        if not convoy:\n            await query.edit_message_text(\"❌ محموله یافت نشد!\")\n            return\n\n        # Check if player can intercept\n        convoy_security = convoy['security_level']\n        can_intercept = self.convoy.can_intercept_convoy(user_id, convoy_security)\n\n        # Calculate required power\n        weapons = self.db.get_player_weapons(user_id)\n        intercept_power = 0\n        intercept_power += weapons.get('fighter_jet', 0) * 30\n        intercept_power += weapons.get('drone', 0) * 25\n        intercept_power += weapons.get('simple_missile', 0) * 50\n        intercept_power += weapons.get('warship', 0) * 35\n\n        min_power_needed = convoy_security * 2\n\n        if action_type == \"stop\":\n            action_name = \"توقف محموله\"\n            description = \"محموله متوقف شده و منابع به فرستنده بازگردانده می‌شود\"\n        else:\n            action_name = \"سرقت محموله\"\n            description = \"محتویات محموله به شما انتقال پیدا می‌کند\"\n\n        confirmation_text = f\"\"\"🎯 تایید {action_name}\n\n🛡 امنیت محموله: {convoy_security}%\n⚔️ قدرت رهگیری شما: {intercept_power:,}\n📊 قدرت مورد نیاز: {min_power_needed:,}\n\n💡 {description}\n\n⚠️ در صورت شکست، بخشی از تجهیزاتتان از دست خواهد رفت!\n\nآیا مطمئن هستید؟\"\"\"\n\n        keyboard = self.keyboards.convoy_action_confirmation_keyboard(convoy_id, action_type, can_intercept)\n        await query.edit_message_text(confirmation_text, reply_markup=keyboard)\n\n    async def handle_convoy_confirmation(self, query, context):\n        \"\"\"Handle convoy action confirmation\"\"\"\n        user_id = query.from_user.id\n        action_data = query.data.replace(\"confirm_convoy_\", \"\")\n\n        if action_data.startswith(\"stop_\"):\n            convoy_id = int(action_data.replace(\"stop_\", \"\"))\n            result = self.convoy.attempt_convoy_interception(user_id, convoy_id, \"stop\")\n        elif action_data.startswith(\"steal_\"):\n            convoy_id = int(action_data.replace(\"steal_\", \"\"))\n            result = self.convoy.attempt_convoy_interception(user_id, convoy_id, \"steal\")\n        else:\n            await query.edit_message_text(\"❌ دستور نامعتبر!\")\n            return\n\n        await query.edit_message_text(f\"{'✅' if result['success'] else '❌'} {result['message']}\")\n\n        # Send news about the action result\n        await self.send_convoy_action_news(user_id, convoy_id, result)\n\n    async def handle_convoy_action_from_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, convoy_id: int, action_type: str):\n        \"\"\"Handle convoy action initiated from start command\"\"\"\n        user_id = update.effective_user.id\n\n        # Check if user has a country\n        player = self.db.get_player(user_id)\n        if not player:\n            await update.message.reply_text(\"❌ ابتدا باید کشور خود را انتخاب کنید. /start\")\n            return\n\n        # Get convoy details\n        convoy = self.db.get_convoy(convoy_id)\n        if not convoy:\n            await update.message.reply_text(\"❌ محموله یافت نشد!\")\n            return\n\n        # Check if convoy is still valid\n        if convoy['status'] != 'in_transit':\n            await update.message.reply_text(\"❌ محموله قبلاً تحویل داده شده یا متوقف شده!\")\n            return\n\n        # Check if player can intercept (including sender/receiver check)\n        convoy_security = convoy['security_level']\n        can_intercept = self.convoy.can_intercept_convoy(user_id, convoy_security, convoy_id)\n\n        if not can_intercept:\n            # Check if it's because they're sender/receiver\n            if convoy['sender_id'] == user_id or convoy['receiver_id'] == user_id:\n                await update.message.reply_text(\"❌ شما نمی‌توانید محموله خود را رهگیری کنید!\")\n            else:\n                await update.message.reply_text(\"❌ قدرت نظامی شما برای رهگیری این محموله کافی نیست!\")\n            return\n\n        # Show confirmation\n        action_name = \"توقف محموله\" if action_type == \"stop\" else \"سرقت محموله\"\n        description = \"محموله متوقف شده و منابع به فرستنده بازگردانده می‌شود\" if action_type == \"stop\" else \"محتویات محموله به شما انتقال پیدا می‌کند\"\n\n        # Calculate interception power for display\n        weapons = self.db.get_player_weapons(user_id)\n        intercept_power = (\n            weapons.get('fighter_jet', 0) * 30 +\n            weapons.get('drone', 0) * 25 +\n            weapons.get('simple_missile', 0) * 50 +\n            weapons.get('warship', 0) * 35\n        )\n\n        confirmation_text = f\"\"\"🎯 تایید {action_name}\n\n🛡 امنیت محموله: {convoy_security}%\n⚔️ قدرت رهگیری شما: {intercept_power:,}\n\n💡 {description}\n\n⚠️ در صورت شکست، بخشی از تجهیزاتتان از دست خواهد رفت!\n\nآیا مطمئن هستید؟\"\"\"\n\n        keyboard = self.keyboards.convoy_private_confirmation_keyboard(convoy_id, action_type)\n        await update.message.reply_text(confirmation_text, reply_markup=keyboard)\n\n    async def handle_convoy_escort(self, query, context):\n        \"\"\"Handle convoy escort request\"\"\"\n        user_id = query.from_user.id\n        convoy_id = int(query.data.replace(\"convoy_escort_\", \"\"))\n\n        # Get convoy details\n        convoy = self.db.get_convoy(convoy_id)\n        if not convoy:\n            await query.edit_message_text(\"❌ محموله یافت نشد!\")\n            return\n\n        # Check if convoy is still in transit\n        if convoy['status'] != 'in_transit':\n            await query.edit_message_text(\"❌ این محموله دیگر در حال حرکت نیست!\")\n            return\n\n        # Check if user can escort (not sender/receiver)\n        if convoy['sender_id'] == user_id or convoy['receiver_id'] == user_id:\n            await query.edit_message_text(\"❌ نمی‌توانید محموله خودتان را اسکورت کنید!\")\n            return\n\n        player = self.db.get_player(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        # Check available escort equipment\n        escort_equipment = {\n            'fighter_jet': weapons.get('fighter_jet', 0),\n            'tank': weapons.get('tank', 0),\n            'warship': weapons.get('warship', 0),\n            'drone': weapons.get('drone', 0)\n        }\n\n        has_equipment = any(count > 0 for count in escort_equipment.values())\n\n        if not has_equipment:\n            await query.edit_message_text(\"❌ شما تجهیزات مناسب برای اسکورت ندارید!\")\n            return\n\n        escort_text = f\"\"\"🛡 اسکورت محموله\n\n🚚 محموله #{convoy_id}\n🛡 امنیت فعلی: {convoy['security_level']}%\n\n💪 تجهیزات اسکورت شما:\n✈️ جنگنده: {escort_equipment['fighter_jet']}\n🚗 تانک: {escort_equipment['tank']}\n🚢 کشتی جنگی: {escort_equipment['warship']}\n🚁 پهپاد: {escort_equipment['drone']}\n\n⚠️ اسکورت محموله هزینه سوخت دارد!\n\nآیا می‌خواهید این محموله را اسکورت کنید؟\"\"\"\n\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = [\n            [\n                InlineKeyboardButton(\"✅ شروع اسکورت\", callback_data=f\"confirm_escort_{convoy_id}\"),\n                InlineKeyboardButton(\"❌ انصراف\", callback_data=\"main_menu\")\n            ]\n        ]\n\n        await query.edit_message_text(escort_text, reply_markup=InlineKeyboardMarkup(keyboard))\n\n    async def send_convoy_action_news(self, user_id: int, convoy_id: int, result: dict):\n        \"\"\"Send news about convoy action result\"\"\"\n        try:\n            player = self.db.get_player(user_id)\n            convoy = self.db.get_convoy(convoy_id)\n\n            if not player or not convoy:\n                return\n\n            sender = self.db.get_player(convoy['sender_id'])\n            receiver = self.db.get_player(convoy['receiver_id'])\n\n            if not sender or not receiver:\n                return\n\n            country_flag = Config.COUNTRY_FLAGS.get(player['country_code'], '🏳')\n            sender_flag = Config.COUNTRY_FLAGS.get(sender['country_code'], '🏳')\n            receiver_flag = Config.COUNTRY_FLAGS.get(receiver['country_code'], '🏳')\n\n            if result['success']:\n                if result['action'] == 'stopped':\n                    news_text = f\"\"\"🛑 توقف محموله!\n\n{country_flag} <b>{player['country_name']}</b> محموله {sender_flag} {sender['country_name']} → {receiver_flag} {receiver['country_name']} را متوقف کرد!\n\n✅ محموله با موفقیت متوقف شد\n🔄 منابع به فرستنده بازگردانده شد\"\"\"\n                else:  # stolen\n                    news_text = f\"\"\"💰 دزدی محموله!\n\n{country_flag} <b>{player['country_name']}</b> محموله {sender_flag} {sender['country_name']} → {receiver_flag} {receiver['country_name']} را دزدید!\n\n💎 محتویات محموله به دزد انتقال یافت\"\"\"\n            else:\n                news_text = f\"\"\"⚔️ تلاش ناموفق برای رهگیری!\n\n{country_flag} <b>{player['country_name']}</b> سعی کرد محموله {sender_flag} {sender['country_name']} → {receiver_flag} {receiver['country_name']} را رهگیری کند!\n\n❌ تلاش شکست خورد\n💥 بخشی از تجهیزات مهاجم از دست رفت\"\"\"\n\n            await self.news.send_text_message(news_text)\n\n        except Exception as e:\n            logger.error(f\"Error sending convoy action news: {e}\")\n\n    async def show_alliance_menu(self, query, context):\n        \"\"\"Show alliance menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        alliance = self.alliance.get_player_alliance(user_id)\n\n        if alliance:\n            menu_text = f\"\"\"🤝 اتحاد - {player['country_name']}\n\n🏛 اتحاد: {alliance['alliance_name']}\n👑 نقش: {alliance['role']}\n\nانتخاب کنید:\"\"\"\n        else:\n            menu_text = f\"\"\"🤝 اتحادها - {player['country_name']}\n\nشما عضو هیچ اتحادی نیستید.\n\nانتخاب کنید:\"\"\"\n\n        keyboard = self.keyboards.alliance_menu_keyboard(alliance is not None)\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_alliance_action(self, query, context):\n        \"\"\"Handle alliance actions\"\"\"\n        user_id = query.from_user.id\n        action = query.data.replace(\"alliance_\", \"\")\n\n        if action == \"create\":\n            await query.edit_message_text(\"نام اتحاد جدید را ارسال کنید:\")\n            context.user_data['awaiting_alliance_name'] = True\n        elif action == \"invite\":\n            await self.show_alliance_invite_menu(query, context)\n        elif action == \"members\":\n            await self.show_alliance_members(query, context)\n        elif action == \"invitations\":\n            await self.show_alliance_invitations(query, context)\n        elif action == \"leave\":\n            result = self.alliance.leave_alliance(user_id)\n            await query.edit_message_text(f\"{'✅' if result['success'] else '❌'} {result['message']}\")\n        else:\n            await query.edit_message_text(\"❌ دستور نامعتبر!\")\n\n    async def show_defense_status(self, query, context):\n        \"\"\"Show defense status\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        # Calculate defense power\n        defense_power = self.combat.calculate_defense_power(user_id)\n\n        defense_text = f\"\"\"🛡 وضعیت دفاعی - {player['country_name']}\n\n💪 قدرت دفاع کل: {defense_power:,}\n\n🛡 سیستم‌های دفاعی:\n🛡 پدافند S-500: {weapons.get('s500_defense', 0)}\n🛡 پدافند THAAD: {weapons.get('thaad_defense', 0)}\n🛡 پدافند S-400: {weapons.get('s400_defense', 0)}\n🛡 پدافند Iron Dome: {weapons.get('iron_dome', 0)}\n🛡 پدافند SLQ-32: {weapons.get('slq32_ew', 0)}\n🛡 توپخانه Phalanx: {weapons.get('phalanx_ciws', 0)}\n\n💡 سیستم‌های دفاعی از کشور شما در برابر حملات محافظت می‌کنند.\"\"\"\n\n        keyboard = self.keyboards.back_to_military_keyboard()\n        await query.edit_message_text(defense_text, reply_markup=keyboard)\n\n    async def show_military_power(self, query, context):\n        \"\"\"Show military power calculation\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        weapons = self.db.get_player_weapons(user_id)\n\n        # Calculate total military power\n        total_power = self.combat.calculate_military_power(user_id)\n\n        power_text = f\"\"\"⚔️ قدرت نظامی - {player['country_name']}\n\n👥 جمعیت: {player['population']:,}\n⚔️سربازان: {player['soldiers']:,}\n💪 قدرت کل: {total_power:,}\n\n🔫 تسلیحات:\n🚀 موشک: {weapons.get('missile', 0)}\n🚢 کشتی جنگی: {weapons.get('warship', 0)}\n🛡 پدافند S-500: {weapons.get('s500_defense', 0)}\n🛡 پدافند THAAD: {weapons.get('thaad_defense', 0)}\n🛡 پدافند S-400: {weapons.get('s400_defense', 0)}\"\"\"\n\n        keyboard = self.keyboards.back_to_military_keyboard()\n        await query.edit_message_text(power_text, reply_markup=keyboard)\n\n    async def show_alliance_invite_menu(self, query, context):\n        \"\"\"Show alliance invite menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n        alliance = self.alliance.get_player_alliance(user_id)\n\n        if not alliance or alliance['role'] not in ['leader', 'officer']:\n            await query.edit_message_text(\"❌ شما اجازه دعوت کردن ندارید!\")\n            return\n\n        invite_text = f\"\"\"🤝 دعوت به اتحاد - {alliance['alliance_name']}\n\nلطفاً ID کاربری کشوری که می‌خواهید دعوت کنید را ارسال کنید.\"\"\"\n\n        await query.edit_message_text(invite_text)\n        context.user_data['awaiting_alliance_invite'] = True\n\n    async def show_alliance_members(self, query, context):\n        \"\"\"Show alliance members\"\"\"\n        user_id = query.from_user.id\n        alliance = self.alliance.get_player_alliance(user_id)\n\n        if not alliance:\n            await query.edit_message_text(\"❌ شما عضو هیچ اتحادی نیستید!\")\n            return\n\n        members = self.alliance.get_alliance_members(alliance['alliance_id'])\n\n        members_text = f\"\"\"👥 اعضای اتحاد - {alliance['alliance_name']}\n\n\"\"\"\n\n        for member in members:\n            role_emoji = \"👑\" if member['role'] == 'leader' else \"⭐\" if member['role'] == 'officer' else \"👤\"\n            members_text += f\"{role_emoji} {member['country_name']} ({member['role']})\\n\"\n\n        keyboard = self.keyboards.back_to_alliance_keyboard()\n        await query.edit_message_text(members_text, reply_markup=keyboard)\n\n    async def show_alliance_invitations(self, query, context):\n        \"\"\"Show pending alliance invitations\"\"\"\n        user_id = query.from_user.id\n        invitations = self.alliance.get_pending_invitations(user_id)\n\n        if not invitations:\n            await query.edit_message_text(\"📭 شما هیچ دعوت‌نامه‌ای ندارید!\")\n            return\n\n        invite_text = \"📬 دعوت‌نامه‌های شما:\\n\\n\"\n\n        for invite in invitations:\n            invite_text += f\"🏛 {invite['alliance_name']}\\n\"\n            invite_text += f\"📨 از: {invite['inviter_country']}\\n\\n\"\n\n        keyboard = self.keyboards.back_to_alliance_keyboard()\n        await query.edit_message_text(invite_text, reply_markup=keyboard)\n\n    async def show_marketplace_menu(self, query, context):\n        \"\"\"Show marketplace menu\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        menu_text = f\"\"\"🛒 فروشگاه - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\nدر فروشگاه می‌توانید:\n• کالاهای دیگران را خریداری کنید\n• اقلام خود را برای فروش عرضه کنید\n• امنیت بالاتر = احتمال تحویل بیشتر\n\nانتخاب کنید:\"\"\"\n\n        keyboard = self.keyboards.marketplace_menu_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_marketplace_action(self, query, context):\n        \"\"\"Handle marketplace actions\"\"\"\n        user_id = query.from_user.id\n        action = query.data.replace(\"market_\", \"\")\n\n        if action == \"browse\":\n            await self.show_market_categories(query, context)\n        elif action == \"sell\":\n            await self.show_sell_categories(query, context)\n        elif action == \"my_listings\":\n            await self.show_my_listings(query, context)\n        elif action == \"history\":\n            await self.show_purchase_history(query, context)\n        elif action.startswith(\"cat_\"):\n            category = action.replace(\"cat_\", \"\")\n            await self.show_market_listings(query, context, category)\n        elif action.startswith(\"sell_resource_\") or action.startswith(\"sell_weapon_\"):\n            await self.handle_sell_item_dialog(query, context, action)\n        else:\n            await query.edit_message_text(\"❌ دستور نامعتبر!\")\n\n    async def show_market_categories(self, query, context):\n        \"\"\"Show market categories for browsing\"\"\"\n        menu_text = \"\"\"🛒 دسته‌بندی کالاها\n\nکدام دسته را می‌خواهید مرور کنید؟\"\"\"\n\n        keyboard = self.keyboards.market_categories_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def show_market_listings(self, query, context, category):\n        \"\"\"Show market listings for specific category\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        listings = self.marketplace.get_listings_by_category(category)\n\n        if not listings:\n            await query.edit_message_text(\n                f\"\"\"🛒 فروشگاه - {category}\n\n❌ هیچ کالایی در این دسته یافت نشد!\n\n💡 بعداً دوباره بررسی کنید.\"\"\"\n            )\n            return\n\n        menu_text = f\"\"\"🛒 فروشگاه - {category}\n\n💰 پول شما: ${player['money']:,}\n\n📦کالاهای موجود:\"\"\"\n\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = []\n\n        for listing in listings[:10]:  # Show first 10 listings\n            try:\n                seller_country = listing.get('seller_country', 'نامشخص')\n                item_type = listing.get('item_type', 'unknown')\n                item_category = listing.get('item_category', 'unknown')\n                quantity = listing.get('quantity', 0)\n                price_per_unit = listing.get('price_per_unit', 0)\n                total_price = listing.get('total_price', 0)\n                security_level = listing.get('security_level', 50)\n                listing_id = listing.get('id', 0)\n\n                item_emoji = '📦'\n                if item_category == 'weapon':\n                    item_emoji = {\n                        'rifle': '🔫', 'tank': '🚗', 'fighter_jet': '✈️',\n                        'drone': '🚁', 'missile': '🚀', 'warship': '🚢',\n                        'air_defense': '🛡', 'missile_shield': '🚀', 'cyber_shield': '💻'\n                    }.get(item_type, '⚔️')\n                elif item_category == 'resource':\n                    from config import Config\n                    resource_config = Config.RESOURCES.get(item_type, {})\n                    item_emoji = resource_config.get('emoji', '📦')\n\n                # Calculate delivery success chance\n                delivery_chance = min(max(security_level + 30, 70), 95)\n\n                if delivery_chance >= 90:\n                    delivery_status = \"🟢 بالا\"\n                elif delivery_chance >= 80:\n                    delivery_status = \"🟡 متوسط\"\n                else:\n                    delivery_status = \"🔴 پایین\"\n\n                menu_text += f\"\"\"\n{item_emoji} {item_type} x{quantity:,}\n💰 ${price_per_unit:,} واحد (کل: ${total_price:,})\nفروشنده: {seller_country}\n🛡 امنیت: {security_level}% | شانس تحویل: {delivery_status} ({delivery_chance}%)\"\"\"\n\n                # Create safe button text and callback data\n                button_text = f\"{item_emoji} خرید {item_type} - ${total_price:,}\"\n                if len(button_text) > 64:  # Telegram button text limit\n                    button_text = f\"{item_emoji} خرید - ${total_price:,}\"\n\n                callback_data = f\"buy_{listing_id}\"\n                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])\n\n            except Exception as e:\n                logger.error(f\"Error processing listing {listing}: {e}\")\n                continue\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"market_browse\")])\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        await query.edit_message_text(menu_text, reply_markup=reply_markup)\n\n    async def show_purchase_history(self, query, context):\n        \"\"\"Show user's purchase history\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        transactions = self.marketplace.get_buyer_transactions(user_id, 10)\n\n        if not transactions:\n            await query.edit_message_text(\n                f\"\"\"📊 تاریخچه خرید - {player['country_name']}\n\n❌ شما هنوز هیچ خریدی انجام نداده‌اید!\n\n💡 از بخش \"خرید کالا\" اولین خرید خود را انجام دهید.\"\"\",\n                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"marketplace\")]])\n            )\n            return\n\n        menu_text = f\"\"\"📊 تاریخچه خرید - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\n📦 آخرین خریدهای شما:\"\"\"\n\n        for transaction in transactions:\n            status_emoji = {\n                'delivered': '✅', \n                'failed': '❌', \n                'pending': '⏳'\n            }.get(transaction['status'], '❓')\n\n            status_text = {\n                'delivered': 'تحویل شد',\n                'failed': 'ناموفق',\n                'pending': 'در انتظار'\n            }.get(transaction['status'], 'نامشخص')\n\n            item_emoji = '📦'\n            if transaction['item_type'] in ['rifle', 'tank', 'fighter_jet', 'drone', 'missile', 'warship']:\n                item_emoji = {\n                    'rifle': '🔫', 'tank': '🚗', 'fighter_jet': '✈️',\n                    'drone': '🚁', 'missile': '🚀', 'warship': '🚢'\n                }.get(transaction['item_type'], '⚔️')\n\n            menu_text += f\"\"\"\n\n{status_emoji} {item_emoji} {transaction['item_type']} x{transaction['quantity']:,}\n💰 ${transaction['total_paid']:,} از {transaction['seller_country']}\n📅 {transaction['transaction_date'][:16]} - {status_text}\"\"\"\n\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = [[InlineKeyboardButton(\"🔙 بازگشت به فروشگاه\", callback_data=\"marketplace\")]]\n        await query.edit_message_text(menu_text, reply_markup=InlineKeyboardMarkup(keyboard))\n\n    async def show_sell_categories(self, query, context):\n        \"\"\"Show selling categories\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        menu_text = f\"\"\"💰 فروش کالا - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\nکدام نوع کالا را می‌خواهید بفروشید؟\"\"\"\n\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = [\n            [\n                InlineKeyboardButton(\"⚔️ تسلیحات\", callback_data=\"sell_cat_weapons\"),\n                InlineKeyboardButton(\"📊 منابع\", callback_data=\"sell_cat_resources\")\n            ],\n            [\n                InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"marketplace\")\n            ]\n        ]\n\n        await query.edit_message_text(menu_text, reply_markup=InlineKeyboardMarkup(keyboard))\n\n    async def show_my_listings(self, query, context):\n        \"\"\"Show player's marketplace listings\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        listings = self.marketplace.get_player_listings(user_id)\n\n        if not listings:\n            await query.edit_message_text(\n                f\"\"\"📋 آگهی‌های من - {player['country_name']}\n\n❌ شما هیچ آگهی فروشی ندارید!\n\n💡 از بخش \"فروش کالا\" آگهی جدید ثبت کنید.\"\"\"\n            )\n            return\n\n        menu_text = f\"\"\"📋 آگهی‌های من - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\n📦 آگهی‌های شما:\"\"\"\n\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = []\n\n        for listing in listings:\n            status_emoji = {\n                'active': '🟢', 'sold_out': '🔴', 'cancelled': '⚫'\n            }.get(listing['status'], '🔘')\n\n            item_emoji = '📦'\n            if listing['item_category'] == 'weapon':\n                item_emoji = {\n                    'rifle': '🔫', 'tank': '🚗', 'fighter_jet': '✈️',\n                    'drone': '🚁', 'missile': '🚀', 'warship': '🚢'\n                }.get(listing['item_type'], '⚔️')\n            elif listing['item_category'] == 'resource':\n                from config import Config\n                resource_config = Config.RESOURCES.get(listing['item_type'], {})\n                item_emoji = resource_config.get('emoji', '📦')\n\n            menu_text += f\"\"\"\n{status_emoji} {item_emoji} {listing['item_type']} x{listing['quantity']:,}\n💰 ${listing['price_per_unit']:,}/unit (Total: ${listing['total_price']:,})\n🛡 Security: {listing['security_level']}%\n📅 {listing['created_at'][:10]}\"\"\"\n\n            if listing['status'] == 'active':\n                keyboard.append([InlineKeyboardButton(f\"❌ Cancel {listing['item_type']}\", callback_data=f\"remove_{listing['id']}\")])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"marketplace\")])\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        await query.edit_message_text(menu_text, reply_markup=reply_markup)\n\n    async def handle_alliance_invite(self, query, context):\n        \"\"\"Handle alliance invitation\"\"\"\n        user_id = query.from_user.id\n\n        # Check if player has alliance and can invite\n        alliance = self.alliance.get_player_alliance(user_id)\n        if not alliance:\n            await query.edit_message_text(\"❌ شما عضو هیچ اتحادی نیستید!\")\n            return\n\n        if alliance['role'] not in ['leader', 'officer']:\n            await query.edit_message_text(\"❌ شما اجازه دعوت کردن ندارید!\")\n            return\n\n        # Get all countries to invite\n        all_players = self.db.get_all_players()\n        available_players = [p for p in all_players if p['user_id'] != user_id]\n\n        if not available_players:\n            await query.edit_message_text(\"❌ هیچ کشور دیگری برای دعوت یافت نشد!\")\n            return\n\n        # Create keyboard with countries\n        keyboard = []\n        for player in available_players[:20]:  # Limit to 20 players\n            flag = Config.COUNTRY_FLAGS.get(player['country_code'], '🏳')\n            button = InlineKeyboardButton(\n                f\"{flag} {player['country_name']}\",\n                callback_data=f\"alliance_invite_{player['user_id']}\"\n            )\n            keyboard.append([button])\n\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"alliances\")])\n\n        await query.edit_message_text(\n            \"👥 انتخاب کشور برای دعوت:\\n\\n\"\n            \"کشوری را که می‌خواهید به اتحاد دعوت کنید انتخاب کنید:\",\n            reply_markup=InlineKeyboardMarkup(keyboard)\n        )\n\n    async def process_alliance_invitation(self, query, context, target_id):\n        \"\"\"Process alliance invitation to specific player\"\"\"\n        user_id = query.from_user.id\n\n        result = self.alliance.invite_to_alliance(user_id, target_id)\n\n        await query.edit_message_text(\n            f\"{'✅' if result['success'] else '❌'} {result['message']}\",\n            reply_markup=self.keyboards.back_to_diplomacy_keyboard()\n        )\n\n    async def handle_alliance_leave(self, query, context):\n        \"\"\"Handle leaving alliance\"\"\"\n        user_id = query.from_user.id\n\n        result = self.alliance.leave_alliance(user_id)\n\n        await query.edit_message_text(\n            f\"{'✅' if result['success'] else '❌'} {result['message']}\",\n            reply_markup=self.keyboards.back_to_diplomacy_keyboard()\n        )\n\n    async def handle_invitation_response(self, query, context, response):\n        \"\"\"Handle alliance invitation response\"\"\"\n        user_id = query.from_user.id\n        invitation_id = int(query.data.replace(f\"{response}_inv_\", \"\"))\n\n        result = self.alliance.respond_to_invitation(user_id, invitation_id, response)\n        await query.edit_message_text(f\"{'✅' if result['success'] else '❌'} {result['message']}\")\n\n    async def show_income_report(self, query, context):\n        \"\"\"Show detailed income report\"\"\"\n        user_id = query.from_user.id\n        player = self.db.get_player(user_id)\n\n        if not player:\n            await query.edit_message_text(\"❌ بازیکن یافت نشد!\")\n            return\n\n        report = self.economy.get_income_report(user_id)\n        keyboard = self.keyboards.back_to_main_keyboard()\n        await query.edit_message_text(report, reply_markup=keyboard)\n\n    async def show_convoy_interception_menu(self, query, context):\n        \"\"\"Show convoy interception menu\"\"\"\n        user_id = query.from_user.id\n        active_convoys = self.convoy.get_active_convoys()\n\n        if not active_convoys:\n            menu_text = \"❌ هیچ محموله‌ای در حال حرکت نیست!\"\n            keyboard = self.keyboards.back_to_main_keyboard()\n            await query.edit_message_text(menu_text, reply_markup=keyboard)\n            return\n\n        menu_text = \"🚚 محموله‌های در حال حرکت:\\n\\n\"\n\n        for convoy in active_convoys:\n            if convoy['sender_id'] != user_id and convoy['receiver_id'] != user_id:\n                menu_text += f\"🆔 {convoy['id']} - از {convoy['sender_country']} به {convoy['receiver_country']}\\n\"\n                menu_text += f\"🛡 امنیت: {convoy['security_level']}%\\n\\n\"\n\n        keyboard = self.keyboards.back_to_main_keyboard()\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_marketplace_purchase(self, query, context):\n        \"\"\"Handle marketplace purchase\"\"\"\n        try:\n            user_id = query.from_user.id\n            callback_data = query.data\n\n            # Extract listing ID from callback data\n            if not callback_data.startswith(\"buy_\"):\n                await query.edit_message_text(\"❌ داده نامعتبر!\")\n                return\n\n            listing_id_str = callback_data.replace(\"buy_\", \"\")\n            if not listing_id_str.isdigit():\n                await query.edit_message_text(\"❌ شناسه کالا نامعتبر!\")\n                return\n\n            listing_id = int(listing_id_str)\n\n            # Check if listing exists\n            listing = self.marketplace.get_listing(listing_id)\n            if not listing:\n                await query.edit_message_text(\"❌ کالا یافت نشد!\")\n                return\n\n            result = self.marketplace.purchase_item(user_id, listing_id, 1)\n\n            if result['success'] and result.get('is_first_purchase', False):\n                # Send convoy news only for first purchases\n                try:\n                    await self.news.send_marketplace_purchase(result)\n                except:\n                    pass  # Don't fail purchase if news fails\n\n            # Add back button\n            from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n            keyboard = [[InlineKeyboardButton(\"🔙 بازگشت به فروشگاه\", callback_data=\"marketplace\")]]\n            reply_markup = InlineKeyboardMarkup(keyboard)\n\n            await query.edit_message_text(\n                f\"{'✅' if result['success'] else '❌'} {result['message']}\",\n                reply_markup=reply_markup\n            )\n\n        except ValueError:\n            await query.edit_message_text(\"❌ شناسه کالا نامعتبر!\")\n        except Exception as e:\n            logger.error(f\"Error in marketplace purchase: {e}\")\n            await query.edit_message_text(\"❌ خطایی در خرید رخ داد! لطفاً دوباره تلاش کنید.\")\n\n    async def handle_sell_category(self, query, context):\n        \"\"\"Handle sell category selection\"\"\"\n        user_id = query.from_user.id\n        category = query.data.replace(\"sell_cat_\", \"\")\n\n        # Show player's items for selling in this category\n        player = self.db.get_player(user_id)\n\n        if category == \"resources\":\n            resources = self.db.get_player_resources(user_id)\n            items_text = f\"\"\"📊 فروش منابع - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\nمنابع قابل فروش:\"\"\"\n\n            sellable_resources = []\n            for resource, amount in resources.items():\n                if resource != 'user_id' and amount >= 100:\n                    from config import Config\n                    resource_config = Config.RESOURCES.get(resource, {})\n                    resource_name = resource_config.get('name', resource)\n                    resource_emoji = resource_config.get('emoji', '📦')\n                    sellable_resources.append(f\"{resource_emoji} {resource_name}: {amount:,}\")\n\n            if sellable_resources:\n                items_text += \"\\n\" + \"\\n\".join(sellable_resources)\n\n                # Add sell buttons for each resource\n                from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n                keyboard = []\n                for resource, amount in resources.items():\n                    if resource != 'user_id' and amount >= 100:\n                        resource_config = Config.RESOURCES.get(resource, {})\n                        resource_name = resource_config.get('name', resource)\n                        resource_emoji = resource_config.get('emoji', '📦')\n                        keyboard.append([InlineKeyboardButton(\n                            f\"💰 فروش {resource_emoji} {resource_name}\",\n                            callback_data=f\"sell_resource_{resource}\"\n                        )])\n\n                keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"market_sell\")])\n                await query.edit_message_text(items_text, reply_markup=InlineKeyboardMarkup(keyboard))\n                return\n            else:\n                items_text += \"\\n❌ منابع کافی برای فروش ندارید!\"\n\n        elif category == \"weapons\":\n            weapons = self.db.get_player_weapons(user_id)\n            items_text = f\"\"\"⚔️ فروش تسلیحات - {player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\nتسلیحات قابل فروش:\"\"\"\n\n            sellable_weapons = []\n            for weapon, amount in weapons.items():\n                if weapon != 'user_id' and amount >= 1:\n                    weapon_emoji = {\n                        'rifle': '🔫', 'tank': '🚗', 'fighter_jet': '✈️',\n                        'drone': '🚁', 'missile': '🚀', 'warship': '🚢'\n                    }.get(weapon, '⚔️')\n                    sellable_weapons.append(f\"{weapon_emoji} {weapon}: {amount:,}\")\n\n            if sellable_weapons:\n                items_text += \"\\n\" + \"\\n\".join(sellable_weapons)\n\n                # Add sell buttons for each weapon\n                from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n                keyboard = []\n                for weapon, amount in weapons.items():\n                    if weapon != 'user_id' and amount >= 1:\n                        weapon_emoji = {\n                            'rifle': '🔫', 'tank': '🚗', 'fighter_jet': '✈️',\n                            'drone': '🚁', 'missile': '🚀', 'warship': '🚢'\n                        }.get(weapon, '⚔️')\n                        keyboard.append([InlineKeyboardButton(\n                            f\"💰 فروش {weapon_emoji} {weapon}\",\n                            callback_data=f\"sell_weapon_{weapon}\"\n                        )])\n\n                keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"marketplace\")])\n                await query.edit_message_text(items_text, reply_markup=InlineKeyboardMarkup(keyboard))\n                return\n            else:\n                items_text += \"\\n❌ تسلیحات کافی for sale ندارید!\"\n\n        await query.edit_message_text(items_text)\n\n    async def handle_sell_item_dialog(self, query, context, action):\n        \"\"\"Handle sell item dialog to get quantity and price\"\"\"\n        user_id = query.from_user.id\n\n        if action.startswith(\"sell_resource_\"):\n            item_type = action.replace(\"sell_resource_\", \"\")\n            item_category = \"resources\"\n            resources = self.db.get_player_resources(user_id)\n            available_amount = resources.get(item_type, 0)\n\n            from config import Config\n            resource_config = Config.RESOURCES.get(item_type, {})\n            item_name = resource_config.get('name', item_type)\n            item_emoji = resource_config.get('emoji', '📦')\n            suggested_price = resource_config.get('market_value', 10)\n\n        elif action.startswith(\"sell_weapon_\"):\n            item_type = action.replace(\"sell_weapon_\", \"\")\n            item_category = \"weapons\"\n            weapons = self.db.get_player_weapons(user_id)\n            available_amount = weapons.get(item_type, 0)\n\n            weapon_emojis = {\n                'rifle': '🔫', 'tank': '🚗', 'fighter_jet': '✈️',\n                'drone': '🚁', 'missile': '🚀', 'warship': '🚢'\n            }\n            item_emoji = weapon_emojis.get(item_type, '⚔️')\n            item_name = item_type.replace('_', ' ').title()\n            suggested_price = {'rifle': 50, 'tank': 5000, 'fighter_jet': 25000,\n                             'drone': 15000, 'missile': 10000, 'warship': 50000}.get(item_type, 1000)\n\n        if available_amount <= 0:\n            await query.edit_message_text(\"❌ این آیتم در موجودی شما نیست!\")\n            return\n\n        # Show sell dialog with preset options\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n\n        dialog_text = f\"\"\"💰 فروش {item_emoji} {item_name}\n\n📦 موجودی شما: {available_amount:,}\n💵 قیمت پیشنهادی: ${suggested_price:,}\n\n🔢 مقدار فروش را انتخاب کنید:\"\"\"\n\n        keyboard = []\n\n        # Add quantity options\n        quantities = []\n        if available_amount >= 100:\n            quantities.append(100)\n        if available_amount >= 500:\n            quantities.append(500)\n        if available_amount >= 1000:\n            quantities.append(1000)\n        if available_amount >= 5000:\n            quantities.append(5000)\n\n        # Add half and all options\n        if available_amount > 10:\n            quantities.append(available_amount // 2)  # Half\n        quantities.append(available_amount)  # All\n\n        # Remove duplicates and sort\n        quantities = sorted(list(set(quantities)))\n\n        for qty in quantities[:6]:  # Max 6 options\n            callback_data = f\"confirm_sell_{item_category}_{item_type}_{qty}_{suggested_price}\"\n            keyboard.append([InlineKeyboardButton(\n                f\"{qty:,} عدد (${qty * suggested_price:,})\",\n                callback_data=callback_data\n            )])\n\n        # Add manual input button\n        keyboard.append([InlineKeyboardButton(\"✏️ مقدار و قیمت دستی\", callback_data=f\"manual_sell_{item_category}_{item_type}\")])\n        keyboard.append([InlineKeyboardButton(\"🔙 بازگشت\", callback_data=\"market_sell\")])\n\n        await query.edit_message_text(dialog_text, reply_markup=InlineKeyboardMarkup(keyboard))\n\n    async def handle_confirm_sell(self, query, context):\n        \"\"\"Handle sell confirmation\"\"\"\n        user_id = query.from_user.id\n        data_parts = query.data.replace(\"confirm_sell_\", \"\").split(\"_\")\n\n        if len(data_parts) < 4:\n            await query.edit_message_text(\"❌ داده‌های فروش نامعتبر!\")\n            return\n\n        item_category = data_parts[0]\n        item_type = data_parts[1]\n        quantity = int(data_parts[2])\n        price_per_unit = int(data_parts[3])\n\n        # Create listing\n        result = self.marketplace.create_listing(user_id, item_type, item_category, quantity, price_per_unit)\n\n        if result['success']:\n            total_value = quantity * price_per_unit\n            success_text = f\"\"\"✅ آگهی فروش ثبت شد!\n\n📦 آیتم: {item_type}\n🔢 مقدار: {quantity:,}\n💰 قیمت واحد: ${price_per_unit:,}\n💵 ارزش کل: ${total_value:,}\n🛡 امنیت: {result['security_level']}%\n\n🏪 آگهی شما در بازار قرار گرفت.\"\"\"\n        else:\n            success_text = f\"❌ {result['message']}\"\n\n        # Add back button\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = [[InlineKeyboardButton(\"🔙 بازگشت به فروشگاه\", callback_data=\"marketplace\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        await query.edit_message_text(success_text, reply_markup=reply_markup)\n\n    async def handle_manual_transfer(self, query, context):\n        \"\"\"Handle manual transfer input request\"\"\"\n        user_id = query.from_user.id\n        target_id = int(query.data.replace(\"manual_transfer_\", \"\"))\n\n        # Store transfer context\n        context.user_data['awaiting_manual_transfer'] = True\n        context.user_data['transfer_target_id'] = target_id\n\n        player = self.db.get_player(user_id)\n        target_player = self.db.get_player(target_id)\n\n        manual_text = f\"\"\"✏️ ورود مقدار دستی - انتقال به {target_player['country_name']}\n\n💰 پول شما: ${player['money']:,}\n\n📝 لطفاً مقدار دلخواه خود را به فرمت زیر وارد کنید:\n\n🔹 برای ارسال پول:\nmoney 50000\n\n🔹 برای ارسال منابع:\niron 1000\noil 500\ngold 100\n\nشما می‌توانید چندین آیتم را در یک خط جدا\nره وارد کنید:\nmoney 10000\niron 500\noil 300\n\n⚠️ فقط اعداد صحیح استفاده کنید\"\"\"\n\n        await query.edit_message_text(manual_text)\n\n    async def handle_manual_sell(self, query, context):\n        \"\"\"Handle manual sell input request\"\"\"\n        user_id = query.from_user.id\n        data_parts = query.data.replace(\"manual_sell_\", \"\").split(\"_\")\n\n        if len(data_parts) < 2:\n            await query.edit_message_text(\"❌ خطا در پردازش!\")\n            return\n\n        item_category = data_parts[0]\n        item_type = data_parts[1]\n\n        # Store sell context\n        context.user_data['awaiting_manual_sell'] = True\n        context.user_data['sell_item_category'] = item_category\n        context.user_data['sell_item_type'] = item_type\n\n        # Get available amount\n        if item_category == \"resources\":\n            resources = self.db.get_player_resources(user_id)\n            available_amount = resources.get(item_type, 0)\n        else:  # weapons\n            weapons = self.db.get_player_weapons(user_id)\n            available_amount = weapons.get(item_type, 0)\n\n        manual_text = f\"\"\"✏️ ورود مقدار و قیمت دستی\n\n📦 آیتم: {item_type}\n📊 موجودی شما: {available_amount:,}\n\n📝 لطفاً مقدار و قیمت دلخواه را به فرمت زیر وارد کنید:\n\nمقدار قیمت_واحد\n\nمثال:\n1000 50\n(یعنی 1000 عدد به قیمت 50 دلار هر واحد)\n\n⚠️ فقط اعداد صحیح استفاده کنید\n⚠️ مقدار نباید بیشتر از موجودی شما باشد\"\"\"\n\n        await query.edit_message_text(manual_text)\n\n    async def handle_manual_transfer_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle manual transfer text input\"\"\"\n        user_id = update.effective_user.id\n        message = update.message.text.strip()\n        target_id = context.user_data.get('transfer_target_id')\n\n        if not target_id:\n            await update.message.reply_text(\"❌ خطا در پردازش انتقال!\")\n            context.user_data.pop('awaiting_manual_transfer', None)\n            return\n\n        try:\n            # Parse input\n            lines = message.split('\\n')\n            transfer_resources = {}\n\n            for line in lines:\n                line = line.strip()\n                if not line:\n                    continue\n\n                parts = line.split()\n                if len(parts) != 2:\n                    await update.message.reply_text(\"❌ فرمت نادرست! استفاده کنید: آیتم مقدار\")\n                    return\n\n                resource_type, amount_str = parts\n                amount = int(amount_str)\n\n                if amount <= 0:\n                    await update.message.reply_text(\"❌ مقدار باید بیشتر از صفر باشد!\")\n                    return\n\n                transfer_resources[resource_type] = amount\n\n            if not transfer_resources:\n                await update.message.reply_text(\"❌ هیچ آیتمی برای انتقال مشخص نشده!\")\n                return\n\n            # Execute transfer\n            result = self.convoy.create_convoy(user_id, target_id, transfer_resources)\n\n            if result['success']:\n                target_player = self.db.get_player(target_id)\n                convoy_message = f\"🚛 محموله جدید آماده ارسال!\\n\\n📦 مقصد: {target_player['country_name']}\\n⏱ زمان تحویل: {result['travel_time']} دقیقه\\n🛡 امنیت: {result['security_level']}%\"\n\n                # Send convoy news\n                await self.news.send_convoy_news(convoy_message, None, transfer_resources)\n\n                await update.message.reply_text(f\"✅ محموله با موفقیت ارسال شد!\\n{convoy_message}\")\n            else:\n                await update.message.reply_text(f\"❌ {result['message']}\")\n\n        except ValueError:\n            await update.message.reply_text(\"❌ لطفاً فقط اعداد صحیح وارد کنید!\")\n        except Exception as e:\n            logger.error(f\"Error in manual transfer: {e}\")\n            await update.message.reply_text(\"❌ خطایی در انتقال رخ داد!\")\n\n        # Clear state\n        context.user_data.pop('awaiting_manual_transfer', None)\n        context.user_data.pop('transfer_target_id', None)\n\n        # Show main menu\n        await asyncio.sleep(1)\n        await self.show_main_menu(update, context)\n\n    async def handle_manual_sell_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle manual sell text input\"\"\"\n        user_id = update.effective_user.id\n        message = update.message.text.strip()\n        item_category = context.user_data.get('sell_item_category')\n        item_type = context.user_data.get('sell_item_type')\n\n        if not item_category or not item_type:\n            await update.message.reply_text(\"❌ خطا در پردازش فروش!\")\n            context.user_data.pop('awaiting_manual_sell', None)\n            return\n\n        try:\n            parts = message.split()\n            if len(parts) != 2:\n                await update.message.reply_text(\"❌ فرمت نادرست! استفاده کنید: مقدار قیمت_واحد\")\n                return\n\n            quantity = int(parts[0])\n            price_per_unit = int(parts[1])\n\n            if quantity <= 0 or price_per_unit <= 0:\n                await update.message.reply_text(\"❌ مقدار و قیمت باید بیشتر از صفر باشد!\")\n                return\n\n            # Create listing\n            result = self.marketplace.create_listing(user_id, item_type, item_category, quantity, price_per_unit)\n\n            if result['success']:\n                total_value = quantity * price_per_unit\n                success_text = f\"\"\"✅ آگهی فروش ثبت شد!\n\n📦 آیتم: {item_type}\n🔢 مقدار: {quantity:,}\n💰 قیمت واحد: ${price_per_unit:,}\n💵 ارزش کل: ${total_value:,}\n🛡 امنیت: {result['security_level']}%\n\n🏪 آگهی شما در بازار قرار گرفت.\"\"\"\n                await update.message.reply_text(success_text)\n            else:\n                await update.message.reply_text(f\"❌ {result['message']}\")\n\n        except ValueError:\n            await update.message.reply_text(\"❌ لطفاً فقط اعداد صحیح وارد کنید!\")\n        except Exception as e:\n            logger.error(f\"Error in manual sell: {e}\")\n            await update.message.reply_text(\"❌ خطایی در فروش رخ داد!\")\n\n        # Clear state\n        context.user_data.pop('awaiting_manual_sell', None)\n        context.user_data.pop('sell_item_category', None)\n        context.user_data.pop('sell_item_type', None)\n\n        # Show main menu\n        await asyncio.sleep(1)\n        await self.show_main_menu(update, context)\n\n    async def handle_remove_listing(self, query, context):\n        \"\"\"Handle removing marketplace listing\"\"\"\n        user_id = query.from_user.id\n        listing_id = int(query.data.replace(\"remove_\", \"\"))\n\n        result = self.marketplace.cancel_listing(user_id, listing_id)\n\n        # Add back button\n        from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n        keyboard = [[InlineKeyboardButton(\"🔙 بازگشت به فروشگاه\", callback_data=\"marketplace\")]]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n\n        await query.edit_message_text(\n            f\"{'✅' if result['success'] else '❌'} {result['message']}\",\n            reply_markup=reply_markup\n        )\n\n    async def handle_official_statement(self, query, context):\n        \"\"\"Handle official statement\"\"\"\n        await query.edit_message_text(\n            \"📢 بیانیه رسمی\\n\\n\"\n            \"لطفاً متن بیانیه رسمی خود را ارسال کنید:\",\n            reply_markup=self.keyboards.back_to_main_keyboard()\n        )\n\n        context.user_data['awaiting_official_statement'] = True\n\n    async def handle_official_statement_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle official statement text input\"\"\"\n        user_id = update.effective_user.id\n        statement_text = update.message.text\n\n        if len(statement_text) > 1000:\n            await update.message.reply_text(\"❌ متن بیانیه نباید بیشتر از 1000 کاراکتر باشد!\")\n            return\n\n        # Send statement to news channel\n        player = self.db.get_player(user_id)\n        if player:\n            country_flag = Config.COUNTRY_FLAGS.get(player['country_code'], '🏳')\n            statement_message = f\"\"\"📢 بیانیه رسمی\n\n{country_flag} <b>{player['country_name']}</b>\n\n📝 متن بیانیه:\n{statement_text}\"\"\"\n\n            await self.news.send_text_message(statement_message)\n\n            is_admin = self.admin.is_admin(user_id)\n            await update.message.reply_text(\n                \"✅ بیانیه شما با موفقیت منتشر شد!\",\n                reply_markup=self.keyboards.main_menu_keyboard(is_admin)\n            )\n\n\n    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):\n        \"\"\"Handle text messages\"\"\"\n        if not update.effective_user:\n            return\n        user_id = update.effective_user.id\n\n        # Handle manual transfer input\n        if context.user_data.get('awaiting_manual_transfer'):\n            await self.handle_manual_transfer_input(update, context)\n            context.user_data.pop('awaiting_manual_transfer', None)\n            return\n\n        # Handle official statement\n        if context.user_data.get('awaiting_official_statement'):\n            await self.handle_official_statement_text(update, context)\n            context.user_data.pop('awaiting_official_statement', None)\n            return\n\n        # Handle manual sell input\n        if context.user_data.get('awaiting_manual_sell'):\n            await self.handle_manual_sell_input(update, context)\n            context.user_data.pop('awaiting_manual_sell', None)\n            return\n\n        # Handle alliance name input\n        if context.user_data.get('awaiting_alliance_name'):\n            alliance_name = update.message.text\n            if len(alliance_name) > 50:\n                await update.message.reply_text(\"❌ نام اتحاد نباید بیش از 50 کاراکتر باشد.\")\n                return\n\n            result = self.alliance.create_alliance(user_id, alliance_name)\n            await update.message.reply_text(f\"{'✅' if result['success'] else '❌'} {result['message']}\")\n\n            context.user_data['awaiting_alliance_name'] = False\n\n            # Show main menu\n            await asyncio.sleep(1)\n            await self.show_main_menu(update, context)\n        else:\n            # Default message for unhandled text\n            await update.message.reply_text(\"Use commands like /start or buttons to interact.\")\n\n\n    async def income_cycle(self):\n        \"\"\"6-hour automated income cycle\"\"\"\n        logger.info(\"Starting income cycle...\")\n\n        players = self.db.get_all_players()\n        for player in players:\n            try:\n                # Calculate and distribute income\n                income = self.economy.calculate_income(player['user_id'])\n                new_money = player['money'] + income\n\n                # Update population from farms\n                population_increase = self.economy.calculate_population_increase(player['user_id'])\n                new_population = player['population'] + population_increase\n\n                # Convert population to soldiers from military bases\n                soldier_increase = self.economy.calculate_soldier_increase(player['user_id'])\n                new_soldiers = player['soldiers'] + soldier_increase\n\n                # Update database\n                self.db.update_player_income(\n                    player['user_id'],\n                    new_money,\n                    new_population,\n                    new_soldiers\n                )\n\n                # Distribute mine resources\n                self.economy.distribute_mine_resources(player['user_id'])\n\n                logger.info(f\"Income distributed to {player['country_name']}: ${income}\")\n\n            except Exception as e:\n                logger.error(f\"Error in income cycle for player {player['user_id']}: {e}\")\n\n        # Send global news about income cycle\n        await self.news.send_income_cycle_complete()\n        logger.info(\"Income cycle completed\")\n\n    async def process_pending_attacks(self):\n        \"\"\"Process pending attacks that are due\"\"\"\n        try:\n            results = self.combat.process_pending_attacks()\n\n            for result in results:\n                # Send news about completed attacks\n                attacker = self.db.get_player(result['attacker_id'])\n                defender = self.db.get_player(result['defender_id'])\n\n                if result['result']['success']:\n                    await self.news.send_war_news(\n                        attacker['country_name'],\n                        defender['country_name'],\n                        result['result']\n                    )\n\n        except Exception as e:\n            logger.error(f\"Error processing pending attacks: {e}\")\n\n    async def process_convoy_arrivals(self):\n        \"\"\"Process convoy arrivals that are due\"\"\"\n        try:\n            results = self.convoy.process_convoy_arrivals()\n\n            for result in results:\n                # Send news about convoy delivery\n                convoy = self.db.get_convoy(result['convoy_id'])\n                if convoy:\n                    sender = self.db.get_player(convoy['sender_id'])\n                    receiver = self.db.get_player(convoy['receiver_id'])\n\n                    if result['success']:\n                        message = f\"📦 محموله از {sender['country_name']} به {receiver['country_name']} تحویل شد!\"\n                        await self.news.send_convoy_news(message, None, result.get('resources', {}))\n                    else:\n                        message = f\"💀 محموله از {sender['country_name']} به {receiver['country_name']} دزدیده شد!\"\n                        await self.news.send_convoy_news(message, None, result.get('resources_lost', {}))\n\n        except Exception as e:\n            logger.error(f\"Error processing convoy arrivals: {e}\")\n\n    def setup_scheduler(self):\n        \"\"\"Setup the automated scheduler\"\"\"\n        # 6-hour income cycle\n        self.scheduler.add_job(\n            func=self.income_cycle,\n            trigger=IntervalTrigger(hours=6),\n            id='income_cycle',\n            name='6-hour income cycle',\n            replace_existing=True\n        )\n\n        # Process pending attacks every minute\n        self.scheduler.add_job(\n            func=self.process_pending_attacks,\n            trigger=IntervalTrigger(minutes=1),\n            id='pending_attacks',\n            name='Process pending attacks',\n            replace_existing=True\n        )\n\n        # Process convoy arrivals every minute\n        self.scheduler.add_job(\n            func=self.process_convoy_arrivals,\n            trigger=IntervalTrigger(minutes=1),\n            id='convoy_arrivals',\n            name='Process convoy arrivals',\n            replace_existing=True\n        )\n\n        logger.info(\"Scheduler configured - 6-hour income cycle, pending attacks, and convoy arrivals active\")\n\n    async def start_scheduler(self):\n        \"\"\"Start the scheduler within async context\"\"\"\n        self.scheduler.start()\n        logger.info(\"Scheduler started\")\n\n    async def post_init(self, application):\n        \"\"\"Post initialization callback\"\"\"\n        await self.start_scheduler()\n\n    async def show_admin_give_category(self, query, context):\n        \"\"\"Show admin give category\"\"\"\n        user_id = query.from_user.id\n        if not self.admin.is_admin(user_id):\n            await query.edit_message_text(\"❌ شما مجاز به این کار نیستید!\")\n            return\n\n        category = query.data.replace(\"admin_give_cat_\", \"\")\n\n        if category == \"money\":\n            menu_text = \"\"\"💰 هدیه پول به کشور\n\nانتخاب کنید که چه مقداری پول هدیه دهید:\n(پول به تمام کشورها اضافه می‌شود)\"\"\"\n            keyboard = self.keyboards.admin_give_money_keyboard()\n        elif category == \"resources\":\n            menu_text = \"\"\"📦 هدیه منابع به کشور\n\nانتخاب کنید که چه مقدار از کدام منبع هدیه دهید:\n(آیتم‌ها به تمام کشورها اضافه می‌شود)\"\"\"\n            keyboard = self.keyboards.admin_give_resources_keyboard()\n        elif category == \"weapons\":\n            menu_text = \"\"\"⚔️ هدیه سلاح‌ها به کشور\n\nانتخاب کنید که چه مقدار از کدام سلاح هدیه دهید:\n(آیتم‌ها به تمام کشورها اضافه می‌شود)\"\"\"\n            keyboard = self.keyboards.admin_give_weapons_keyboard()\n        elif category == \"buildings\":\n            menu_text = \"🏗 هدیه ساختمان به کشور\\n\\n❌ این بخش هنوز پیاده‌سازی نشده!\"\n            keyboard = self.keyboards.admin_give_items_keyboard()\n        elif category == \"population\":\n            menu_text = \"👥 هدیه جمعیت به کشور\\n\\n❌ این بخش هنوز پیاده‌سازی نشده!\"\n            keyboard = self.keyboards.admin_give_items_keyboard()\n        elif category == \"soldiers\":\n            menu_text = \"🪖 هدیه سرباز به کشور\\n\\n❌ این بخش هنوز پیاده‌سازی نشده!\"\n            keyboard = self.keyboards.admin_give_items_keyboard()\n        else:\n            menu_text = \"❌ دسته نامعتبر!\"\n            keyboard = self.keyboards.admin_give_items_keyboard()\n\n        await query.edit_message_text(menu_text, reply_markup=keyboard)\n\n    async def handle_admin_give_item(self, query, context):\n        \"\"\"Handle admin giving items\"\"\"\n        user_id = query.from_user.id\n        if not self.admin.is_admin(user_id):\n            await query.edit_message_text(\"❌ شما مجاز به این کار نیستید!\")\n            return\n\n        # Parse data: admin_give_all_to_iron_1000\n        data_parts = query.data.split(\"_\")\n        if len(data_parts) < 5:\n            await query.edit_message_text(\"❌ فرمت دستور نامعتبر!\")\n            return\n\n        # Skip 'to' part: [admin, give, all, to, iron, 1000]\n        if data_parts[3] != \"to\":\n            await query.edit_message_text(\"❌ فرمت دستور نامعتبر!\")\n            return\n\n        item_type = data_parts[4]  # e.g., \"iron\", \"rifle\", etc.\n        try:\n            amount = int(data_parts[5])\n        except (ValueError, IndexError):\n            await query.edit_message_text(\"❌ مقدار نامعتبر!\")\n            return\n\n        # Handle money gifting\n        if item_type == \"money\":\n            players = self.db.get_all_players()\n            if not players:\n                await query.edit_message_text(\"❌ هیچ بازیکنی وجود ندارد!\")\n                return\n\n            success_count = 0\n            for player in players:\n                try:\n                    result = self.admin.give_money_to_player(player['user_id'], amount)\n                    if result['success']:\n                        success_count += 1\n                except Exception as e:\n                    logger.error(f\"Error giving money to {player['country_name']}: {e}\")\n\n            await query.edit_message_text(\n                f\"✅ پول با موفقیت به {success_count} کشور هدیه داده شد!\\n\\n\"\n                f\"💰 مقدار: {amount:,}\",\n                reply_markup=self.keyboards.admin_give_items_keyboard()\n            )\n            return\n\n\n        # Give to all players for resources and weapons\n        players = self.db.get_all_players()\n        if not players:\n            await query.edit_message_text(\"❌ هیچ بازیکنی وجود ندارد!\")\n            return\n\n        success_count = 0\n        error_count = 0\n\n        for player in players:\n            try:\n                result = None\n\n                # Check if it's a resource\n                if item_type in ['iron', 'copper', 'oil', 'aluminum', 'gold', 'uranium', 'lithium', 'coal', 'nitro', 'sulfur', 'titanium']:\n                    result = self.admin.give_resources_to_player(player['user_id'], item_type, amount)\n                    if result['success']:\n                        success_count += 1\n\n                # Check if it's a weapon\n                elif item_type in ['rifle', 'tank', 'fighter', 'jet', 'drone', 'simple', 'bomb', 'nuclear', 'ballistic', 'missile', 'f22']:\n                    weapon_map = {\n                        'rifle': 'rifle',\n                        'tank': 'tank',\n                        'fighter': 'fighter_jet',\n                        'jet': 'fighter_jet',\n                        'drone': 'drone',\n                        'simple': 'bomb',\n                        'bomb': 'bomb',\n                        'nuclear': 'nuclear_bomb',\n                        'ballistic': 'missile',\n                        'missile': 'missile',\n                        'f22': 'F-22'\n                    }\n                    weapon_name = weapon_map.get(item_type, item_type)\n                    result = self.admin.give_weapons_to_player(player['user_id'], weapon_name, amount)\n                    if result['success']:\n                        success_count += 1\n\n                else:\n                    logger.error(f\"Unknown item type: {item_type}\")\n                    error_count += 1\n                    continue\n\n            except Exception as e:\n                logger.error(f\"Error giving {item_type} to {player['country_name']}: {e}\")\n                error_count += 1\n\n        # Create result message\n        if success_count > 0:\n            result_text = f\"✅ آیتم با موفقیت به {success_count} کشور هدیه داده شد!\\n\\n\"\n            result_text += f\"📦 آیتم: {item_type}\\n\"\n            result_text += f\"🔢 مقدار: {amount:,}\"\n\n            if error_count > 0:\n                result_text += f\"\\n\\n⚠️ {error_count} خطا رخ داد\"\n        else:\n            result_text = f\"❌ خطا در هدیه دادن آیتم!\\n\\n\"\n            result_text += f\"📦 آیتم: {item_type}\\n\"\n            result_text += f\"🔢 مقدار: {amount:,}\\n\"\n            result_text += f\"❌ تعداد خطاها: {error_count}\"\n\n        await query.edit_message_text(\n            result_text,\n            reply_markup=self.keyboards.admin_give_items_keyboard()\n        )\n\n    def run(self):\n        \"\"\"Run the bot\"\"\"\n        logger.info(\"Starting DragonRP Bot...\")\n\n        # Initialize database\n        self.db.initialize()\n\n        # Set bot for news channel\n        bot = Bot(token=self.token)\n        self.news.set_bot(bot)\n\n        # Setup application\n        application = Application.builder().token(self.token).post_init(self.post_init).build()\n\n        # Add handlers\n        application.add_handler(CommandHandler(\"start\", self.start))\n        application.add_handler(CallbackQueryHandler(self.handle_callback))\n        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))\n\n        # Setup scheduler (but don't start yet)\n        self.setup_scheduler()\n\n        # Add admin handlers\n        self.admin.setup_handlers(application)\n\n        logger.info(\"Bot is ready!\")\n\n        # Start the bot\n        application.run_polling(allowed_updates=Update.ALL_TYPES)\n\nif __name__ == '__main__':\n    bot = DragonRPBot()\n    bot.run()","size_bytes":128479},"marketplace.py":{"content":"import logging\nfrom datetime import datetime\nimport json\nfrom config import Config\n\nlogger = logging.getLogger(__name__)\n\nclass Marketplace:\n    def __init__(self, database):\n        self.db = database\n        self.setup_marketplace_tables()\n\n    def setup_marketplace_tables(self):\n        \"\"\"Setup marketplace tables\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Market listings table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS market_listings (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    seller_id INTEGER NOT NULL,\n                    item_type TEXT NOT NULL,\n                    item_category TEXT NOT NULL,\n                    quantity INTEGER NOT NULL,\n                    price_per_unit INTEGER NOT NULL,\n                    total_price INTEGER NOT NULL,\n                    security_level INTEGER DEFAULT 50,\n                    status TEXT DEFAULT 'active',\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    FOREIGN KEY (seller_id) REFERENCES players (user_id)\n                )\n            ''')\n\n            # Market transactions table\n            cursor.execute('''\n                CREATE TABLE IF NOT EXISTS market_transactions (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    listing_id INTEGER NOT NULL,\n                    buyer_id INTEGER NOT NULL,\n                    seller_id INTEGER NOT NULL,\n                    item_type TEXT NOT NULL,\n                    quantity INTEGER NOT NULL,\n                    total_paid INTEGER NOT NULL,\n                    status TEXT DEFAULT 'pending',\n                    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    delivery_date TIMESTAMP,\n                    FOREIGN KEY (listing_id) REFERENCES market_listings (id),\n                    FOREIGN KEY (buyer_id) REFERENCES players (user_id),\n                    FOREIGN KEY (seller_id) REFERENCES players (user_id)\n                )\n            ''')\n\n            conn.commit()\n\n    def create_listing(self, seller_id, item_type, item_category, quantity, price_per_unit):\n        \"\"\"Create new market listing\"\"\"\n        # Verify seller has the items\n        if not self.verify_seller_inventory(seller_id, item_category, item_type, quantity):\n            return {'success': False, 'message': 'موجودی کافی ندارید!'}\n\n        # Calculate security based on seller's military power\n        security_level = self.calculate_seller_security(seller_id)\n        total_price = quantity * price_per_unit\n\n        # Remove items from seller's inventory\n        if not self.remove_from_inventory(seller_id, item_category, item_type, quantity):\n            return {'success': False, 'message': 'خطا در کسر موجودی!'}\n\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                INSERT INTO market_listings \n                (seller_id, item_type, item_category, quantity, price_per_unit, total_price, security_level)\n                VALUES (?, ?, ?, ?, ?, ?, ?)\n            ''', (seller_id, item_type, item_category, quantity, price_per_unit, total_price, security_level))\n\n            listing_id = cursor.lastrowid\n            conn.commit()\n\n        return {\n            'success': True,\n            'message': 'آگهی فروش ثبت شد!',\n            'listing_id': listing_id,\n            'security_level': security_level\n        }\n\n    def purchase_item(self, buyer_id, listing_id, quantity_to_buy):\n        \"\"\"Purchase item from marketplace\"\"\"\n        listing = self.get_listing(listing_id)\n\n        if not listing or listing['status'] != 'active':\n            return {'success': False, 'message': 'آگهی فروش یافت نشد!'}\n\n        if listing['seller_id'] == buyer_id:\n            return {'success': False, 'message': 'نمی‌توانید از خودتان خرید کنید!'}\n\n        if quantity_to_buy > listing['quantity']:\n            return {'success': False, 'message': 'موجودی کافی نیست!'}\n\n        total_cost = quantity_to_buy * listing['price_per_unit']\n        buyer = self.db.get_player(buyer_id)\n\n        if buyer['money'] < total_cost:\n            return {'success': False, 'message': 'پول کافی ندارید!'}\n\n        # Process transaction\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            # Create transaction record\n            cursor.execute('''\n                INSERT INTO market_transactions \n                (listing_id, buyer_id, seller_id, item_type, quantity, total_paid)\n                VALUES (?, ?, ?, ?, ?, ?)\n            ''', (listing_id, buyer_id, listing['seller_id'], listing['item_type'], \n                  quantity_to_buy, total_cost))\n\n            transaction_id = cursor.lastrowid\n\n            # Deduct money from buyer\n            self.db.update_player_money(buyer_id, buyer['money'] - total_cost)\n\n            # Add money to seller\n            seller = self.db.get_player(listing['seller_id'])\n            self.db.update_player_money(listing['seller_id'], seller['money'] + total_cost)\n\n            # Update listing quantity\n            remaining_quantity = listing['quantity'] - quantity_to_buy\n            if remaining_quantity <= 0:\n                cursor.execute('UPDATE market_listings SET status = \"sold_out\" WHERE id = ?', (listing_id,))\n            else:\n                cursor.execute('UPDATE market_listings SET quantity = ? WHERE id = ?', \n                              (remaining_quantity, listing_id))\n\n            conn.commit()\n\n        # Check if this is first purchase for news\n        is_first_purchase = self.db.check_first_purchase(buyer_id, listing['item_type'])\n        if is_first_purchase:\n            self.db.record_first_purchase(buyer_id, listing['item_type'])\n\n        # Add items to buyer (will be delivered based on security)\n        delivery_success = self.process_delivery(buyer_id, listing, quantity_to_buy, transaction_id)\n\n        # Create better message based on delivery result\n        if delivery_success['success']:\n            main_message = f'✅ خرید موفق! {delivery_success[\"message\"]}'\n        else:\n            main_message = f'⚠️ خرید انجام شد اما {delivery_success[\"message\"]}'\n\n        return {\n            'success': True,\n            'message': main_message,\n            'transaction_id': transaction_id,\n            'delivery_status': delivery_success,\n            'is_first_purchase': is_first_purchase\n        }\n\n    def process_delivery(self, buyer_id, listing, quantity, transaction_id):\n        \"\"\"Process delivery of purchased items\"\"\"\n        security_level = listing['security_level']\n\n        # Higher security = higher delivery success chance\n        # Minimum 70% success rate, maximum 95%\n        base_success_chance = min(max(security_level + 30, 70), 95)\n\n        import random\n        delivery_roll = random.randint(1, 100)\n        \n        if delivery_roll <= base_success_chance:\n            # Successful delivery\n            self.add_to_inventory(buyer_id, listing['item_category'], listing['item_type'], quantity)\n\n            # Update transaction status\n            with self.db.get_connection() as conn:\n                cursor = conn.cursor()\n                cursor.execute('''\n                    UPDATE market_transactions \n                    SET status = \"delivered\", delivery_date = CURRENT_TIMESTAMP \n                    WHERE id = ?\n                ''', (transaction_id,))\n                conn.commit()\n\n            return {'success': True, 'message': '✅ کالا با موفقیت تحویل شد!'}\n        else:\n            # Failed delivery - refund partial money, items lost\n            # Refund 50% of purchase price\n            listing_price = quantity * listing['price_per_unit']\n            refund_amount = listing_price // 2\n            \n            buyer = self.db.get_player(buyer_id)\n            self.db.update_player_money(buyer_id, buyer['money'] + refund_amount)\n            \n            with self.db.get_connection() as conn:\n                cursor = conn.cursor()\n                cursor.execute('''\n                    UPDATE market_transactions \n                    SET status = \"failed\" \n                    WHERE id = ?\n                ''', (transaction_id,))\n                conn.commit()\n\n            return {'success': False, 'message': f'❌ محموله در راه دزدیده شد! ${refund_amount:,} بازپرداخت شد.'}\n\n    def calculate_seller_security(self, seller_id):\n        \"\"\"Calculate seller security level\"\"\"\n        weapons = self.db.get_player_weapons(seller_id)\n\n        security_points = 0\n        security_points += weapons.get('tank', 0) * 10\n        security_points += weapons.get('fighter_jet', 0) * 15\n        security_points += weapons.get('drone', 0) * 12\n        security_points += weapons.get('warship', 0) * 20\n        security_points += weapons.get('air_defense', 0) * 8\n\n        # Convert to percentage (max 95%)\n        security_level = min(30 + (security_points / 10), 95)\n        return int(security_level)\n\n    def get_buyer_transactions(self, buyer_id, limit=10):\n        \"\"\"Get recent transactions for a buyer\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT mt.*, p.country_name as seller_country\n                FROM market_transactions mt\n                JOIN players p ON mt.seller_id = p.user_id\n                WHERE mt.buyer_id = ?\n                ORDER BY mt.transaction_date DESC\n                LIMIT ?\n            ''', (buyer_id, limit))\n            \n            transactions = []\n            for row in cursor.fetchall():\n                transactions.append({\n                    'id': row[0],\n                    'listing_id': row[1],\n                    'buyer_id': row[2],\n                    'seller_id': row[3],\n                    'item_type': row[4],\n                    'quantity': row[5],\n                    'total_paid': row[6],\n                    'status': row[7],\n                    'transaction_date': row[8],\n                    'delivery_date': row[9],\n                    'seller_country': row[10]\n                })\n            \n            return transactions\n\n    def verify_seller_inventory(self, seller_id, category, item_type, quantity):\n        \"\"\"Verify seller has required inventory\"\"\"\n        if category == 'resource':\n            resources = self.db.get_player_resources(seller_id)\n            return resources.get(item_type, 0) >= quantity\n        elif category == 'weapon':\n            weapons = self.db.get_player_weapons(seller_id)\n            return weapons.get(item_type, 0) >= quantity\n        elif category == 'money':\n            player = self.db.get_player(seller_id)\n            return player['money'] >= quantity\n\n        return False\n\n    def remove_from_inventory(self, seller_id, category, item_type, quantity):\n        \"\"\"Remove items from seller inventory\"\"\"\n        if category == 'resource':\n            return self.db.consume_resources(seller_id, {item_type: quantity})\n        elif category == 'weapon':\n            weapons = self.db.get_player_weapons(seller_id)\n            current = weapons.get(item_type, 0)\n            if current >= quantity:\n                self.db.update_weapon_count(seller_id, item_type, current - quantity)\n                return True\n        elif category == 'money':\n            player = self.db.get_player(seller_id)\n            if player['money'] >= quantity:\n                self.db.update_player_money(seller_id, player['money'] - quantity)\n                return True\n\n        return False\n\n    def add_to_inventory(self, buyer_id, category, item_type, quantity):\n        \"\"\"Add items to buyer inventory\"\"\"\n        if category == 'resource':\n            # Add 6-hour bonus production when buying resources\n            resource_production_rates = {\n                'iron': 1000,\n                'copper': 800,\n                'oil': 600,\n                'gas': 700,\n                'aluminum': 500,\n                'gold': 200,\n                'uranium': 18,\n                'lithium': 300,\n                'coal': 1200,\n                'silver': 400,\n                'nitro': 600,\n                'sulfur': 900,\n                'titanium': 60,\n                'fuel': 0\n            }\n            \n            # Add purchased quantity plus 6-hour production bonus\n            bonus_production = resource_production_rates.get(item_type, 0)\n            total_quantity = quantity + bonus_production\n            \n            self.db.add_resources(buyer_id, item_type, total_quantity)\n        elif category == 'weapon':\n            self.db.add_weapon(buyer_id, item_type, quantity)\n        elif category == 'money':\n            player = self.db.get_player(buyer_id)\n            self.db.update_player_money(buyer_id, player['money'] + quantity)\n\n    def get_listing(self, listing_id):\n        \"\"\"Get listing details\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('SELECT * FROM market_listings WHERE id = ?', (listing_id,))\n            result = cursor.fetchone()\n            return dict(result) if result else None\n\n    def get_active_listings(self, category=None, limit=20):\n        \"\"\"Get active market listings\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n\n            if category:\n                cursor.execute('''\n                    SELECT ml.*, p.country_name as seller_country\n                    FROM market_listings ml\n                    JOIN players p ON ml.seller_id = p.user_id\n                    WHERE ml.status = \"active\" AND ml.item_category = ?\n                    ORDER BY ml.created_at DESC\n                    LIMIT ?\n                ''', (category, limit))\n            else:\n                cursor.execute('''\n                    SELECT ml.*, p.country_name as seller_country\n                    FROM market_listings ml\n                    JOIN players p ON ml.seller_id = p.user_id\n                    WHERE ml.status = \"active\"\n                    ORDER BY ml.created_at DESC\n                    LIMIT ?\n                ''', (limit,))\n\n            return [dict(row) for row in cursor.fetchall()]\n\n    def get_player_listings(self, seller_id):\n        \"\"\"Get player's listings\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT * FROM market_listings \n                WHERE seller_id = ? AND status IN (\"active\", \"sold_out\")\n                ORDER BY created_at DESC\n            ''', (seller_id,))\n\n            return [dict(row) for row in cursor.fetchall()]\n\n    def cancel_listing(self, seller_id, listing_id):\n        \"\"\"Cancel a listing and return items\"\"\"\n        listing = self.get_listing(listing_id)\n\n        if not listing or listing['seller_id'] != seller_id:\n            return {'success': False, 'message': 'آگهی فروش یافت نشد!'}\n\n        if listing['status'] != 'active':\n            return {'success': False, 'message': 'این آگهی قابل لغو نیست!'}\n\n        # Return items to seller\n        self.add_to_inventory(seller_id, listing['item_category'], listing['item_type'], listing['quantity'])\n\n        # Update listing status\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('UPDATE market_listings SET status = \"cancelled\" WHERE id = ?', (listing_id,))\n            conn.commit()\n\n        return {'success': True, 'message': 'آگهی لغو شد و اقلام بازگردانده شد.'}\n\n    def delete_listing(self, seller_id, listing_id):\n        \"\"\"Delete a listing (for admins or after sold out/cancelled)\"\"\"\n        listing = self.get_listing(listing_id)\n\n        if not listing:\n            return {'success': False, 'message': 'آگهی فروش یافت نشد!'}\n\n        # Only allow deletion if not active, or by admin (assuming seller_id could be admin if special logic)\n        if listing['status'] == 'active':\n             return {'success': False, 'message': 'آگهی فعال را نمی‌توان حذف کرد!'}\n\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('DELETE FROM market_listings WHERE id = ?', (listing_id,))\n            conn.commit()\n\n        return {'success': True, 'message': 'آگهی با موفقیت حذف شد.'}\n\n    def get_listings_by_category(self, category):\n        \"\"\"Get marketplace listings by category\"\"\"\n        with self.db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute('''\n                SELECT ml.*, p.country_name as seller_country\n                FROM market_listings ml\n                JOIN players p ON ml.seller_id = p.user_id\n                WHERE ml.item_category = ? AND ml.status = 'active'\n                ORDER BY ml.created_at DESC\n            ''', (category,))\n            results = cursor.fetchall()\n            return [dict(row) for row in results]\n\n","size_bytes":17242},"news.py":{"content":"import logging\nimport asyncio\nimport random\nfrom telegram import Bot\nfrom telegram.error import TelegramError\nfrom config import Config\nfrom datetime import datetime\n\nlogger = logging.getLogger(__name__)\n\nclass NewsChannel:\n    def __init__(self):\n        self.channel_id = Config.BOT_CONFIG['news_channel']\n        self.bot = None\n\n        # Message templates for variety\n        self.player_joined_templates = [\n            \"🎮 بازیکن جدید!\\n\\n{flag} <b>{country}</b> توسط {username} تصرف شد!\\n\\nجمعیت اولیه: 1,000,000 نفر\\nسرمایه اولیه: $100,000\\n\\nخوش آمدید به جنگ جهانی! 🌍\",\n            \"🌟 کشور جدید آزاد شد!\\n\\n{flag} <b>{country}</b> با رهبری {username} استقلال کسب کرد!\\n\\nجمعیت: 1,000,000 نفر\\nبودجه: $100,000\\n\\nبه دنیای درگون RP خوش آمدید! 🎯\",\n            \"⚡ تولد یک قدرت جدید!\\n\\n{flag} <b>{country}</b> زیر کنترل {username} آمد!\\n\\nآمار اولیه:\\n👥 جمعیت: 1,000,000\\n💰 سرمایه: $100,000\\n\\nمبارک باشد! 🎊\",\n            \"🚀 ظهور رهبر جدید!\\n\\n{flag} دولت <b>{country}</b> توسط {username} تشکیل شد!\\n\\nوضعیت کشور:\\n📊 جمعیت: 1,000,000 نفر\\n💳 بودجه: $100,000\\n\\nموفق باشید! 🏆\",\n            \"🌍 کشور تازه‌ای به نقشه اضافه شد!\\n\\n{flag} <b>{country}</b> با قیادت {username} فعال شد!\\n\\n📈 آمار:\\n- جمعیت: 1,000,000\\n- بودجه: $100,000\\n\\nبه خانواده بزرگ ما خوش آمدید! 🤗\",\n            \"🔥 انقلاب سیاسی!\\n\\n{flag} <b>{country}</b> تحت فرمان {username} قرار گرفت!\\n\\nمنابع کشور:\\n• جمعیت: 1,000,000\\n• بودجه: $100,000\\n\\nعصری نو آغاز شد! ⭐\",\n            \"👑 تاجگذاری جدید!\\n\\n{flag} {username} بر تخت <b>{country}</b> تکیه زد!\\n\\n🏰 امپراتوری:\\n📊 جمعیت: 1M نفر\\n💰 خزانه: $100K\\n\\nسلطنت جدید آغاز شد! 👑\",\n            \"🗺 گسترش نقشه!\\n\\n{flag} <b>{country}</b> با حاکمیت {username} به دنیا پیوست!\\n\\n📈 پارامترهای اولیه:\\n👥 مردم: 1,000,000\\n💳 اقتصاد: $100,000\\n\\nبه مرزهای جدید خوش آمدید! 🌐\",\n            \"💫 ستاره‌ای جدید در افق!\\n\\n{flag} <b>{country}</b> زیر نظر {username} درخشان شد!\\n\\n✨ شروع باشکوه:\\n• 1,000,000 شهروند\\n• $100,000 سرمایه\\n\\nآینده‌ای روشن در انتظار! 🌅\",\n            \"🌊 موج تغییر!\\n\\n{flag} <b>{country}</b> با رهبری {username} متحول شد!\\n\\n⚡ قدرت نوین:\\n📊 مردم: 1M\\n💰 بودجه: $100K\\n\\nتحول بزرگ شروع شد! 🚀\"\n        ]\n\n        self.building_templates = [\n            \"🏗 توسعه عظیم زیرساخت!\\n\\n{flag} <b>{country}</b> یک {emoji} <b>{building}</b> مدرن احداث کرد!\\n\\n📈 اقتصاد قدرتمندتر شد!\\n💰 درآمد آینده افزایش یافت!\\n🌟 پیشرفت چشمگیر!\",\n            \"🔨 سرمایه‌گذاری بزرگ!\\n\\n{flag} <b>{country}</b> با ساخت {emoji} <b>{building}</b> اقتصاد خود را تقویت کرد!\\n\\n📊 ظرفیت تولید افزایش یافت\\n⚡ کارایی بهبود پیدا کرد\\n💎 آینده‌ای درخشان!\",\n            \"🏭 انقلاب صنعتی!\\n\\n{flag} در <b>{country}</b> یک {emoji} <b>{building}</b> پیشرفته راه‌اندازی شد!\\n\\n🚀 تکنولوژی مدرن\\n📈 رشد اقتصادی\\n🌟 توسعه پایدار\",\n            \"⚡ پروژه ملی کامل شد!\\n\\n{flag} <b>{country}</b> موفق به تکمیل {emoji} <b>{building}</b> شد!\\n\\n🎯 هدف‌گذاری موفق\\n💪 اقتصاد مقاوم\\n🏆 پیشرفت قابل توجه\",\n            \"🌟 دستاورد جدید!\\n\\n{flag} کشور <b>{country}</b> با افتتاح {emoji} <b>{building}</b> گامی بزرگ برداشت!\\n\\n🔥 توسعه سریع\\n📊 بهره‌وری بالا\\n💰 سودآوری مطمئن\"\n        ]\n\n        self.weapon_templates = {\n            'basic': [\n                \"⚔️ تقویت ارتش\\n\\n{flag} <b>{country}</b> یک {emoji} <b>{weapon}</b> جدید تولید کرد!\\n\\n💪 قدرت نظامی افزایش یافت!\\n🛡 آمادگی دفاعی بالا رفت!\",\n                \"🔫 ارتقای تسلیحات\\n\\n{flag} <b>{country}</b> موفق به ساخت {emoji} <b>{weapon}</b> شد!\\n\\n⚡ قدرت رزمی بهبود یافت\\n🎯 ظرفیت دفاعی افزایش یافت\",\n                \"⚔️ تجهیز نیروهای مسلح\\n\\n{flag} ارتش <b>{country}</b> به {emoji} <b>{weapon}</b> مجهز شد!\\n\\n🔥 آمادگی رزمی بالا\\n💪 قدرت بازدارندگی\"\n            ],\n            'nuclear': [\n                \"☢️ خبر فوری - سلاح هسته‌ای!\\n\\n{flag} <b>{country}</b> یک {emoji} <b>{weapon}</b> تولید کرد!\\n\\n🚨 این کشور به باشگاه هسته‌ای پیوست!\\n⚡ قدرت نظامی فوق‌العاده افزایش یافت!\\n🌍 تعادل قدرت جهانی تغییر کرد!\",\n                \"☢️ انقلاب هسته‌ای!\\n\\n{flag} <b>{country}</b> وارد عصر هسته‌ای شد!\\n\\n💥 {emoji} <b>{weapon}</b> تولید شد\\n🌍 قدرت جهانی جدید\\n⚡ بازدارندگی نهایی\",\n                \"🚨 هشدار هسته‌ای!\\n\\n{flag} <b>{country}</b> قدرت هسته‌ای کسب کرد!\\n\\n☢️ {emoji} <b>{weapon}</b> آماده\\n🌟 تکنولوژی پیشرفته\\n💪 قدرت استراتژیک\"\n            ],\n            'missile': [\n                \"🚀 توسعه موشکی پیشرفته!\\n\\n{flag} <b>{country}</b> یک {emoji} <b>{weapon}</b> مدرن تولید کرد!\\n\\n🎯 فناوری موشکی پیشرفته\\n🌐 قابلیت حمله دوربرد\\n💪 قدرت راهبردی بالا\",\n                \"🚀 پیشرفت موشکی!\\n\\n{flag} <b>{country}</b> به فناوری موشکی دست یافت!\\n\\n💥 {emoji} <b>{weapon}</b> تکمیل شد\\n🎯 دقت بالا\\n⚡ سرعت فوق‌صوت\",\n                \"🌐 قدرت موشکی!\\n\\n{flag} <b>{country}</b> ظرفیت موشکی خود را ارتقا داد!\\n\\n🚀 {emoji} <b>{weapon}</b> عملیاتی\\n💫 تکنولوژی مدرن\\n🏆 برتری تاکتیکی\"\n            ],\n            'aircraft': [\n                \"✈️ جنگنده نسل پنجم!\\n\\n{flag} <b>{country}</b> یک {emoji} <b>{weapon}</b> فوق پیشرفته تولید کرد!\\n\\n🔥 فناوری استلث\\n⚡ قدرت هوایی برتر\\n🌟 تکنولوژی نظامی مدرن\",\n                \"🛩 برتری هوایی!\\n\\n{flag} <b>{country}</b> نیروی هوایی خود را تقویت کرد!\\n\\n✈️ {emoji} <b>{weapon}</b> آماده پرواز\\n⚡ سرعت فوق‌صوت\\n🎯 دقت بالا\",\n                \"🌟 تکنولوژی هوایی!\\n\\n{flag} <b>{country}</b> به فناوری پیشرفته دست یافت!\\n\\n✈️ {emoji} <b>{weapon}</b> تحویل شد\\n🔥 قابلیت استلث\\n💪 قدرت رزمی بالا\"\n            ]\n        }\n\n        self.war_templates = {\n            'victory': [\n                \"🏆 پیروزی قاطع!\\n\\n{attacker_flag} <b>{attacker}</b> ⚔️ {defender_flag} <b>{defender}</b>\\n\\n🔥 نیروی حمله: {attack_power:,}\\n🛡 نیروی دفاع: {defense_power:,}\\n\\n✨ حمله موفقیت‌آمیز بود!\",\n                \"⚡ شکست کامل!\\n\\n{attacker_flag} <b>{attacker}</b> 💥 {defender_flag} <b>{defender}</b>\\n\\n⚔️ قدرت حمله: {attack_power:,}\\n🛡 قدرت دفاع: {defense_power:,}\\n\\n🎯 پیروزی درخشان!\",\n                \"💥 نبرد تاریخی!\\n\\n{attacker_flag} <b>{attacker}</b> VS {defender_flag} <b>{defender}</b>\\n\\n🔥 حمله: {attack_power:,}\\n🛡 دفاع: {defense_power:,}\\n\\n🏆 غلبه کامل!\"\n            ],\n            'defeat': [\n                \"🛡 دفاع قهرمانانه!\\n\\n{attacker_flag} <b>{attacker}</b> ⚔️ {defender_flag} <b>{defender}</b>\\n\\n🔥 نیروی حمله: {attack_power:,}\\n🛡 نیروی دفاع: {defense_power:,}\\n\\n💪 مقاومت موفق!\",\n                \"🏰 مقاومت شکست‌ناپذیر!\\n\\n{attacker_flag} <b>{attacker}</b> 💥 {defender_flag} <b>{defender}</b>\\n\\n⚔️ قدرت حمله: {attack_power:,}\\n🛡 قدرت دفاع: {defense_power:,}\\n\\n✋ حمله دفع شد!\",\n                \"⚡ دفاع موفق!\\n\\n{attacker_flag} <b>{attacker}</b> VS {defender_flag} <b>{defender}</b>\\n\\n🔥 حمله: {attack_power:,}\\n🛡 دفاع: {defense_power:,}\\n\\n🛡 پایداری کامل!\"\n            ]\n        }\n\n    def set_bot(self, bot):\n        \"\"\"Set bot instance\"\"\"\n        self.bot = bot\n\n    async def send_news(self, message):\n        \"\"\"Send news to channel\"\"\"\n        if not self.bot:\n            logger.error(\"Bot not set for news channel\")\n            return False\n\n        try:\n            await self.bot.send_message(chat_id=self.channel_id, text=message, parse_mode='HTML')\n            logger.info(f\"📢 News sent to {self.channel_id}: {message[:50]}...\")\n            return True\n        except TelegramError as e:\n            logger.error(f\"Failed to send news to channel: {e}\")\n            return False\n\n    async def send_convoy_news(self, message, keyboard=None, cargo_details=None):\n        \"\"\"Send convoy news with optional keyboard and detailed cargo info\"\"\"\n        try:\n            full_message = f\"🚛 انتقال منابع\\n\\n{message}\"\n\n            if cargo_details:\n                full_message += \"\\n\\n📦 جزئیات محموله:\"\n                for item, amount in cargo_details.items():\n                    if item == 'money':\n                        full_message += f\"\\n💰 پول: ${amount:,}\"\n                    else:\n                        from config import Config\n                        resource_config = Config.RESOURCES.get(item, {})\n                        resource_name = resource_config.get('name', item)\n                        resource_emoji = resource_config.get('emoji', '📦')\n                        full_message += f\"\\n{resource_emoji} {resource_name}: {amount:,}\"\n\n            if keyboard:\n                await self.bot.send_message(\n                    chat_id=self.channel_id,\n                    text=full_message,\n                    parse_mode='HTML',\n                    reply_markup=keyboard\n                )\n            else:\n                await self.bot.send_message(\n                    chat_id=self.channel_id,\n                    text=full_message,\n                    parse_mode='HTML'\n                )\n\n            logger.info(f\"📢 Convoy news sent to {self.channel_id}: 🚛 انتقال منابع...\")\n        except Exception as e:\n            logger.error(f\"Failed to send convoy news: {e}\")\n\n    async def send_player_joined(self, country_name, username):\n        \"\"\"Send player joined news\"\"\"\n        country_flag = self.get_country_flag(country_name)\n\n        # Select random template\n        template = random.choice(self.player_joined_templates)\n        message = template.format(\n            flag=country_flag,\n            country=country_name,\n            username=username\n        )\n\n        message += \"\\n\\n───────────────\"\n        await self.send_news(message)\n\n    async def send_building_constructed(self, country_name, building_name, quantity=1):\n        \"\"\"Send building construction news\"\"\"\n        country_flag = self.get_country_flag(country_name)\n\n        building_emojis = {\n            'iron_mine': '⛏', 'copper_mine': '⛏', 'oil_mine': '🛢', 'gas_mine': '⛽',\n            'aluminum_mine': '🔗', 'gold_mine': '🏆', 'uranium_mine': '☢️',\n            'lithium_mine': '🔋', 'coal_mine': '⚫', 'silver_mine': '🥈',\n            'weapon_factory': '🏭', 'refinery': '🏭', 'power_plant': '⚡',\n            'wheat_farm': '🌾', 'military_base': '🪖', 'housing': '🏘'\n        }\n\n        building_emoji = building_emojis.get(building_name.replace(' ', '_').lower(), '🏗')\n\n        # Select random template\n        template = random.choice(self.building_templates)\n        message = template.format(\n            flag=country_flag,\n            country=country_name,\n            emoji=building_emoji,\n            building=building_name\n        )\n\n        if quantity > 1:\n            message = message.replace(f\"یک {building_emoji} <b>{building_name}</b>\", f\"<b>{quantity:,} عدد</b> {building_emoji} <b>{building_name}</b>\")\n\n        message += \"\\n\\n───────────────\"\n        await self.send_news(message)\n\n    async def send_weapon_produced(self, country_name, weapon_name, quantity=1):\n        \"\"\"Send weapon production news - disabled for most weapons, only special ones\"\"\"\n        # فقط برای سلاح‌های هسته‌ای و زیردریایی‌های خاص خبر بفرست\n        nuclear_weapons = ['بمب هسته‌ای', 'موشک هسته‌ای', 'Trident 2 هسته‌ای', 'Satan2 هسته‌ای', 'DF-41 هسته‌ای', 'Tomahawk هسته‌ای']\n        special_subs = ['زیردریایی هسته‌ای']\n        \n        if not any(nuke in weapon_name for nuke in nuclear_weapons) and not any(sub in weapon_name for sub in special_subs):\n            return  # خبری ارسال نمی‌شود\n\n        country_flag = self.get_country_flag(country_name)\n        weapon_emoji = '☢️' if 'هسته‌ای' in weapon_name else '⚔️'\n\n        message = f\"\"\"⚠️ توسعه تسلیحات خطرناک!\n\n{country_flag} <b>{country_name}</b> یک {weapon_emoji} <b>{weapon_name}</b> تولید کرد!\n\n🚨 این سلاح تعادل قدرت را تغییر می‌دهد!\"\"\"\n\n        if quantity > 1:\n            message = message.replace(f\"یک {weapon_emoji} <b>{weapon_name}</b>\", f\"<b>{quantity:,} عدد</b> {weapon_emoji} <b>{weapon_name}</b>\")\n\n        message += \"\\n\\n───────────────\"\n        await self.send_news(message)\n\n    async def send_war_report(self, battle_result):\n        \"\"\"Send war report\"\"\"\n        attacker_flag = self.get_country_flag(battle_result['attacker_country'])\n        defender_flag = self.get_country_flag(battle_result['defender_country'])\n\n        # Select appropriate template based on battle outcome\n        if battle_result['success']:\n            template = random.choice(self.war_templates['victory'])\n        else:\n            template = random.choice(self.war_templates['defeat'])\n\n        message = template.format(\n            attacker_flag=attacker_flag,\n            attacker=battle_result['attacker_country'],\n            defender_flag=defender_flag,\n            defender=battle_result['defender_country'],\n            attack_power=battle_result['attack_power'],\n            defense_power=battle_result['defense_power']\n        )\n\n        # Add losses information\n        if battle_result['success'] and battle_result.get('stolen_resources'):\n            message += \"\\n\\n💎 غنائم جنگی:\"\n            for resource, amount in battle_result['stolen_resources'].items():\n                resource_config = Config.RESOURCES.get(resource, {})\n                resource_name = resource_config.get('name', resource)\n                resource_emoji = resource_config.get('emoji', '📦')\n                message += f\"\\n{resource_emoji} {resource_name}: {amount:,}\"\n\n        message += \"\\n\\n───────────────\"\n        await self.send_news(message)\n\n    async def send_official_statement(self, country_name, statement, with_penalty_button=False):\n        \"\"\"Send official statement to news channel\"\"\"\n        message = f\"\"\"📢 بیانیه رسمی\n\n🏛 <b>{country_name}</b>\n\n💬 {statement}\n\n🗓 {datetime.now().strftime('%Y-%m-%d %H:%M')}\"\"\"\n\n        keyboard = None\n        if with_penalty_button:\n            from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n            keyboard = InlineKeyboardMarkup([\n                [\n                    InlineKeyboardButton(\"💰 جریمه مالی\", callback_data=f\"penalty_money_{country_name}\"),\n                    InlineKeyboardButton(\"📦 مصادره منابع\", callback_data=f\"penalty_resources_{country_name}\")\n                ],\n                [\n                    InlineKeyboardButton(\"⚔️ مصادره تسلیحات\", callback_data=f\"penalty_weapons_{country_name}\")\n                ]\n            ])\n\n        if keyboard:\n            await self.send_message_with_keyboard(message, keyboard)\n        else:\n            await self.send_text_message(message)\n\n    async def send_resource_transfer(self, sender_country, receiver_country, transfer_description, travel_time):\n        \"\"\"Send resource transfer news\"\"\"\n        sender_flag = self.get_country_flag(sender_country)\n        receiver_flag = self.get_country_flag(receiver_country)\n\n        message = f\"\"\"📬 انتقال منابع فوری!\n\n🚁 {sender_flag} <b>{sender_country}</b> در حال ارسال منابع به {receiver_flag} <b>{receiver_country}</b>\n\n💰 محموله: {transfer_description}\n\n⚡ انتقال فوری انجام شد!\n🛡 محموله با موفقیت تحویل داده شد.\n\n───────────────\"\"\"\n\n        await self.send_news(message)\n\n    async def send_convoy_attacked(self, attacker_country, convoy_route, stolen_resources):\n        \"\"\"Send convoy attack news\"\"\"\n        attacker_flag = self.get_country_flag(attacker_country)\n\n        message = f\"\"\"💥 حمله به کاروان!\n\n{attacker_flag} <b>{attacker_country}</b> به کاروان {convoy_route} حمله کرد!\n\n🏴‍☠️ منابع دزدیده شده:\"\"\"\n\n        for resource, amount in stolen_resources.items():\n            resource_config = Config.RESOURCES.get(resource, {})\n            resource_name = resource_config.get('name', resource)\n            resource_emoji = resource_config.get('emoji', '📦')\n            message += f\"\\n{resource_emoji} {resource_name}: {amount:,}\"\n\n        message += \"\\n\\n───────────────\"\n        await self.send_news(message)\n\n    async def send_income_cycle_complete(self):\n        \"\"\"Send income cycle completion news\"\"\"\n        message = f\"\"\"💰 چرخه اقتصادی ۶ ساعته تکمیل شد!\n\n✨ همه کشورها درآمد دریافت کردند\n⛏ معادن منابع تولید کردند  \n🌾 مزارع جمعیت تولید کردند\n🪖 پادگان‌ها سرباز آموزش دادند\n\n🌍 اقتصاد جهانی در حال رشد است!\n📊 آماده برای چرخه بعدی...\n\n───────────────\"\"\"\n\n        await self.send_news(message)\n\n    async def send_alliance_formed(self, country1, country2):\n        \"\"\"Send alliance formation news\"\"\"\n        flag1 = self.get_country_flag(country1)\n        flag2 = self.get_country_flag(country2)\n\n        message = f\"\"\"🤝 تشکیل اتحاد\n\n{flag1} <b>{country1}</b> و {flag2} <b>{country2}</b> اتحاد تشکیل دادند!\n\nقدرت ترکیبی آنها افزایش یافت 💪\n\n───────────────\"\"\"\n\n        await self.send_news(message)\n\n    async def send_peace_treaty(self, country1, country2):\n        \"\"\"Send peace treaty news\"\"\"\n        flag1 = self.get_country_flag(country1)\n        flag2 = self.get_country_flag(country2)\n\n        message = f\"\"\"🕊 پیمان صلح\n\n{flag1} <b>{country1}</b> و {flag2} <b>{country2}</b> پیمان صلح امضا کردند!\n\nجنگ بین این دو کشور متوقف شد ✋\n\n───────────────\"\"\"\n\n        await self.send_news(message)\n\n    def get_country_flag(self, country_name):\n        \"\"\"Get country flag by name\"\"\"\n        for code, name in Config.COUNTRIES.items():\n            if name == country_name:\n                return Config.COUNTRY_FLAGS.get(code, \"🏳\")\n        return \"🏳\"\n\n    async def send_game_event(self, event_type, **kwargs):\n        \"\"\"Send generic game event\"\"\"\n        event_messages = {\n            'nuclear_weapon': f\"☢️ {kwargs['country']} سلاح هسته‌ای تولید کرد!\",\n            'economic_boom': f\"📈 {kwargs['country']} رشد اقتصادی بالایی داشته!\",\n            'military_exercise': f\"🪖 {kwargs['country']} رزمایش نظامی برگزار کرد!\",\n            'trade_agreement': f\"📋 {kwargs['country1']} و {kwargs['country2']} توافق تجاری امضا کردند!\",\n        }\n\n        message = event_messages.get(event_type, \"🎮 رویداد جدید در بازی!\")\n        message += \"\\n\\n───────────────\"\n\n        await self.send_news(message)\n\n    async def send_text_message(self, message):\n        \"\"\"Send a text message to the news channel\"\"\"\n        message += \"\\n\\n───────────────\"\n        await self.send_news(message)\n\n    async def send_marketplace_purchase(self, result):\n        \"\"\"Send marketplace purchase news\"\"\"\n        try:\n            if not self.bot:\n                return\n\n            purchase_text = f\"\"\"🛒 خرید از فروشگاه\n\n{result.get('buyer_country', 'کشور خریدار')} کالایی را از {result.get('seller_country', 'کشور فروشنده')} خریداری کرد.\n\n🚚 محموله در حال ارسال است...\"\"\"\n\n            await self.bot.send_message(chat_id=self.channel_id, text=purchase_text)\n\n        except Exception as e:\n            logger.error(f\"Error sending marketplace news: {e}\")\n\n    async def send_war_news(self, attacker_country, defender_country, result):\n        \"\"\"Send war news to channel\"\"\"\n        if result['success']:\n            if result.get('conquest_mode'):\n                message = f\"\"\"🏴‍☠️ فتح کشور!\n\n⚔️ <b>{attacker_country}</b> در نبرد با <b>{defender_country}</b> پیروز شد و بخشی از سرزمین‌هایش را فتح کرد!\n\n💥 قدرت حمله: {result['attack_power']:,}\n🛡 قدرت دفاع: {result.get('effective_defense_power', result['defense_power']):,}\n💀 خسارت وارده: {result['damage']:,.0f}\n\n🏆 فاتح: {attacker_country}\"\"\"\n            else:\n                message = f\"\"\"⚔️ پیروزی در جنگ!\n\n🏛 <b>{attacker_country}</b> در نبرد با <b>{defender_country}</b> پیروز شد!\n\n💥 قدرت حمله: {result['attack_power']:,}\n🛡 قدرت دفاع: {result['defense_power']:,}\n💀 خسارت وارده: {result['damage']:,.0f}\n\n🏆 برنده: {attacker_country}\"\"\"\n\n            # نمایش منابع غارت شده\n            if result.get('stolen_resources'):\n                message += \"\\n\\n💰 منابع غارت شده:\"\n                for resource, amount in result['stolen_resources'].items():\n                    resource_config = Config.RESOURCES.get(resource, {})\n                    resource_name = resource_config.get('name', resource)\n                    resource_emoji = resource_config.get('emoji', '📦')\n                    message += f\"\\n{resource_emoji} {resource_name}: {amount:,}\"\n\n            # نمایش معادن فتح شده\n            if result.get('conquered_buildings'):\n                message += \"\\n\\n🏭 معادن فتح شده:\"\n                for building_type, count in result['conquered_buildings'].items():\n                    building_config = Config.BUILDINGS.get(building_type, {})\n                    building_name = building_config.get('name', building_type)\n                    message += f\"\\n⛏ {building_name}: {count:,} عدد\"\n\n        else:\n            message = f\"\"\"🛡 دفاع موفق!\n\n🏛 <b>{defender_country}</b> از حمله <b>{attacker_country}</b> دفاع کرد!\n\n💥 قدرت حمله: {result['attack_power']:,}\n🛡 قدرت دفاع: {result['defense_power']:,}\n\n🏆 برنده: {defender_country}\"\"\"\n\n            if result.get('attacker_losses'):\n                message += \"\\n\\n💀 تلفات مهاجم:\"\n                for loss_type, amount in result['attacker_losses'].items():\n                    if loss_type == 'soldiers':\n                        message += f\"\\n• سربازان: {amount:,}\"\n                    else:\n                        weapon_config = Config.WEAPONS.get(loss_type, {})\n                        weapon_name = weapon_config.get('name', loss_type)\n                        message += f\"\\n• {weapon_name}: {amount:,}\"\n\n        await self.send_text_message(message)\n\n    async def send_official_statement(self, country_name, statement, with_penalty_button=False):\n        \"\"\"Send official statement to news channel\"\"\"\n        message = f\"\"\"📢 بیانیه رسمی\n\n🏛 <b>{country_name}</b>\n\n💬 {statement}\n\n🗓 {datetime.now().strftime('%Y-%m-%d %H:%M')}\"\"\"\n\n        keyboard = None\n        if with_penalty_button:\n            from telegram import InlineKeyboardButton, InlineKeyboardMarkup\n            keyboard = InlineKeyboardMarkup([\n                [\n                    InlineKeyboardButton(\"💰 جریمه مالی\", callback_data=f\"penalty_money_{country_name}\"),\n                    InlineKeyboardButton(\"📦 مصادره منابع\", callback_data=f\"penalty_resources_{country_name}\")\n                ],\n                [\n                    InlineKeyboardButton(\"⚔️ مصادره تسلیحات\", callback_data=f\"penalty_weapons_{country_name}\")\n                ]\n            ])\n\n        if keyboard:\n            await self.send_message_with_keyboard(message, keyboard)\n        else:\n            await self.send_text_message(message)","size_bytes":25921},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"apscheduler>=3.11.0\",\n    \"python-telegram-bot==20.7\",\n    \"telegram>=0.0.1\",\n]\n","size_bytes":227},"replit.md":{"content":"# DragonRP Telegram Bot\n\n## Overview\n\nDragonRP is a strategic Telegram bot game where players take control of countries and engage in economic, military, and diplomatic activities. Players can build infrastructure, produce weapons, manage resources, and interact with other nations in a real-time multiplayer environment. The game features a comprehensive economy system, combat mechanics, and administrative tools for game management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 26, 2025)\n\n### Bug Fixes and Improvements:\n1. **Fixed marketplace delivery system**: Improved weapon delivery success rates from 50% minimum to 70% minimum, with partial refunds (50%) for failed deliveries\n2. **Enhanced marketplace transparency**: Added delivery success chance indicators (🟢🟡🔴) in weapon listings\n3. **Added purchase history feature**: Players can now view their transaction history to see why weapons may not have been delivered\n4. **Fixed AttributeError**: Resolved 'NoneType' error in handle_message function\n5. **Added comprehensive logging**: Enhanced weapon production debugging to track the exact flow of weapon additions to player inventory\n\n### Bug Resolution Status:\n- ✅ **FIXED: Weapon production system working correctly** - weapons are being added to database\n- ✅ **FIXED: Trident 2 requirements** - corrected to require 13 bombs instead of 12\n- ✅ **CONFIRMED: User has 4 rifles in database** - production successful\n- ✅ **FIXED: Military menu display** - now shows comprehensive weapon inventory with categorization\n- ✅ **ADDED: Distance-based attack system** - weapons are restricted by range based on country proximity\n\n## System Architecture\n\n### Core Architecture Pattern\nThe application follows a modular architecture with clear separation of concerns. Each major game system is implemented as a separate class with its own responsibilities:\n\n- **Database Layer**: SQLite-based persistence with a dedicated Database class handling all data operations\n- **Game Logic Layer**: Business logic separated into specialized managers (GameLogic, Economy, CombatSystem, CountryManager)\n- **Bot Interface Layer**: Telegram bot integration with keyboard handlers and command processors\n- **Admin Layer**: Administrative tools with role-based access control\n\n### Data Storage Design\nThe system uses SQLite as the primary database with the following key tables:\n- **Players**: Core player information including country assignments, money, population, and soldiers\n- **Resources**: Natural resources like iron, oil, uranium with quantity tracking\n- **Buildings**: Infrastructure tracking (mines, factories, military bases)\n- **Weapons**: Military equipment inventory (tanks, jets, missiles)\n- **Combat Logs**: Historical battle records and outcomes\n\n### Game Systems Architecture\n\n**Economic System**: \n- Automated income calculation every 6 hours based on building ownership\n- Resource production from mines with realistic yield rates\n- Population growth mechanics tied to wheat farm construction\n- Building cost/benefit analysis with percentage-based returns\n\n**Military System**:\n- Combat power calculation combining multiple weapon types\n- Defense mechanisms with type-specific bonuses (air defense, missile shields)\n- Attack type categorization (ground, air, naval, missile, mixed)\n- Soldier recruitment through military base infrastructure\n\n**Administrative System**:\n- Role-based admin access with hardcoded admin user IDs\n- Game statistics monitoring and player management tools\n- Data reset capabilities for game maintenance\n- Comprehensive logging for audit trails\n\n### Bot Interface Design\nThe Telegram integration uses the python-telegram-bot library with:\n- **Inline Keyboards**: Dynamic menu systems for game interactions\n- **Callback Handlers**: Asynchronous event processing for user actions\n- **Scheduled Tasks**: APScheduler for periodic income distribution and game updates\n- **News Broadcasting**: Automated announcements to a dedicated Telegram channel\n\n### Country Management\nPlayers select from 24 predefined countries with realistic geographic relationships:\n- **Unique Assignment**: Each country can only be controlled by one player\n- **Neighbor System**: Geographic proximity affects diplomatic and military interactions\n- **Cultural Localization**: All content presented in Persian language with appropriate country flags\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **python-telegram-bot**: Telegram Bot API integration for user interface and messaging\n- **APScheduler**: Asynchronous task scheduling for periodic game events (income distribution, updates)\n- **SQLite3**: Built-in database engine for persistent data storage\n\n### Game Configuration\n- **Static Configuration**: All game constants (weapon stats, building costs, country data) defined in Config class\n- **No External APIs**: Game operates independently without external service dependencies\n- **Local File Storage**: Database and logs stored locally on the server\n\n### Communication Infrastructure\n- **Telegram Bot API**: Primary interface for player interactions\n- **News Channel Integration**: Broadcasts game events to @Dragon0RP Telegram channel\n- **Logging System**: Python logging module for debugging and audit trails\n\n### Scalability Considerations\nThe current architecture uses SQLite which is suitable for small to medium player bases. The modular design allows for future migration to PostgreSQL or other databases if needed. The bot token and admin configurations are environment-variable ready for deployment flexibility.","size_bytes":5626},"weapons/__init__.py":{"content":"\nfrom .basic_weapons import BASIC_WEAPONS\nfrom .defense_weapons import DEFENSE_WEAPONS\nfrom .advanced_jets import ADVANCED_JETS\nfrom .missiles import MISSILES\nfrom .special_missiles import SPECIAL_MISSILES\nfrom .transport_equipment import TRANSPORT_EQUIPMENT\nfrom .bombs import BOMBS\nfrom .naval_weapons import NAVAL_WEAPONS\n\n# ترکیب تمام سلاح‌ها\nALL_WEAPONS = {}\nALL_WEAPONS.update(BASIC_WEAPONS)\nALL_WEAPONS.update(DEFENSE_WEAPONS)\nALL_WEAPONS.update(ADVANCED_JETS)\nALL_WEAPONS.update(MISSILES)\nALL_WEAPONS.update(SPECIAL_MISSILES)\nALL_WEAPONS.update(TRANSPORT_EQUIPMENT)\nALL_WEAPONS.update(BOMBS)\nALL_WEAPONS.update(NAVAL_WEAPONS)\n\n# دسته‌بندی سلاح‌ها برای نمایش در منو\nWEAPON_CATEGORIES = {\n    'basic': {\n        'name': 'سلاح‌های پایه',\n        'weapons': BASIC_WEAPONS\n    },\n    'defense': {\n        'name': 'سیستم‌های دفاعی', \n        'weapons': DEFENSE_WEAPONS\n    },\n    'naval': {\n        'name': 'تسلیحات دریایی',\n        'weapons': NAVAL_WEAPONS\n    },\n    'advanced_jets': {\n        'name': 'جت‌های پیشرفته',\n        'weapons': ADVANCED_JETS\n    },\n    'missiles': {\n        'name': 'موشک‌های ساده',\n        'weapons': MISSILES\n    },\n    'special_missiles': {\n        'name': 'موشک‌های مخصوص',\n        'weapons': SPECIAL_MISSILES\n    },\n    'transport': {\n        'name': 'تجهیزات حمل و نقل',\n        'weapons': TRANSPORT_EQUIPMENT\n    },\n    'bombs': {\n        'name': 'بمب‌ها و مواد منفجره',\n        'weapons': BOMBS\n    }\n}\n\ndef get_weapon_info(weapon_key):\n    \"\"\"دریافت اطلاعات کامل یک سلاح\"\"\"\n    return ALL_WEAPONS.get(weapon_key)\n\ndef get_weapons_by_category(category):\n    \"\"\"دریافت سلاح‌های یک دسته\"\"\"\n    return WEAPON_CATEGORIES.get(category, {}).get('weapons', {})\n\ndef get_all_categories():\n    \"\"\"دریافت تمام دسته‌بندی‌ها\"\"\"\n    return WEAPON_CATEGORIES\n\ndef get_weapon_requirements(weapon_key):\n    \"\"\"دریافت پیش‌نیازهای ساخت یک سلاح\"\"\"\n    weapon = ALL_WEAPONS.get(weapon_key)\n    if weapon:\n        return weapon.get('requirements', [])\n    return []\n\ndef calculate_weapon_cost(weapon_key, quantity=1):\n    \"\"\"محاسبه کل هزینه ساخت سلاح\"\"\"\n    weapon = ALL_WEAPONS.get(weapon_key)\n    if weapon:\n        return weapon.get('cost', 0) * quantity\n    return 0\n\ndef get_weapon_resources(weapon_key):\n    \"\"\"دریافت منابع مورد نیاز برای ساخت سلاح\"\"\"\n    weapon = ALL_WEAPONS.get(weapon_key)\n    if weapon:\n        return weapon.get('resources', {})\n    return {}\n","size_bytes":2701},"weapons/advanced_jets.py":{"content":"\n# جت‌های پیشرفته و جنگنده‌های نسل پنجم\n\nADVANCED_JETS = {\n    'f22': {\n        'name': 'F-22 رپتور',\n        'cost': 20000,\n        'power': 980,\n        'range': 3000,\n        'speed': 2400,\n        'armor': 800,\n        'resources': {'titanium': 9, 'iron': 15, 'aluminum': 30, 'copper': 9, 'gold': 3},\n        'category': 'advanced_jets',\n        'description': 'جنگنده پنهان‌کار آمریکایی',\n        'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n        'production_time': 360,\n        'stealth': True,\n        'air_superiority': 95\n    },\n    'f35': {\n        'name': 'F-35 لایتنینگ',\n        'cost': 18000,\n        'power': 950,\n        'range': 2800,\n        'speed': 1900,\n        'armor': 600,\n        'resources': {'titanium': 9, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2},\n        'category': 'advanced_jets',\n        'description': 'جنگنده چندمنظوره پیشرفته',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 300,\n        'multirole': True,\n        'air_superiority': 88\n    },\n    'su57': {\n        'name': 'Su-57 فلون',\n        'cost': 18000,\n        'power': 940,\n        'range': 2700,\n        'speed': 2100,\n        'armor': 750,\n        'resources': {'titanium': 9, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2},\n        'category': 'advanced_jets',\n        'description': 'جنگنده پنهان‌کار روسی',\n        'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n        'production_time': 320,\n        'stealth': True,\n        'air_superiority': 92\n    },\n    'j20': {\n        'name': 'J-20 اژدر قدرتمند',\n        'cost': 15000,\n        'power': 920,\n        'range': 2500,\n        'speed': 2000,\n        'armor': 650,\n        'resources': {'titanium': 9, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2},\n        'category': 'advanced_jets',\n        'description': 'جنگنده پنهان‌کار چینی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 280,\n        'stealth': True,\n        'air_superiority': 85\n    },\n    'f15ex': {\n        'name': 'F-15EX ایگل',\n        'cost': 15000,\n        'power': 910,\n        'range': 2400,\n        'speed': 2650,\n        'armor': 500,\n        'resources': {'titanium': 6, 'iron': 15, 'aluminum': 30, 'copper': 9, 'gold': 3},\n        'category': 'advanced_jets',\n        'description': 'جنگنده سنگین آمریکایی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 250,\n        'heavy_fighter': True,\n        'air_superiority': 82\n    },\n    'su35s': {\n        'name': 'Su-35S فلنکر',\n        'cost': 15000,\n        'power': 900,\n        'range': 2300,\n        'speed': 2500,\n        'armor': 550,\n        'resources': {'titanium': 6, 'iron': 10, 'aluminum': 21, 'copper': 6, 'gold': 2},\n        'category': 'advanced_jets',\n        'description': 'جنگنده چندمنظوره روسی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 240,\n        'multirole': True,\n        'air_superiority': 80\n    }\n}\n","size_bytes":3217},"weapons/basic_weapons.py":{"content":"\n# سلاح‌های پایه\n\nBASIC_WEAPONS = {\n    'rifle': {\n        'name': 'تفنگ جنگی',\n        'cost': 1500,\n        'power': 5,\n        'range': 300,\n        'speed': 0,\n        'armor': 0,\n        'resources': {'iron': 5, 'copper': 2},\n        'category': 'basic',\n        'description': 'سلاح پایه پیاده‌نظام',\n        'requirements': [],\n        'production_time': 1  # دقیقه\n    },\n    'tank': {\n        'name': 'تانک جنگی',\n        'cost': 8500,\n        'power': 1200,\n        'range': 500,\n        'speed': 60,\n        'armor': 800,\n        'resources': {'iron': 50, 'copper': 15, 'aluminum': 10},\n        'category': 'basic',\n        'description': 'تانک سنگین برای نبرد زمینی',\n        'requirements': ['weapon_factory'],\n        'production_time': 60\n    },\n    'fighter_jet': {\n        'name': 'جنگنده',\n        'cost': 25000,\n        'power': 2000,\n        'range': 1200,\n        'speed': 800,\n        'armor': 300,\n        'resources': {'aluminum': 30, 'titanium': 15, 'copper': 20},\n        'category': 'basic',\n        'description': 'جنگنده چندمنظوره',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 120\n    },\n    'helicopter': {\n        'name': 'هلیکوپتر جنگی',\n        'cost': 18000,\n        'power': 2400,\n        'range': 1500,\n        'resources': {'aluminum': 30, 'iron': 20, 'copper': 10},\n        'category': 'basic',\n        'description': 'هلیکوپتر نظامی',\n        'requirements': ['weapon_factory'],\n        'production_time': 90\n    },\n    'jet': {\n        'name': 'جت جنگی',\n        'cost': 35000,\n        'power': 3200,\n        'range': 2000,\n        'speed': 1200,\n        'armor': 400,\n        'resources': {'aluminum': 40, 'iron': 25, 'copper': 15, 'titanium': 5},\n        'category': 'basic',\n        'description': 'جت پیشرفته',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 150\n    },\n    'drone': {\n        'name': 'پهپاد نظامی',\n        'cost': 1800,\n        'power': 800,\n        'range': 1000,\n        'speed': 200,\n        'armor': 50,\n        'resources': {'aluminum': 10, 'copper': 8, 'lithium': 5},\n        'category': 'basic',\n        'description': 'پهپاد مسلح با قابلیت نظارت',\n        'requirements': ['weapon_factory'],\n        'production_time': 30\n    },\n    'strategic_bomber': {\n        'name': 'بمب‌افکن استراتژیک',\n        'cost': 85000,\n        'power': 4500,\n        'range': 4500,\n        'speed': 900,\n        'armor': 600,\n        'resources': {'aluminum': 60, 'titanium': 25, 'fuel': 50},\n        'category': 'basic',\n        'description': 'بمب‌افکن سنگین برای حملات استراتژیک',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 300\n    },\n\n    # تانک‌های مدرن\n    'kf51_panther': {\n        'name': 'KF51 Panther',\n        'cost': 9000,\n        'power': 100,\n        'range': 600,\n        'speed': 70,\n        'armor': 900,\n        'resources': {'iron': 30, 'copper': 3, 'aluminum': 30},\n        'category': 'basic',\n        'description': 'تانک مدرن آلمانی',\n        'requirements': ['weapon_factory'],\n        'production_time': 45\n    },\n    'abrams_x': {\n        'name': 'AbramsX',\n        'cost': 9000,\n        'power': 99,\n        'range': 580,\n        'speed': 68,\n        'armor': 880,\n        'resources': {'iron': 21, 'copper': 3, 'titanium': 1},\n        'category': 'basic',\n        'description': 'تانک پیشرفته آمریکایی',\n        'requirements': ['weapon_factory'],\n        'production_time': 45\n    },\n    'm1e3_abrams': {\n        'name': 'M1E3 Abrams',\n        'cost': 6000,\n        'power': 98,\n        'range': 570,\n        'speed': 65,\n        'armor': 850,\n        'resources': {'iron': 21, 'copper': 3, 'titanium': 1},\n        'category': 'basic',\n        'description': 'نسخه بهبود یافته ابرامز',\n        'requirements': ['weapon_factory'],\n        'production_time': 40\n    },\n    't90ms_proryv': {\n        'name': 'T-90MS Proryv',\n        'cost': 6000,\n        'power': 95,\n        'range': 550,\n        'speed': 62,\n        'armor': 820,\n        'resources': {'iron': 21, 'copper': 3, 'titanium': 1},\n        'category': 'basic',\n        'description': 'تانک مدرن روسی',\n        'requirements': ['weapon_factory'],\n        'production_time': 40\n    },\n    'm1a2_abrams_sepv3': {\n        'name': 'M1A2 Abrams SEPv3',\n        'cost': 3000,\n        'power': 80,\n        'range': 500,\n        'speed': 55,\n        'armor': 750,\n        'resources': {'iron': 18, 'copper': 3},\n        'category': 'basic',\n        'description': 'تانک استاندارد آمریکایی',\n        'requirements': ['weapon_factory'],\n        'production_time': 35\n    }\n}\n","size_bytes":4941},"weapons/bombs.py":{"content":"\n# بمب‌ها و مواد منفجره\n\nBOMBS = {\n    'simple_bomb': {\n        'name': 'بمب ساده',\n        'cost': 2000,\n        'power': 60,\n        'range': 0,\n        'speed': 0,\n        'armor': 0,\n        'resources': {'nitro': 10, 'copper': 10, 'iron': 20, 'sulfur': 20},\n        'category': 'bombs',\n        'description': 'اسیب کم و فاقد برد، بیشتر برای ساخت موشک‌های دارای کلاهک غیر هسته‌ای استفاده می‌شود',\n        'requirements': ['weapon_factory'],\n        'production_time': 15,\n        'explosive_power': 'low'\n    },\n    'nuclear_bomb': {\n        'name': 'بمب هسته‌ای ساده',\n        'cost': 60000,\n        'power': 2000,\n        'range': 0,\n        'speed': 0,\n        'armor': 0,\n        'resources': {'iron': 30, 'uranium': 6, 'sulfur': 36},\n        'category': 'bombs',\n        'description': 'بمب هسته‌ای کوچک',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 180,\n        'explosive_power': 'nuclear',\n        'radioactive': True\n    }\n}\n","size_bytes":1108},"weapons/defense_weapons.py":{"content":"\n# سلاح‌های دفاعی\n\nDEFENSE_WEAPONS = {\n    'air_defense': {\n        'name': 'پدافند هوایی',\n        'cost': 8000,\n        'power': 1500,\n        'range': 1000,\n        'speed': 0,\n        'armor': 600,\n        'resources': {'iron': 25, 'aluminum': 15, 'copper': 12},\n        'category': 'defense',\n        'description': 'سیستم دفاع ضدهوایی',\n        'requirements': ['weapon_factory'],\n        'production_time': 90,\n        'defense_bonus': 150\n    },\n    'missile_shield': {\n        'name': 'سپر موشکی',\n        'cost': 15000,\n        'power': 2500,\n        'range': 1500,\n        'speed': 0,\n        'armor': 1000,\n        'resources': {'titanium': 20, 'aluminum': 25, 'uranium': 5},\n        'category': 'defense',\n        'description': 'سیستم رهگیری موشک‌ها',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 150,\n        'defense_bonus': 250\n    },\n    'cyber_shield': {\n        'name': 'سپر سایبری',\n        'cost': 9000,\n        'power': 800,\n        'range': 0,\n        'speed': 0,\n        'armor': 0,\n        'resources': {'lithium': 15, 'gold': 8, 'copper': 20},\n        'category': 'defense',\n        'description': 'سیستم دفاع سایبری',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 120,\n        'defense_bonus': 200\n    },\n\n    # سیستم‌های دفاعی جدید\n    's500_defense': {\n        'name': 'پدافند S-500',\n        'cost': 30000,\n        'power': 5000,\n        'range': 2000,\n        'speed': 0,\n        'armor': 1500,\n        'resources': {'simple_missile': 6, 'sulfur': 60, 'nitro': 60, 'iron': 150, 'copper': 60, 'aluminum': 30},\n        'category': 'defense',\n        'description': 'سیستم دفاع پیشرفته روسی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 200,\n        'defense_bonus': 500\n    },\n    'thaad_defense': {\n        'name': 'پدافند THAAD',\n        'cost': 21000,\n        'power': 4500,\n        'range': 1800,\n        'speed': 0,\n        'armor': 1400,\n        'resources': {'simple_missile': 3, 'sulfur': 60, 'nitro': 60, 'iron': 150, 'copper': 60, 'aluminum': 30},\n        'category': 'defense',\n        'description': 'سیستم دفاع موشکی آمریکایی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 180,\n        'defense_bonus': 450\n    },\n    's400_defense': {\n        'name': 'پدافند S-400',\n        'cost': 18000,\n        'power': 4000,\n        'range': 1600,\n        'speed': 0,\n        'armor': 1300,\n        'resources': {'simple_missile': 3, 'sulfur': 60, 'nitro': 60, 'iron': 120, 'copper': 60, 'aluminum': 30},\n        'category': 'defense',\n        'description': 'سیستم دفاع متوسط روسی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 160,\n        'defense_bonus': 400\n    },\n    'iron_dome': {\n        'name': 'پدافند Iron Dome',\n        'cost': 15000,\n        'power': 3600,\n        'range': 1400,\n        'speed': 0,\n        'armor': 1200,\n        'resources': {'simple_missile': 3, 'sulfur': 30, 'nitro': 30, 'iron': 90, 'copper': 60, 'aluminum': 30},\n        'category': 'defense',\n        'description': 'سیستم دفاع کوتاه برد اسرائیلی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 140,\n        'defense_bonus': 360\n    },\n    'slq32_ew': {\n        'name': 'پدافند جنگ الکترونیک SLQ-32',\n        'cost': 21000,\n        'power': 4000,\n        'range': 1500,\n        'speed': 0,\n        'armor': 1000,\n        'resources': {'uranium': 3, 'iron': 150, 'copper': 120, 'aluminum': 60},\n        'category': 'defense',\n        'description': 'سیستم جنگ الکترونیک دریایی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 180,\n        'defense_bonus': 400\n    },\n    'phalanx_ciws': {\n        'name': 'توپخانه Phalanx CIWS',\n        'cost': 21000,\n        'power': 4000,\n        'range': 800,\n        'speed': 0,\n        'armor': 1100,\n        'resources': {'iron': 150, 'copper': 120, 'aluminum': 60, 'sulfur': 150, 'nitro': 60},\n        'category': 'defense',\n        'description': 'سیستم دفاع نزدیک دریایی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 170,\n        'defense_bonus': 400\n    }\n}\n","size_bytes":4535},"weapons/missiles.py":{"content":"# موشک‌ها\n\nMISSILES = {\n    'simple_missile': {\n        'name': 'موشک ساده',\n        'cost': 3000,\n        'power': 60,\n        'range': 500,\n        'speed': 800,\n        'armor': 0,\n        'resources': {'nitro': 10, 'copper': 10, 'iron': 20, 'sulfur': 20, 'coal': 10},\n        'category': 'missiles',\n        'description': 'اسیب کم و برد کم',\n        'requirements': ['weapon_factory'],\n        'production_time': 30,\n        'destructive_power': 'low'\n    },\n    'ballistic_missile': {\n        'name': 'موشک بالستیک ساده',\n        'cost': 9000,\n        'power': 80,\n        'range': 2000,\n        'speed': 1500,\n        'armor': 0,\n        'resources': {'nitro': 15, 'copper': 15, 'iron': 40, 'sulfur': 40, 'coal': 20},\n        'category': 'missiles',\n        'description': 'اسیب کم اما برد زیاد، بیشتر برای ساخت موشک هسته‌ای و یا بقیه موشک‌ها استفاده می‌شود',\n        'requirements': ['weapon_factory'],\n        'production_time': 60,\n        'destructive_power': 'medium'\n    },\n    'nuclear_missile': {\n        'name': 'موشک هسته‌ای ساده',\n        'cost': 9000,\n        'power': 2000,\n        'range': 2000,\n        'speed': 1500,\n        'armor': 0,\n        'resources': {'nuclear_bomb': 1, 'ballistic_missile': 1, 'iron': 30, 'sulfur': 30},\n        'category': 'missiles',\n        'description': 'ارزان‌ترین موشک هسته‌ای بازی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 120,\n        'destructive_power': 'high',\n        'radioactive': True\n    }\n}","size_bytes":1659},"weapons/naval_weapons.py":{"content":"\n# تسلیحات دریایی\n\nNAVAL_WEAPONS = {\n    'aircraft_carrier_full': {\n        'name': 'ناو هواپیمابر (همراه با جنگنده)',\n        'cost': 990000,\n        'power': 60000,\n        'range': 3000,\n        'speed': 25,\n        'armor': 8000,\n        'resources': {'f35': 20, 'iron': 3000, 'aluminum': 1000, 'titanium': 50, 'uranium': 50, 'copper': 700},\n        'category': 'naval',\n        'description': 'ناو هواپیمابر کامل با جنگنده‌ها',\n        'requirements': ['weapon_factory', 'refinery', 'power_plant'],\n        'production_time': 600\n    },\n    'warship': {\n        'name': 'ناو جنگی',\n        'cost': 120000,\n        'power': 9000,\n        'range': 2000,\n        'speed': 35,\n        'armor': 3500,\n        'resources': {'iron': 1200, 'aluminum': 300, 'titanium': 15, 'copper': 150, 'oil': 2100},\n        'category': 'naval',\n        'description': 'ناو جنگی سنگین',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 240\n    },\n    'destroyer': {\n        'name': 'ناوشکن',\n        'cost': 90000,\n        'power': 6000,\n        'range': 1800,\n        'speed': 45,\n        'armor': 2500,\n        'resources': {'iron': 900, 'aluminum': 210, 'titanium': 9, 'copper': 90, 'oil': 1500},\n        'category': 'naval',\n        'description': 'ناوشکن سریع',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 200\n    },\n    'nuclear_submarine': {\n        'name': 'زیردریایی هسته‌ای',\n        'cost': 150000,\n        'power': 12000,\n        'range': 2500,\n        'speed': 30,\n        'armor': 4000,\n        'resources': {'uranium': 12, 'iron': 900, 'titanium': 6, 'copper': 60, 'coal': 150},\n        'category': 'naval',\n        'description': 'زیردریایی با موتور هسته‌ای',\n        'requirements': ['weapon_factory', 'refinery', 'power_plant'],\n        'production_time': 300\n    },\n    'patrol_ship': {\n        'name': 'کشتی گشتی',\n        'cost': 60000,\n        'power': 3000,\n        'range': 1200,\n        'speed': 50,\n        'armor': 1500,\n        'resources': {'iron': 600, 'aluminum': 240, 'oil': 1200, 'copper': 60, 'titanium': 3},\n        'category': 'naval',\n        'description': 'کشتی گشتی سریع',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 150\n    },\n    'patrol_boat': {\n        'name': 'قایق گشتی',\n        'cost': 30000,\n        'power': 1000,\n        'range': 800,\n        'speed': 65,\n        'armor': 500,\n        'resources': {'iron': 200, 'aluminum': 80, 'oil': 600, 'copper': 21, 'titanium': 1},\n        'category': 'naval',\n        'description': 'قایق گشتی سبک',\n        'requirements': ['weapon_factory'],\n        'production_time': 90\n    },\n    'amphibious_ship': {\n        'name': 'کشتی آبی-خاکی',\n        'cost': 90000,\n        'power': 4500,\n        'range': 1500,\n        'speed': 40,\n        'armor': 2000,\n        'resources': {'iron': 600, 'aluminum': 240, 'oil': 1200, 'copper': 60, 'titanium': 3, 'coal': 1800},\n        'category': 'naval',\n        'description': 'کشتی عملیات آبی-خاکی',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 180\n    }\n}\n","size_bytes":3326},"weapons/special_missiles.py":{"content":"\n# موشک‌های مخصوص و پیشرفته\n\nSPECIAL_MISSILES = {\n    'trident2_conventional': {\n        'name': 'Trident 2 غیر هسته‌ای',\n        'cost': 0,\n        'power': 1000,\n        'range': 5000,\n        'speed': 4000,\n        'armor': 150,\n        'resources': {'simple_bomb': 12, 'ballistic_missile': 1, 'coal': 140},\n        'category': 'special_missiles',\n        'description': 'موشک Trident 2 با کلاهک معمولی',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 300,\n        'submarine_launch': True\n    },\n    'trident2_nuclear': {\n        'name': 'Trident 2 هسته‌ای',\n        'cost': 190000,\n        'power': 30000,\n        'range': 5000,\n        'speed': 4000,\n        'armor': 150,\n        'resources': {'nuclear_bomb': 12, 'ballistic_missile': 1, 'coal': 140},\n        'category': 'special_missiles',\n        'description': 'موشک Trident 2 با کلاهک هسته‌ای',\n        'requirements': ['weapon_factory', 'refinery', 'power_plant'],\n        'production_time': 360,\n        'submarine_launch': True,\n        'radioactive': True\n    },\n    'satan2_conventional': {\n        'name': 'Satan2 غیر هسته‌ای',\n        'cost': 0,\n        'power': 940,\n        'range': 4500,\n        'speed': 5000,\n        'armor': 200,\n        'resources': {'simple_bomb': 10, 'ballistic_missile': 1, 'coal': 140},\n        'category': 'special_missiles',\n        'description': 'موشک Satan2 با کلاهک معمولی',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 280,\n        'multiple_warheads': True\n    },\n    'satan2_nuclear': {\n        'name': 'Satan2 هسته‌ای',\n        'cost': 160000,\n        'power': 21000,\n        'range': 4500,\n        'speed': 5000,\n        'armor': 200,\n        'resources': {'nuclear_bomb': 10, 'ballistic_missile': 1, 'coal': 140},\n        'category': 'special_missiles',\n        'description': 'موشک Satan2 با کلاهک هسته‌ای',\n        'requirements': ['weapon_factory', 'refinery', 'power_plant'],\n        'production_time': 340,\n        'multiple_warheads': True,\n        'radioactive': True\n    },\n    'df41_nuclear': {\n        'name': 'DF-41 هسته‌ای',\n        'cost': 130000,\n        'power': 18000,\n        'range': 4000,\n        'speed': 4500,\n        'armor': 180,\n        'resources': {'nuclear_bomb': 8, 'ballistic_missile': 1, 'coal': 140},\n        'category': 'special_missiles',\n        'description': 'موشک چینی DF-41',\n        'requirements': ['weapon_factory', 'refinery', 'power_plant'],\n        'production_time': 320,\n        'radioactive': True\n    },\n    'tomahawk_conventional': {\n        'name': 'Tomahawk غیر هسته‌ای',\n        'cost': 12000,\n        'power': 700,\n        'range': 1500,\n        'speed': 1200,\n        'armor': 50,\n        'resources': {'ballistic_missile': 1, 'simple_bomb': 1, 'iron': 10, 'sulfur': 120},\n        'category': 'special_missiles',\n        'description': 'موشک کروز آمریکایی',\n        'requirements': ['weapon_factory'],\n        'production_time': 120,\n        'cruise_missile': True\n    },\n    'tomahawk_nuclear': {\n        'name': 'Tomahawk هسته‌ای',\n        'cost': 18000,\n        'power': 3000,\n        'range': 1500,\n        'speed': 1200,\n        'armor': 50,\n        'resources': {'nuclear_bomb': 1, 'ballistic_missile': 1, 'iron': 30, 'coal': 20},\n        'category': 'special_missiles',\n        'description': 'موشک کروز با کلاهک هسته‌ای',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 150,\n        'cruise_missile': True,\n        'radioactive': True\n    },\n    'kalibr_conventional': {\n        'name': 'Kalibr غیر هسته‌ای',\n        'cost': 12000,\n        'power': 650,\n        'range': 1500,\n        'speed': 1100,\n        'armor': 45,\n        'resources': {'ballistic_missile': 1, 'simple_bomb': 1, 'iron': 10, 'sulfur': 30},\n        'category': 'special_missiles',\n        'description': 'موشک کروز روسی',\n        'requirements': ['weapon_factory'],\n        'production_time': 110,\n        'cruise_missile': True\n    }\n}\n","size_bytes":4220},"weapons/transport_equipment.py":{"content":"\n# تجهیزات حمل و نقل و لجستیک\n\nTRANSPORT_EQUIPMENT = {\n    'armored_truck': {\n        'name': 'کامیون زرهی',\n        'cost': 450000,\n        'power': 200,\n        'range': 400,\n        'speed': 80,\n        'armor': 400,\n        'resources': {'iron': 30, 'aluminum': 15},\n        'category': 'transport',\n        'description': 'کامیون زرهی برای حمل منابع',\n        'requirements': ['weapon_factory'],\n        'production_time': 45,\n        'cargo_capacity': 1000,\n        'convoy_security': 25\n    },\n    'cargo_helicopter': {\n        'name': 'هلیکوپتر باری',\n        'cost': 2200000,\n        'power': 800,\n        'range': 600,\n        'speed': 250,\n        'armor': 150,\n        'resources': {'aluminum': 25, 'iron': 20, 'copper': 10},\n        'category': 'transport',\n        'description': 'هلیکوپتر برای حمل سریع',\n        'requirements': ['weapon_factory'],\n        'production_time': 90,\n        'cargo_capacity': 2000,\n        'convoy_security': 40,\n        'speed_bonus': 50\n    },\n    'cargo_plane': {\n        'name': 'هواپیمای باری',\n        'cost': 6500000,\n        'power': 1500,\n        'range': 2000,\n        'speed': 600,\n        'armor': 200,\n        'resources': {'aluminum': 40, 'iron': 30, 'titanium': 8},\n        'category': 'transport',\n        'description': 'هواپیمای باری برای انتقال بین‌المللی',\n        'requirements': ['weapon_factory', 'power_plant'],\n        'production_time': 180,\n        'cargo_capacity': 5000,\n        'convoy_security': 60,\n        'speed_bonus': 75\n    },\n    'escort_frigate': {\n        'name': 'ناوچه اسکورت',\n        'cost': 3800000,\n        'power': 2800,\n        'range': 1200,\n        'speed': 45,\n        'armor': 1200,\n        'resources': {'iron': 60, 'aluminum': 30, 'copper': 20},\n        'category': 'transport',\n        'description': 'ناوچه محافظت از کاروان‌های دریایی',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 150,\n        'convoy_security': 80,\n        'naval_escort': True\n    },\n    'logistics_drone': {\n        'name': 'پهپاد لجستیک',\n        'cost': 850000,\n        'power': 400,\n        'range': 800,\n        'speed': 200,\n        'armor': 100,\n        'resources': {'aluminum': 15, 'lithium': 8, 'copper': 12},\n        'category': 'transport',\n        'description': 'پهپاد برای حمل کوچک و سریع',\n        'requirements': ['weapon_factory'],\n        'production_time': 60,\n        'convoy_security': 30,\n        'stealth': True,\n        'speed_bonus': 40\n    },\n    'heavy_transport': {\n        'name': 'ترابری سنگین',\n        'cost': 1200000,\n        'power': 600,\n        'range': 500,\n        'speed': 60,\n        'armor': 800,\n        'resources': {'iron': 45, 'aluminum': 20, 'copper': 15},\n        'category': 'transport',\n        'description': 'خودروی حمل سنگین',\n        'requirements': ['weapon_factory'],\n        'production_time': 75,\n        'cargo_capacity': 3000,\n        'convoy_security': 45\n    },\n    'supply_ship': {\n        'name': 'کشتی تدارکات',\n        'cost': 4500000,\n        'power': 1200,\n        'range': 3000,\n        'speed': 35,\n        'armor': 1500,\n        'resources': {'iron': 80, 'aluminum': 40, 'copper': 25},\n        'category': 'transport',\n        'description': 'کشتی بزرگ حمل منابع',\n        'requirements': ['weapon_factory', 'refinery'],\n        'production_time': 200,\n        'cargo_capacity': 8000,\n        'convoy_security': 70,\n        'naval': True\n    },\n    'stealth_transport': {\n        'name': 'ترابری پنهان‌کار',\n        'cost': 8200000,\n        'power': 2000,\n        'range': 1500,\n        'speed': 120,\n        'armor': 600,\n        'resources': {'titanium': 15, 'aluminum': 50, 'uranium': 5},\n        'category': 'transport',\n        'description': 'وسیله نقلیه پنهان‌کار پیشرفته',\n        'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n        'production_time': 300,\n        'cargo_capacity': 1500,\n        'convoy_security': 90,\n        'speed_bonus': 60,\n        'stealth': True\n    },\n    'tanker_aircraft': {\n        'name': 'هواپیمای سوخت‌رسان',\n        'cost': 5800000,\n        'power': 1000,\n        'range': 4000,\n        'speed': 450,\n        'armor': 300,\n        'resources': {'aluminum': 60, 'iron': 40, 'copper': 20, 'titanium': 8},\n        'category': 'transport',\n        'description': 'هواپیمای سوخت‌رسان که برد جت‌ها را افزایش می‌دهد',\n        'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n        'production_time': 250,\n        'convoy_security': 50,\n        'range_extender': True,\n        'jet_range_bonus': 2000  # افزایش 2000 کیلومتر برد برای جت‌ها\n    },\n    'aircraft_carrier_transport': {\n        'name': 'ناو هواپیمابر (حمل‌ونقل)',\n        'cost': 12500000,\n        'power': 8000,\n        'range': 5000,\n        'speed': 30,\n        'armor': 6000,\n        'resources': {'iron': 200, 'aluminum': 100, 'titanium': 25, 'uranium': 15, 'copper': 80},\n        'category': 'transport',\n        'description': 'ناو هواپیمابر که جت‌ها را به مناطق دوردست می‌برد',\n        'requirements': ['weapon_factory', 'power_plant', 'refinery'],\n        'production_time': 400,\n        'convoy_security': 95,\n        'range_extender': True,\n        'jet_range_bonus': 3000,  # افزایش 3000 کیلومتر برد برای جت‌ها\n        'naval': True,\n        'mobile_airbase': True\n    }\n}\n","size_bytes":5769},"run_tests.py":{"content":"\n#!/usr/bin/env python3\nimport subprocess\nimport sys\nimport time\n\ndef run_clean_tests():\n    \"\"\"Run tests with clean environment\"\"\"\n    print(\"🛑 Stopping any running bot instances...\")\n    subprocess.run([sys.executable, \"stop_bot.py\"], capture_output=True)\n    \n    print(\"🧹 Cleaning test data...\")\n    subprocess.run([sys.executable, \"stop_bot.py\", \"--clean-test\"], capture_output=True)\n    \n    print(\"⏱️  Waiting for cleanup...\")\n    time.sleep(2)\n    \n    print(\"🚀 Running comprehensive tests...\")\n    result = subprocess.run([sys.executable, \"test_bot.py\"])\n    \n    return result.returncode\n\nif __name__ == \"__main__\":\n    exit_code = run_clean_tests()\n    sys.exit(exit_code)\n","size_bytes":697},"stop_bot.py":{"content":"\n#!/usr/bin/env python3\nimport os\nimport signal\nimport psutil\nfrom database import Database\n\ndef stop_all_bot_instances():\n    \"\"\"Stop all running bot instances\"\"\"\n    current_pid = os.getpid()\n    \n    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):\n        try:\n            if proc.info['cmdline'] and any('main.py' in cmd for cmd in proc.info['cmdline']):\n                if proc.info['pid'] != current_pid:\n                    print(f\"Stopping bot process PID: {proc.info['pid']}\")\n                    proc.terminate()\n                    try:\n                        proc.wait(timeout=5)\n                    except psutil.TimeoutExpired:\n                        proc.kill()\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\n            pass\n\ndef cleanup_test_data():\n    \"\"\"Clean up test data from database\"\"\"\n    try:\n        db = Database()\n        db.initialize()\n        result = db.clear_test_data()\n        if result:\n            print(\"✅ Test data cleaned successfully\")\n        else:\n            print(\"❌ Failed to clean test data\")\n    except Exception as e:\n        print(f\"❌ Error cleaning test data: {e}\")\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) > 1 and sys.argv[1] == \"--clean-test\":\n        cleanup_test_data()\n    else:\n        stop_all_bot_instances()\n        print(\"All bot instances stopped\")\n","size_bytes":1369},"test_bot.py":{"content":"\nimport asyncio\nimport logging\nfrom database import Database\nfrom admin import AdminPanel\nfrom game_logic import GameLogic\nfrom economy import Economy\nfrom combat import CombatSystem\nfrom convoy import ConvoySystem\nfrom marketplace import Marketplace\nfrom alliance import AllianceSystem\nfrom config import Config\n\n# Configure logging\nlogging.basicConfig(\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    level=logging.INFO\n)\nlogger = logging.getLogger(__name__)\n\nclass BotTester:\n    def __init__(self):\n        self.db = Database()\n        self.admin = AdminPanel(self.db)\n        self.game_logic = GameLogic(self.db)\n        self.economy = Economy(self.db)\n        self.combat = CombatSystem(self.db)\n        self.convoy = ConvoySystem(self.db)\n        self.marketplace = Marketplace(self.db)\n        self.alliance = AllianceSystem(self.db)\n        \n        # Test user IDs\n        self.test_users = [\n            {'user_id': 123456, 'username': 'test_user1', 'country': 'IR'},\n            {'user_id': 123457, 'username': 'test_user2', 'country': 'TR'},\n            {'user_id': 123458, 'username': 'test_user3', 'country': 'US'}\n        ]\n\n    def log_test(self, test_name, success, message=\"\"):\n        status = \"✅ PASS\" if success else \"❌ FAIL\"\n        logger.info(f\"{status} - {test_name}: {message}\")\n        return success\n\n    def test_database_initialization(self):\n        \"\"\"Test database initialization\"\"\"\n        try:\n            self.db.initialize()\n            return self.log_test(\"Database Initialization\", True, \"Database tables created successfully\")\n        except Exception as e:\n            return self.log_test(\"Database Initialization\", False, str(e))\n\n    def test_player_creation(self):\n        \"\"\"Test player creation\"\"\"\n        success_count = 0\n        for user in self.test_users:\n            try:\n                result = self.db.create_player(user['user_id'], user['username'], user['country'])\n                if result:\n                    success_count += 1\n                    self.log_test(f\"Player Creation - {user['username']}\", True, \"Player created successfully\")\n                else:\n                    self.log_test(f\"Player Creation - {user['username']}\", False, \"Failed to create player\")\n            except Exception as e:\n                self.log_test(f\"Player Creation - {user['username']}\", False, str(e))\n        \n        return success_count == len(self.test_users)\n\n    def test_building_construction(self):\n        \"\"\"Test building construction\"\"\"\n        user_id = self.test_users[0]['user_id']\n        \n        # Give player enough money first\n        player = self.db.get_player(user_id)\n        if player:\n            self.db.update_player_money(user_id, player['money'] + 500000)\n        \n        # Test all building types\n        buildings_to_test = ['iron_mine', 'weapon_factory', 'wheat_farm', 'military_base']\n        success_count = 0\n        \n        for building in buildings_to_test:\n            try:\n                result = self.game_logic.build_structure(user_id, building)\n                if result and result.get('success', False):\n                    success_count += 1\n                    self.log_test(f\"Building Construction - {building}\", True, result.get('message', 'Built successfully'))\n                else:\n                    message = result.get('message', 'Unknown error') if result else 'No result returned'\n                    self.log_test(f\"Building Construction - {building}\", False, message)\n            except Exception as e:\n                self.log_test(f\"Building Construction - {building}\", False, str(e))\n        \n        return success_count == len(buildings_to_test)\n\n    def test_weapon_production(self):\n        \"\"\"Test weapon production\"\"\"\n        user_id = self.test_users[0]['user_id']\n        \n        # Add some resources first\n        self.db.add_resources(user_id, 'iron', 1000)\n        self.db.add_resources(user_id, 'copper', 1000)\n        \n        weapons_to_test = ['rifle', 'tank', 'drone']\n        success_count = 0\n        \n        for weapon in weapons_to_test:\n            try:\n                result = self.game_logic.produce_weapon(user_id, weapon)\n                if result['success']:\n                    success_count += 1\n                    self.log_test(f\"Weapon Production - {weapon}\", True, result['message'])\n                else:\n                    self.log_test(f\"Weapon Production - {weapon}\", False, result['message'])\n            except Exception as e:\n                self.log_test(f\"Weapon Production - {weapon}\", False, str(e))\n        \n        return success_count == len(weapons_to_test)\n\n    def test_economy_calculations(self):\n        \"\"\"Test economy calculations\"\"\"\n        user_id = self.test_users[0]['user_id']\n        \n        try:\n            # Test income calculation\n            income = self.economy.calculate_income(user_id)\n            self.log_test(\"Economy - Income Calculation\", True, f\"Income calculated: ${income}\")\n            \n            # Test population increase\n            pop_increase = self.economy.calculate_population_increase(user_id)\n            self.log_test(\"Economy - Population Increase\", True, f\"Population increase: {pop_increase}\")\n            \n            # Test soldier increase\n            soldier_increase = self.economy.calculate_soldier_increase(user_id)\n            self.log_test(\"Economy - Soldier Increase\", True, f\"Soldier increase: {soldier_increase}\")\n            \n            return True\n        except Exception as e:\n            return self.log_test(\"Economy Calculations\", False, str(e))\n\n    def test_convoy_system(self):\n        \"\"\"Test convoy system\"\"\"\n        sender_id = self.test_users[0]['user_id']\n        receiver_id = self.test_users[1]['user_id']\n        \n        try:\n            # Give sender some money first\n            sender = self.db.get_player(sender_id)\n            if sender:\n                self.db.update_player_money(sender_id, sender['money'] + 10000)\n                self.db.add_resources(sender_id, 'iron', 1000)\n            \n            # Create convoy\n            resources = {'money': 1000, 'iron': 500}\n            result = self.convoy.create_convoy(sender_id, receiver_id, resources)\n            \n            if result.get('success', False):\n                convoy_id = result['convoy_id']\n                self.log_test(\"Convoy Creation\", True, f\"Convoy created with ID: {convoy_id}\")\n                \n                # Test convoy details\n                convoy = self.db.get_convoy(convoy_id)\n                if convoy:\n                    self.log_test(\"Convoy Retrieval\", True, \"Convoy details retrieved successfully\")\n                    return True\n                else:\n                    return self.log_test(\"Convoy Retrieval\", False, \"Failed to retrieve convoy details\")\n            else:\n                return self.log_test(\"Convoy Creation\", False, result.get('message', 'Unknown error'))\n                \n        except Exception as e:\n            return self.log_test(\"Convoy System\", False, str(e))\n\n    def test_marketplace(self):\n        \"\"\"Test marketplace functionality\"\"\"\n        seller_id = self.test_users[0]['user_id']\n        buyer_id = self.test_users[1]['user_id']\n        \n        try:\n            # Add some resources to seller\n            self.db.add_resources(seller_id, 'iron', 2000)\n            \n            # Create listing\n            result = self.marketplace.create_listing(seller_id, 'iron', 'resources', 1000, 10)\n            \n            if result['success']:\n                self.log_test(\"Marketplace - Create Listing\", True, \"Listing created successfully\")\n                \n                # Get listings\n                listings = self.marketplace.get_listings_by_category('resources')\n                if listings:\n                    listing_id = listings[0]['id']\n                    self.log_test(\"Marketplace - Get Listings\", True, f\"Found {len(listings)} listings\")\n                    \n                    # Add money to buyer\n                    buyer = self.db.get_player(buyer_id)\n                    self.db.update_player_money(buyer_id, buyer['money'] + 50000)\n                    \n                    # Test purchase\n                    purchase_result = self.marketplace.purchase_item(buyer_id, listing_id, 100)\n                    \n                    if purchase_result['success']:\n                        self.log_test(\"Marketplace - Purchase Item\", True, \"Item purchased successfully\")\n                        return True\n                    else:\n                        return self.log_test(\"Marketplace - Purchase Item\", False, purchase_result['message'])\n                else:\n                    return self.log_test(\"Marketplace - Get Listings\", False, \"No listings found\")\n            else:\n                return self.log_test(\"Marketplace - Create Listing\", False, result['message'])\n                \n        except Exception as e:\n            return self.log_test(\"Marketplace\", False, str(e))\n\n    def test_admin_functions(self):\n        \"\"\"Test admin functions\"\"\"\n        admin_id = self.test_users[0]['user_id']\n        target_id = self.test_users[1]['user_id']\n        \n        try:\n            # Test giving resources\n            result = self.admin.give_resources_to_player(target_id, 'gold', 100)\n            if result['success']:\n                self.log_test(\"Admin - Give Resources\", True, result['message'])\n            else:\n                return self.log_test(\"Admin - Give Resources\", False, result['message'])\n            \n            # Test giving money\n            result = self.admin.give_money_to_player(target_id, 50000)\n            if result['success']:\n                self.log_test(\"Admin - Give Money\", True, result['message'])\n            else:\n                return self.log_test(\"Admin - Give Money\", False, result['message'])\n            \n            # Test giving weapons\n            result = self.admin.give_weapons_to_player(target_id, 'rifle', 10)\n            if result['success']:\n                self.log_test(\"Admin - Give Weapons\", True, result['message'])\n                return True\n            else:\n                return self.log_test(\"Admin - Give Weapons\", False, result['message'])\n                \n        except Exception as e:\n            return self.log_test(\"Admin Functions\", False, str(e))\n\n    def test_combat_system(self):\n        \"\"\"Test combat system\"\"\"\n        attacker_id = self.test_users[0]['user_id']\n        defender_id = self.test_users[1]['user_id']\n        \n        try:\n            # Add some weapons to attacker\n            self.db.add_weapon(attacker_id, 'rifle', 100)\n            self.db.add_weapon(attacker_id, 'tank', 10)\n            \n            # Get available targets\n            targets = self.combat.get_available_targets(attacker_id)\n            if targets:\n                self.log_test(\"Combat - Get Targets\", True, f\"Found {len(targets)} available targets\")\n                \n                # Test attack power calculation\n                attack_power = self.combat.calculate_attack_power(attacker_id)\n                self.log_test(\"Combat - Attack Power\", True, f\"Attack power: {attack_power}\")\n                \n                # Test defense power calculation\n                defense_power = self.combat.calculate_defense_power(defender_id)\n                self.log_test(\"Combat - Defense Power\", True, f\"Defense power: {defense_power}\")\n                \n                return True\n            else:\n                return self.log_test(\"Combat - Get Targets\", False, \"No available targets found\")\n                \n        except Exception as e:\n            return self.log_test(\"Combat System\", False, str(e))\n\n    def test_alliance_system(self):\n        \"\"\"Test alliance system\"\"\"\n        leader_id = self.test_users[0]['user_id']\n        member_id = self.test_users[1]['user_id']\n        \n        try:\n            # Create alliance\n            result = self.alliance.create_alliance(leader_id, \"Test Alliance\")\n            if result['success']:\n                self.log_test(\"Alliance - Create\", True, result['message'])\n                \n                # Invite member\n                invite_result = self.alliance.invite_to_alliance(leader_id, member_id)\n                if invite_result['success']:\n                    self.log_test(\"Alliance - Invite\", True, invite_result['message'])\n                    \n                    # Get invitations\n                    invitations = self.alliance.get_pending_invitations(member_id)\n                    if invitations:\n                        invitation_id = invitations[0]['id']\n                        self.log_test(\"Alliance - Get Invitations\", True, f\"Found {len(invitations)} invitations\")\n                        \n                        # Accept invitation\n                        accept_result = self.alliance.respond_to_invitation(member_id, invitation_id, 'accept')\n                        if accept_result['success']:\n                            self.log_test(\"Alliance - Accept Invitation\", True, accept_result['message'])\n                            return True\n                        else:\n                            return self.log_test(\"Alliance - Accept Invitation\", False, accept_result['message'])\n                    else:\n                        return self.log_test(\"Alliance - Get Invitations\", False, \"No invitations found\")\n                else:\n                    return self.log_test(\"Alliance - Invite\", False, invite_result['message'])\n            else:\n                return self.log_test(\"Alliance - Create\", False, result['message'])\n                \n        except Exception as e:\n            return self.log_test(\"Alliance System\", False, str(e))\n\n    def test_first_build_tracking(self):\n        \"\"\"Test first build tracking system\"\"\"\n        user_id = self.test_users[2]['user_id']  # Use third user for clean test\n        \n        try:\n            # Give user money for building\n            player = self.db.get_player(user_id)\n            if player:\n                self.db.update_player_money(user_id, player['money'] + 200000)\n                \n                # Test first build\n                is_first = self.db.check_first_build(user_id, 'iron_mine')\n                self.log_test(\"First Build Check - Before\", is_first, f\"Is first build: {is_first}\")\n                \n                if is_first:\n                    # Record first build\n                    self.db.record_first_build(user_id, 'iron_mine')\n                    self.log_test(\"First Build Record\", True, \"First build recorded\")\n                    \n                    # Check again\n                    is_still_first = self.db.check_first_build(user_id, 'iron_mine')\n                    if not is_still_first:\n                        self.log_test(\"First Build Check - After\", True, f\"Is first build after recording: {is_still_first}\")\n                        return True\n                    else:\n                        return self.log_test(\"First Build Check - After\", False, \"Still showing as first build\")\n                else:\n                    return self.log_test(\"First Build Check - Before\", False, \"Should be first build but isn't\")\n            else:\n                return self.log_test(\"First Build Tracking\", False, \"Player not found\")\n                \n        except Exception as e:\n            return self.log_test(\"First Build Tracking\", False, str(e))\n\n    async def run_all_tests(self):\n        \"\"\"Run all tests\"\"\"\n        logger.info(\"🚀 Starting comprehensive bot tests...\")\n        \n        # Clear any existing test data first\n        logger.info(\"🧹 Clearing existing test data...\")\n        self.db.clear_test_data()\n        \n        tests = [\n            (\"Database Initialization\", self.test_database_initialization),\n            (\"Player Creation\", self.test_player_creation),\n            (\"Building Construction\", self.test_building_construction),\n            (\"Weapon Production\", self.test_weapon_production),\n            (\"Economy Calculations\", self.test_economy_calculations),\n            (\"Convoy System\", self.test_convoy_system),\n            (\"Marketplace\", self.test_marketplace),\n            (\"Admin Functions\", self.test_admin_functions),\n            (\"Combat System\", self.test_combat_system),\n            (\"Alliance System\", self.test_alliance_system),\n            (\"First Build Tracking\", self.test_first_build_tracking)\n        ]\n        \n        passed = 0\n        total = len(tests)\n        \n        for test_name, test_func in tests:\n            logger.info(f\"\\n{'='*50}\")\n            logger.info(f\"Testing: {test_name}\")\n            logger.info('='*50)\n            \n            try:\n                result = test_func()\n                if result:\n                    passed += 1\n            except Exception as e:\n                logger.error(f\"Test {test_name} crashed: {e}\")\n        \n        logger.info(f\"\\n{'='*50}\")\n        logger.info(f\"TEST SUMMARY\")\n        logger.info('='*50)\n        logger.info(f\"Total Tests: {total}\")\n        logger.info(f\"Passed: {passed}\")\n        logger.info(f\"Failed: {total - passed}\")\n        logger.info(f\"Success Rate: {(passed/total)*100:.1f}%\")\n        \n        if passed == total:\n            logger.info(\"🎉 ALL TESTS PASSED!\")\n        else:\n            logger.warning(f\"⚠️  {total - passed} tests failed. Check logs above.\")\n\nif __name__ == \"__main__\":\n    tester = BotTester()\n    asyncio.run(tester.run_all_tests())\n","size_bytes":17494},"test_give_unlimited.py":{"content":"#!/usr/bin/env python3\n\"\"\"Script to give unlimited money and resources to all players for testing\"\"\"\n\nimport sys\nimport os\nsys.path.append('.')\n\nfrom database import Database\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef give_unlimited_resources():\n    \"\"\"Give unlimited money and resources to all players\"\"\"\n    db = Database()\n    \n    # Get all players\n    try:\n        with db.get_connection() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT user_id, country_name FROM players\")\n            players = cursor.fetchall()\n            \n            print(f\"Found {len(players)} players\")\n            \n            # Give 1 billion dollars to each player\n            for player in players:\n                user_id = player[0]\n                country_name = player[1]\n                \n                # Update money to 1 billion\n                cursor.execute(\"UPDATE players SET money = ? WHERE user_id = ?\", \n                             (1000000000, user_id))\n                \n                # Update all resources to 1 million each\n                resources_to_add = {\n                    'iron': 1000000,\n                    'oil': 1000000,\n                    'aluminum': 1000000,\n                    'uranium': 1000000,\n                    'copper': 1000000,\n                    'lithium': 1000000,\n                    'titanium': 1000000,\n                    'wheat': 1000000,\n                    'water': 1000000,\n                    'coal': 1000000\n                }\n                \n                for resource, amount in resources_to_add.items():\n                    cursor.execute(f\"UPDATE resources SET {resource} = ? WHERE user_id = ?\", \n                                 (amount, user_id))\n                \n                print(f\"✅ Updated {country_name}: $1B + unlimited resources\")\n            \n            conn.commit()\n            print(f\"\\n🎉 Successfully gave unlimited money and resources to all {len(players)} countries!\")\n            \n    except Exception as e:\n        logger.error(f\"Error giving unlimited resources: {e}\")\n        print(f\"❌ Error: {e}\")\n\nif __name__ == \"__main__\":\n    give_unlimited_resources()","size_bytes":2242},"check_income_system.py":{"content":"#!/usr/bin/env python3\n\"\"\"Check income system status\"\"\"\n\nimport sys\nimport os\nsys.path.append('.')\n\nfrom database import Database\nfrom economy import Economy\nimport logging\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef check_income_system():\n    \"\"\"Check income system and mine buildings\"\"\"\n    db = Database()\n    economy = Economy(db)\n    \n    print(\"🔍 بررسی سیستم درآمد...\")\n    print()\n    \n    try:\n        with db.get_connection() as conn:\n            cursor = conn.cursor()\n            \n            # Check buildings table structure\n            cursor.execute(\"PRAGMA table_info(buildings)\")\n            columns = cursor.fetchall()\n            print(\"📋 ساختار جدول buildings:\")\n            for col in columns:\n                print(f\"  - {col[1]} ({col[2]})\")\n            print()\n            \n            # Get all players and their buildings\n            cursor.execute(\"SELECT user_id, country_name FROM players\")\n            players = cursor.fetchall()\n            \n            print(f\"👥 بررسی {len(players)} کشور:\")\n            print()\n            \n            for player in players:\n                user_id = player[0]\n                country_name = player[1]\n                \n                # Get player buildings\n                buildings = db.get_player_buildings(user_id)\n                \n                # Count mines\n                mine_types = ['iron_mine', 'copper_mine', 'oil_mine', 'aluminum_mine', \n                             'gold_mine', 'uranium_mine', 'lithium_mine', 'coal_mine',\n                             'silver_mine', 'nitro_mine', 'sulfur_mine', 'titanium_mine']\n                \n                total_mines = sum(buildings.get(mine_type, 0) for mine_type in mine_types)\n                \n                # Calculate income\n                income = economy.calculate_income(user_id)\n                \n                print(f\"🏴 {country_name}:\")\n                print(f\"  💰 درآمد محاسبه شده: ${income:,}\")\n                print(f\"  ⛏️ تعداد کل معادن: {total_mines}\")\n                \n                if total_mines > 0:\n                    print(\"  📍 معادن موجود:\")\n                    for mine_type in mine_types:\n                        count = buildings.get(mine_type, 0)\n                        if count > 0:\n                            print(f\"    - {mine_type}: {count}\")\n                \n                print()\n            \n            # Check scheduler info\n            print(\"⏱️ وضعیت scheduler:\")\n            print(\"  - Scheduler در حال اجرا است\")\n            print(\"  - درآمد هر 6 ساعت محاسبه می‌شود\")\n            print(\"  - آخرین بار راه‌اندازی شده: همین الان\")\n            \n    except Exception as e:\n        logger.error(f\"Error checking income system: {e}\")\n        print(f\"❌ خطا: {e}\")\n\nif __name__ == \"__main__\":\n    check_income_system()","size_bytes":3015},"strategy_guide.md":{"content":"\n# 🎮 راهنمای استراتژی DragonRP\n\n## ✨ شروع هوشمندانه با 100,000 دلار\n\n### 🥇 مرحله اول: پایه‌گذاری اقتصاد (اولویت بالا)\n```\n1️⃣ مزرعه گندم × 4 = $20,000\n   👥 +40,000 جمعیت (ضروری برای تولید)\n\n2️⃣ پادگان آموزشی × 4 = $20,000  \n   ⚔️ +20,000 سرباز (دفاع اولیه)\n\n3️⃣ معدن آهن × 1 = $80,000\n   🔩 +1000 آهن هر 6 ساعت + $50,000 درآمد\n```\n**کل هزینه: $120,000** (بیش از بودجه - باید انتظار 6 ساعت کشید)\n\n### 🥈 مرحله دوم: توسعه اقتصادی (پس از اولین درآمد)\n```\n4️⃣ معدن مس × 1 = $100,000\n   🥉 +800 مس هر 6 ساعت + $60,000 درآمد\n\n5️⃣ کارخانه اسلحه × 1 = $15,000\n   🏭 امکان تولید تسلیحات\n```\n\n### 🥉 مرحله سوم: دفاع و امنیت\n```\n6️⃣ تولید تفنگ × 200 = $300,000\n   🔫 دفاع اولیه (نیاز: 1000 آهن + 400 مس)\n\n7️⃣ تولید تانک × 10 = $8,500,000\n   🚗 قدرت نظامی متوسط\n```\n\n### 🏆 مرحله چهارم: توسعه پیشرفته\n```\n8️⃣ معدن نفت × 1 = $120,000\n   🛢 منبع ارزشمند برای تسلیحات پیشرفته\n\n9️⃣ معدن آلومینیوم × 1 = $90,000\n   🔗 برای جت‌ها و تانک‌های پیشرفته\n\n🔟 تولید جنگنده × 5 = $22,500,000\n   ✈️ قدرت هوایی (برای حملات دوربرد)\n```\n\n## 📊 اولویت‌بندی منابع\n\n### 💎 منابع بحرانی (اولویت 1)\n- **آهن**: پایه تمام سلاح‌ها\n- **مس**: ضروری برای الکترونیک\n- **آلومینیوم**: برای جت‌ها و تجهیزات سبک\n\n### ⭐ منابع مهم (اولویت 2) \n- **نفت**: برای سوخت و تجهیزات سنگین\n- **لیتیوم**: برای تکنولوژی پیشرفته\n- **تیتانیوم**: برای سلاح‌های مدرن\n\n### 🌟 منابع ویژه (اولویت 3)\n- **اورانیوم**: برای سلاح‌های هسته‌ای\n- **طلا**: برای تجهیزات لوکس\n\n## ⚔️ استراتژی نظامی\n\n### 🛡 دفاع (دارای 0-50M درآمد)\n```\n- تفنگ: 500+ (دفاع پایه)\n- تانک: 50+ (دفاع زمینی)  \n- پدافند هوایی: 10+ (دفاع هوایی)\n```\n\n### ⚡ متعادل (دارای 50-200M درآمد)\n```\n- جنگنده: 20+ (قدرت هوایی)\n- تانک: 100+ (قدرت زمینی)\n- پهپاد: 50+ (جاسوسی و حمله)\n```\n\n### 💀 تهاجمی (دارای 200M+ درآمد)\n```\n- F-22/F-35: 10+ (برتری هوایی)\n- موشک بالستیک: 20+ (حملات دوربرد)\n- کشتی جنگی: 5+ (قدرت دریایی)\n```\n\n## 🏆 نکات حرفه‌ای\n\n### 💰 مدیریت اقتصاد\n- همیشه 20% درآمد را ذخیره کنید\n- معادن پر درآمد را اولویت دهید\n- درآمد 6 ساعته را محاسبه کنید\n\n### 🎯 استراتژی حمله\n- همیشه هدف‌های ضعیف‌تر را انتخاب کنید\n- قبل از حمله، دفاع خود را تقویت کنید\n- از اتحادها برای محافظت استفاده کنید\n\n### 🚚 تجارت هوشمند\n- منابع اضافی را بفروشید\n- در قیمت‌های پایین خرید کنید\n- محموله‌های امن ارسال کنید\n\n## ⚠️ اشتباهات رایج\n❌ خرید سلاح‌های گران بدون درآمد کافی\n❌ نادیده گرفتن دفاع برای حمله\n❌ سرمایه‌گذاری روی یک نوع منبع\n❌ حمله بدون برنامه‌ریزی\n❌ عدم استفاده از اتحادها\n\n## 🎖 هدف‌گذاری بلندمدت\n1. **روز 1-7**: پایه‌گذاری اقتصاد\n2. **هفته 2-4**: تقویت دفاع\n3. **ماه 2+**: توسعه قدرت تهاجمی\n4. **ماه 3+**: کسب برتری منطقه‌ای\n\n**یادتان باشد**: صبر و استراتژی کلید موفقیت است! 🎯\n","size_bytes":4133},"debug_weapons.py":{"content":"#!/usr/bin/env python3\n\"\"\"Debug script to check weapons table and player weapons data\"\"\"\n\nimport sqlite3\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef check_database():\n    \"\"\"Check database structure and player weapons\"\"\"\n    try:\n        conn = sqlite3.connect('dragonrp.db')\n        cursor = conn.cursor()\n        \n        print(\"=== DATABASE STRUCTURE ===\")\n        \n        # Check if weapons table exists\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name='weapons';\")\n        weapons_table = cursor.fetchone()\n        print(f\"Weapons table exists: {bool(weapons_table)}\")\n        \n        if weapons_table:\n            # Check weapons table structure\n            cursor.execute(\"PRAGMA table_info(weapons);\")\n            columns = cursor.fetchall()\n            print(f\"\\nWeapons table columns ({len(columns)}):\")\n            for col in columns:\n                print(f\"  - {col[1]} ({col[2]})\")\n            \n            # Check sample data\n            cursor.execute(\"SELECT user_id, rifle, tank, fighter_jet FROM weapons LIMIT 5;\")\n            sample_data = cursor.fetchall()\n            print(f\"\\nSample weapons data:\")\n            for row in sample_data:\n                print(f\"  User {row[0]}: rifle={row[1]}, tank={row[2]}, fighter_jet={row[3]}\")\n        \n        # Check recent transactions\n        print(\"\\n=== RECENT BUILD TRANSACTIONS ===\")\n        cursor.execute(\"\"\"\n            SELECT builder_id, item_type, first_build_date \n            FROM build_tracking \n            ORDER BY first_build_date DESC \n            LIMIT 5\n        \"\"\")\n        builds = cursor.fetchall()\n        for build in builds:\n            print(f\"  User {build[0]} built {build[1]} at {build[2]}\")\n        \n        # Check marketplace listings\n        print(\"\\n=== MARKETPLACE LISTINGS ===\")\n        cursor.execute(\"\"\"\n            SELECT seller_id, item_type, quantity \n            FROM market_listings \n            WHERE item_category = 'weapon' AND status = 'active'\n            LIMIT 5\n        \"\"\")\n        listings = cursor.fetchall()\n        for listing in listings:\n            print(f\"  User {listing[0]} selling {listing[1]} x{listing[2]}\")\n        \n        conn.close()\n        \n    except Exception as e:\n        print(f\"Error: {e}\")\n\ndef test_add_weapon():\n    \"\"\"Test adding weapon to a user\"\"\"\n    try:\n        from database import Database\n        from marketplace import Marketplace\n        db = Database()\n        marketplace = Marketplace(db)\n        \n        # Get first user\n        conn = sqlite3.connect('dragonrp.db')\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT user_id FROM players LIMIT 1;\")\n        result = cursor.fetchone()\n        \n        if result:\n            user_id = result[0]\n            print(f\"\\n=== TESTING ADD WEAPON FOR USER {user_id} ===\")\n            \n            # Get current weapons\n            weapons_before = db.get_player_weapons(user_id)\n            rifle_before = weapons_before.get('rifle', 0)\n            print(f\"Rifles before: {rifle_before}\")\n            \n            # Add a rifle\n            db.add_weapon(user_id, 'rifle', 1)\n            print(\"Added 1 rifle\")\n            \n            # Check after\n            weapons_after = db.get_player_weapons(user_id)\n            rifle_after = weapons_after.get('rifle', 0)\n            print(f\"Rifles after: {rifle_after}\")\n            \n            if rifle_after > rifle_before:\n                print(\"✅ Weapon addition SUCCESSFUL\")\n            else:\n                print(\"❌ Weapon addition FAILED\")\n            \n            # Test marketplace verification\n            print(\"\\n=== TESTING MARKETPLACE VERIFICATION ===\")\n            has_rifles = marketplace.verify_seller_inventory(user_id, 'weapon', 'rifle', 1)\n            print(f\"Can sell 1 rifle: {has_rifles}\")\n            \n            has_many_rifles = marketplace.verify_seller_inventory(user_id, 'weapon', 'rifle', 1000)\n            print(f\"Can sell 1000 rifles: {has_many_rifles}\")\n        \n        conn.close()\n        \n    except Exception as e:\n        print(f\"Error in test: {e}\")\n\nif __name__ == \"__main__\":\n    check_database()\n    test_add_weapon()","size_bytes":4233},"debug_user.py":{"content":"#!/usr/bin/env python3\n\"\"\"Debug specific user's weapon production\"\"\"\n\nimport sqlite3\nfrom database import Database\nfrom game_logic import GameLogic\n\ndef debug_user_weapons():\n    user_id = 7716228404  # User ID from logs\n    \n    print(f\"=== DEBUGGING USER {user_id} ===\")\n    \n    db = Database()\n    \n    # Check if user exists in players table\n    conn = sqlite3.connect('dragonrp.db')\n    cursor = conn.cursor()\n    \n    cursor.execute(\"SELECT user_id, country_name, money FROM players WHERE user_id = ?\", (user_id,))\n    player = cursor.fetchone()\n    \n    if player:\n        print(f\"Player found: {player}\")\n    else:\n        print(\"❌ Player not found in players table!\")\n        return\n    \n    # Check if user exists in weapons table\n    cursor.execute(\"SELECT COUNT(*) FROM weapons WHERE user_id = ?\", (user_id,))\n    weapons_exists = cursor.fetchone()[0] > 0\n    print(f\"User exists in weapons table: {weapons_exists}\")\n    \n    if not weapons_exists:\n        print(\"❌ User not found in weapons table! This is the problem!\")\n        print(\"Creating weapons entry for user...\")\n        cursor.execute(\"INSERT INTO weapons (user_id) VALUES (?)\", (user_id,))\n        conn.commit()\n        print(\"✅ Weapons entry created!\")\n    \n    # Get current weapons\n    weapons = db.get_player_weapons(user_id)\n    print(f\"Current weapons: {weapons}\")\n    \n    # Test adding a rifle directly\n    print(\"\\n=== TESTING DIRECT WEAPON ADD ===\")\n    current_rifles = weapons.get('rifle', 0)\n    print(f\"Current rifles: {current_rifles}\")\n    \n    db.add_weapon(user_id, 'rifle', 1)\n    \n    new_weapons = db.get_player_weapons(user_id)\n    new_rifles = new_weapons.get('rifle', 0)\n    print(f\"Rifles after add: {new_rifles}\")\n    \n    if new_rifles > current_rifles:\n        print(\"✅ Direct weapon add works!\")\n    else:\n        print(\"❌ Direct weapon add failed!\")\n    \n    conn.close()\n\nif __name__ == \"__main__\":\n    debug_user_weapons()","size_bytes":1940},"test_production.py":{"content":"#!/usr/bin/env python3\n\"\"\"Complete test of weapon production system\"\"\"\n\nimport sqlite3\nimport sys\nimport traceback\n\ndef test_weapon_production():\n    \"\"\"Test the complete weapon production flow\"\"\"\n    try:\n        # Import required classes\n        from database import Database\n        from game_logic import GameLogic\n        from config import Config\n        \n        print(\"=== TESTING WEAPON PRODUCTION SYSTEM ===\")\n        \n        # Initialize\n        db = Database()\n        game_logic = GameLogic(db)\n        \n        # Get a test user\n        conn = sqlite3.connect('dragonrp.db')\n        cursor = conn.cursor()\n        \n        # Find a user with some money and resources\n        cursor.execute(\"\"\"\n            SELECT p.user_id, p.money, p.country_name \n            FROM players p \n            WHERE p.money > 100000 \n            LIMIT 1\n        \"\"\")\n        user_data = cursor.fetchone()\n        \n        if not user_data:\n            print(\"❌ No user found with enough money\")\n            return\n            \n        user_id, user_money, country = user_data\n        print(f\"Testing with User {user_id} ({country}) - Money: ${user_money:,}\")\n        \n        # Check current weapons\n        weapons_before = db.get_player_weapons(user_id)\n        rifle_before = weapons_before.get('rifle', 0)\n        print(f\"Current rifles: {rifle_before}\")\n        \n        # Check resources\n        resources = db.get_player_resources(user_id)\n        print(f\"Current resources: iron={resources.get('iron', 0)}, copper={resources.get('copper', 0)}\")\n        \n        # Get rifle config\n        rifle_config = Config.WEAPONS.get('rifle', {})\n        print(f\"Rifle config: {rifle_config}\")\n        \n        # Try to produce 1 rifle\n        print(\"\\n=== ATTEMPTING TO PRODUCE 1 RIFLE ===\")\n        result = game_logic.produce_weapon(user_id, 'rifle', 1)\n        print(f\"Production result: {result}\")\n        \n        # Check weapons after\n        weapons_after = db.get_player_weapons(user_id)\n        rifle_after = weapons_after.get('rifle', 0)\n        print(f\"Rifles after production: {rifle_after}\")\n        \n        # Check if rifle was actually added\n        if rifle_after > rifle_before:\n            print(\"✅ WEAPON PRODUCTION SUCCESSFUL!\")\n        else:\n            print(\"❌ WEAPON PRODUCTION FAILED!\")\n            \n            # Additional debugging\n            print(\"\\n=== ADDITIONAL DEBUGGING ===\")\n            \n            # Check if user exists in weapons table\n            cursor.execute(\"SELECT COUNT(*) FROM weapons WHERE user_id = ?\", (user_id,))\n            weapons_table_exists = cursor.fetchone()[0] > 0\n            print(f\"User exists in weapons table: {weapons_table_exists}\")\n            \n            # Check raw database value\n            cursor.execute(\"SELECT rifle FROM weapons WHERE user_id = ?\", (user_id,))\n            raw_rifle = cursor.fetchone()\n            print(f\"Raw rifle value in DB: {raw_rifle}\")\n            \n            # Check weapons table structure\n            cursor.execute(\"PRAGMA table_info(weapons)\")\n            columns = cursor.fetchall()\n            has_rifle_column = any(col[1] == 'rifle' for col in columns)\n            print(f\"Weapons table has 'rifle' column: {has_rifle_column}\")\n        \n        conn.close()\n        \n    except Exception as e:\n        print(f\"ERROR: {e}\")\n        traceback.print_exc()\n\ndef check_database_constraints():\n    \"\"\"Check for any database constraints or issues\"\"\"\n    try:\n        print(\"\\n=== CHECKING DATABASE CONSTRAINTS ===\")\n        \n        conn = sqlite3.connect('dragonrp.db')\n        cursor = conn.cursor()\n        \n        # Check if there are any foreign key violations\n        cursor.execute(\"PRAGMA foreign_key_check\")\n        fk_violations = cursor.fetchall()\n        if fk_violations:\n            print(f\"Foreign key violations: {fk_violations}\")\n        else:\n            print(\"No foreign key violations\")\n        \n        # Check database integrity\n        cursor.execute(\"PRAGMA integrity_check\")\n        integrity = cursor.fetchone()[0]\n        print(f\"Database integrity: {integrity}\")\n        \n        # Check weapons table triggers or constraints\n        cursor.execute(\"SELECT sql FROM sqlite_master WHERE type='trigger' AND tbl_name='weapons'\")\n        triggers = cursor.fetchall()\n        if triggers:\n            print(f\"Weapons table triggers: {triggers}\")\n        else:\n            print(\"No triggers on weapons table\")\n            \n        conn.close()\n        \n    except Exception as e:\n        print(f\"Database check error: {e}\")\n\nif __name__ == \"__main__\":\n    test_weapon_production()\n    check_database_constraints()","size_bytes":4642},"fix_user_production.py":{"content":"#!/usr/bin/env python3\n\"\"\"Fix weapon production for specific user\"\"\"\n\nimport sqlite3\nfrom database import Database\nfrom game_logic import GameLogic\n\ndef fix_user_production():\n    user_id = 7716228404  # Your user ID\n    \n    print(f\"=== FIXING PRODUCTION FOR USER {user_id} ===\")\n    \n    db = Database()\n    game_logic = GameLogic(db)\n    \n    # Test production step by step\n    print(\"Testing rifle production...\")\n    \n    # Get current state\n    player = db.get_player(user_id)\n    weapons_before = db.get_player_weapons(user_id)\n    print(f\"Money before: ${player['money']:,}\")\n    print(f\"Rifles before: {weapons_before.get('rifle', 0)}\")\n    \n    # Try production\n    result = game_logic.produce_weapon(user_id, 'rifle', 1)\n    print(f\"Production result: {result}\")\n    \n    # Check after\n    player_after = db.get_player(user_id)\n    weapons_after = db.get_player_weapons(user_id)\n    print(f\"Money after: ${player_after['money']:,}\")\n    print(f\"Rifles after: {weapons_after.get('rifle', 0)}\")\n    \n    # Check if it worked\n    if weapons_after.get('rifle', 0) > weapons_before.get('rifle', 0):\n        print(\"✅ Production works!\")\n    else:\n        print(\"❌ Production failed!\")\n        \n        # Check database directly\n        conn = sqlite3.connect('dragonrp.db')\n        cursor = conn.cursor()\n        \n        cursor.execute(\"SELECT rifle FROM weapons WHERE user_id = ?\", (user_id,))\n        raw_rifle = cursor.fetchone()\n        print(f\"Raw database rifle value: {raw_rifle}\")\n        \n        # Try manual fix\n        print(\"Trying manual database update...\")\n        cursor.execute(\"UPDATE weapons SET rifle = rifle + 1 WHERE user_id = ?\", (user_id,))\n        conn.commit()\n        \n        # Check again\n        cursor.execute(\"SELECT rifle FROM weapons WHERE user_id = ?\", (user_id,))\n        new_rifle = cursor.fetchone()\n        print(f\"After manual update: {new_rifle}\")\n        \n        conn.close()\n\nif __name__ == \"__main__\":\n    fix_user_production()","size_bytes":1983},"test_distance_system.py":{"content":"#!/usr/bin/env python3\n\"\"\"Test the new distance-based attack system\"\"\"\n\nfrom config import Config\n\ndef test_distance_system():\n    print(\"=== TESTING DISTANCE-BASED ATTACK SYSTEM ===\\n\")\n    \n    # Test countries\n    test_cases = [\n        ('IR', 'TR'),   # Iran to Turkey (neighbors)\n        ('IR', 'SA'),   # Iran to Saudi (regional)\n        ('IR', 'US'),   # Iran to USA (intercontinental)\n        ('KP', 'CN'),   # North Korea to China (neighbors)\n        ('KP', 'JP'),   # North Korea to Japan (neighbors)\n        ('US', 'RU'),   # USA to Russia (intercontinental)\n    ]\n    \n    # Mock player weapons\n    player_weapons = {\n        'rifle': 100,\n        'tank': 50,\n        'f22': 25,\n        'ballistic_missile': 10,\n        'trident2_nuclear': 5\n    }\n    \n    for country1, country2 in test_cases:\n        print(f\"🌍 {Config.COUNTRIES[country1]} -> {Config.COUNTRIES[country2]}\")\n        \n        # Get distance type\n        distance_type = Config.get_country_distance_type(country1, country2)\n        print(f\"   📏 فاصله: {distance_type}\")\n        \n        # Get available weapons\n        available_weapons = Config.get_available_weapons_for_attack(country1, country2, player_weapons)\n        print(f\"   ⚔️ سلاح‌های قابل استفاده: {len(available_weapons)} نوع\")\n        \n        for weapon, count in available_weapons.items():\n            weapon_name = Config.WEAPONS.get(weapon, {}).get('name', weapon)\n            print(f\"      - {weapon_name}: {count}\")\n        \n        print()\n\nif __name__ == \"__main__\":\n    test_distance_system()","size_bytes":1581},"test_your_weapons.py":{"content":"#!/usr/bin/env python3\n\"\"\"Test your specific user weapons\"\"\"\n\nfrom database import Database\n\ndef test_your_weapons():\n    user_id = 7716228404  # Your ID\n    \n    db = Database()\n    \n    print(f\"=== CHECKING YOUR WEAPONS (User {user_id}) ===\")\n    \n    # Get your current weapons\n    weapons = db.get_player_weapons(user_id)\n    \n    print(f\"Your current weapons:\")\n    print(f\"🔫 Rifle: {weapons.get('rifle', 0)}\")\n    print(f\"🚗 Tank: {weapons.get('tank', 0)}\")\n    print(f\"✈️ Fighter Jet: {weapons.get('fighter_jet', 0)}\")\n    print(f\"🚁 Drone: {weapons.get('drone', 0)}\")\n    print(f\"🚀 Missile: {weapons.get('missile', 0)}\")\n    print(f\"🚢 Warship: {weapons.get('warship', 0)}\")\n    print(f\"🛡 Air Defense: {weapons.get('air_defense', 0)}\")\n    print(f\"🚀 Missile Shield: {weapons.get('missile_shield', 0)}\")\n    print(f\"💻 Cyber Shield: {weapons.get('cyber_shield', 0)}\")\n    print(f\"💣 Nuclear Bomb: {weapons.get('nuclear_bomb', 0)}\")\n    \n    # Now add one rifle manually to test\n    print(\"\\n=== ADDING 1 RIFLE FOR TEST ===\")\n    db.add_weapon(user_id, 'rifle', 1)\n    \n    # Check again\n    weapons_after = db.get_player_weapons(user_id)\n    print(f\"Rifles after adding 1: {weapons_after.get('rifle', 0)}\")\n    \n    if weapons_after.get('rifle', 0) > weapons.get('rifle', 0):\n        print(\"✅ Manual add works!\")\n        print(\"The problem is likely in the UI refresh or bot message display\")\n    else:\n        print(\"❌ Manual add failed!\")\n\nif __name__ == \"__main__\":\n    test_your_weapons()","size_bytes":1529}},"version":1}